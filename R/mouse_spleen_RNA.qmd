---
title: "mouse_spleen_RNA"
author: "Ann Strange"
date: "12/4/2024"
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: true
---

## Mouse Spleen CosMx Analysis

Script name: mouse_spleen_RNA

Purpose of script: load the Seurat data object produced by the AtoMx pipeline, generate plots, evaluate rna quality controls. summarize and display what has already been done in AtoMx 1

Use Seurat LoadNanostring() method from flatfiles (vs exported Seurat RDS) but either is fine. 1b. subtract Negative Probes from the counts matrix 1c. Apply QC filters to the Seurat object

2\. Load Sample metadata per cell:

2a. FOV and Sample.ID assignments

2b. Apply panCK/CD45 phenotypes to cells where possible (not done here).

3.  Normalization method: Seurat Normalized

3\. Apply Cell Typing to the Seurat object with InSituType

PCA and Umap

4\. plots and visualizations

TBD:

1.  Leiden Clusters and/or CellCharter -\> niches,
2.  Cell-Cell Communications
3.  Attractive plots. Note: Giotto has some very nice plots but loading Giotto requires a very specific folder structure, and the Composite Images it relies on for the morphology background are no longer output

Author: Ann Strange Date Created: 2024-10-14

**Email: ann.strange\@cuanschutz.edu**

content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Setup

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r include=FALSE}
knitr::opts_chunk$set(echo=FALSE)
knitr::opts_knit$set(root.dir = "/Users/annmstrange/Documents/git/cosMx-mouse-spleen")

```

```{r libraries}
#| echo: false
#| message: false
#| warning: false

require(tidyverse)
require(data.table)
library(Seurat)
library(Matrix)
library(ggplot2)
library(InSituType)
library(patchwork)
library(pheatmap)
library(SeuratExtend)
library(DESeq2)
library(ggrepel)
library(readxl)
library(openxlsx)
library(grid)
library(gridExtra)

```

Setup variables, make sure to change paths for the files needed.

```{r setup}
#| echo: false

#old.wd <- getwd()           # save the current working directory
#setwd("~/Documents/git/cosMx-mouse-spleen/")   # set working directory (mac)
source("/Users/annmstrange/Documents/git/cosMx-mouse-spleen/R/mouse_seurat_utils.R") # load up the functions we need

options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
#memory.limit(30000000)     # this is needed on some PCs to increase memory allowance, but has no impact on macs.
options(Seurat.object.assay.version = "v5")
options(future.globals.maxSize= 10*1024*1024^2) # 10GB


```

Setup paths

```{r paths}
#| echo: false
###################################
# File structure setup, Mac syntax
###################################
# Modify these for each RNA experiment after export from AtoMx

#root_dir <- '/Volumes/T7Shield/PSR-GEN-057' # Experiment specific folder structure
root_dir <- '/Users/annmstrange/Documents/Projects/cosMx_MouseOct2024/Sabaawy_MuTMA_RNA_07_10_2024_21_25_12_667'
root_ref_dir <- '/Volumes/T7Shield' # reference dir for files not specific to this Experiment. 
exp_name <- 'Sabaawy_MuTMA_RNA_07_10_2024_21_25_12_667'
slide_names <- c( 'Sabaawynewcore091320246', 'Sabaawynewcore091320245')
# The cell ids in these are labeled c_1, c_2, c_3, c_4 respectively in the seurat object and metadata files.
slide_names
slide_name <- 'Sabaawynewcore091320245' # select one to work with (can be arbitrary)
# run_names is not needed but could be used to navigate the directory structure
run_names <- c('20240920_233038_S2','20240920_233038_S1')
run_name <- '20240920_233038_S1' # matches slide_name

# Caution: There is a cell naming convention in the flatfile vs the exported Seurat Object that differ. 
# After seurat::LoadNanostring(), we will rename the keys to match the Seurat object, like c_<slide_num>_<fov>_<cell_num> e.g. c_1_1_300
# cell_label_names is not explicitly needed, but merge will prepend these to the rownames if uniqueness is needed. 
# Our use of rename_keys makes the use of these cell_label_names unnecessary on merge.
# cell_label_names <- c('c_1', 'c_2', 'c_3', 'c_4')

results_dir <- paste0(root_dir, "/spleen_results")
saved_rds_dir <- paste0(root_dir, "/saved_objs")
file.exists(saved_rds_dir)

rna_root_dir <- paste0(root_dir, '/RawFiles') # or flatFiles
rna_flatfiles_dir <- paste0(root_dir, '/flatFiles')
rna_dir <- paste0(rna_root_dir, '/', slide_name, '/', run_name, '/AnalysisResults/s2wi20fpqr') 
# This text file lists all the Probes
# /Users/annmstrange/Documents/Projects/cosMx_MouseOct2024/Sabaawy_MuTMA_RNA_07_10_2024_21_25_12_667/RawFiles/Sabaawynewcore091320245/20240920_233038_S1
rna_lookup <- paste0(rna_root_dir, '/', slide_name, '/', run_name, '/plex-s2wi20fpqr.txt')

metadata_dir <- paste0(root_dir,'/Metadata')
df_sample <- read.csv(paste0(metadata_dir, '/Sample_Metadata.csv'))
df_fov_meta <- read.csv(paste0(metadata_dir, '/FOV_Sample_Ids_RNA.csv'))

# This nanostring-provided file lists Probe names, gene names, and some annotations
markers_dir <- paste0(root_dir, '/BioMarkers')
ns_gene_data <- 'LBL-11176-03-Mouse-Universal-Cell-Characterization-Gene-List.xlsx'
ns_gene_fn <- paste0(markers_dir, '/', ns_gene_data)
df_gene_data <- get_nanostring_mouse_gene_annotations(ns_gene_fn)

df_special_genes <- read.csv(paste0(markers_dir, '/GenesOfInterest_RNA_HES.csv'), header=TRUE, sep=",")
colnames(df_special_genes) <- c('Display_Name', 'OfInterest_Reason', "Notes", "GroupAs", "Highlight")
head(df_special_genes)

#genes_special <- list(df_special_genes$Display_Name[1:47]) # 


# left outer join with df_gene_data by RNA1K to gene 
df_gene_data2 <- left_join(df_gene_data, df_special_genes, by ='Display_Name')
#df_gene_data2$OfInterest_Reason[is.na(df_gene_data2$OfInterest_Reason)] <- " "
head(df_gene_data2)
nrow(df_gene_data2)
df_gene_data <- df_gene_data2

```

Special Genes are ones we are specifically interested in for a reason, or perhaps simply an annotation that they should be grouped together such as Cd3d and Cd3e, different isotopes for the same RNA molecule. The spreadsheet/csv can be prepared in advance for easier plotting.

```{r specialgenes}
#| echo: false

df_special_genes <- read.csv(paste0(markers_dir, '/GenesOfInterest_RNA_HES.csv'))
head(df_special_genes)
```

```{r specialgenes2}
#| echo: false
colnames(df_special_genes) <- c('Display_Name', 'OfInterest_Reason', "Notes", "GroupAs", "Highlight")
df_special_genes <- df_special_genes %>% dplyr::select(Display_Name, OfInterest_Reason, Notes, GroupAs, Highlight)
head(df_special_genes)

genes_special <- df_special_genes$Display_Name
genes_special

genes_highlight <- df_special_genes %>%
  filter(Highlight == "x") %>%
  pull(Display_Name)

genes_highlight
# breakdown
genes_senescence <- df_special_genes %>%
  filter(OfInterest_Reason %in% c("Senescence")) %>%
  pull(Display_Name)

genes_special_il <- df_special_genes %>%
  filter(OfInterest_Reason %in% c("Interleukins", "Chemokines")) %>%
  pull(Display_Name)
genes_special_il

genes_special_gf <- df_special_genes %>%
  filter(OfInterest_Reason %in% c("Growth Factors")) %>%
  pull(Display_Name)

genes_bcells <- df_special_genes %>%
  filter(OfInterest_Reason %in% c("Bcell")) %>%
  pull(Display_Name)
genes_bcells 

# left outer join with df_gene_data by RNA1K to gene 
df_gene_data2 <- left_join(df_gene_data, df_special_genes, by ='Display_Name', suffix=c("", ""))
df_gene_data2$OfInterest_Reason[is.na(df_gene_data2$OfInterest_Reason)] <- " "
df_gene_data2$Notes[is.na(df_gene_data2$Notes)] <- " "
df_gene_data2$GroupAs[is.na(df_gene_data2$GroupAs)] <- " "
df_gene_data2$Highlight[is.na(df_gene_data2$Highlight)] <- " "
head(df_gene_data2)
nrow(df_gene_data2)
df_gene_data <- df_gene_data2

table(df_gene_data2$OfInterest_Reason)

file.exists(results_dir)
file.exists(rna_root_dir) 
file.exists(rna_dir)
file.exists(rna_lookup)
file.exists(metadata_dir)
file.exists(paste0(metadata_dir, '/Sample_Metadata.csv'))
file.exists(paste0(metadata_dir, '/FOV_Sample_Ids_RNA.csv'))
```

Load RNA labels for RNA marker attributes

expect counts similar to this for the 1K RNA panel:

Endogenous Negative SystemControl

950 10 197

```{r probes}
#| echo: false

df_rna_lookup <- read.table(rna_lookup, header = TRUE, sep = "\t")
head(df_rna_lookup) # ProbeID e.g CPROT01266, DisplayName e.g. 'CD4'
# example lookup; RNA has no ProbeID, but DisplayName
df_rna_lookup[df_rna_lookup$CodeClass != 'Endogenous', c('DisplayName','CodeClass')] 
# CodeClass can be SystemControl, Negative, or Endogenous. 

print(table(df_rna_lookup$CodeClass))
```

### Color Setup

```{r colors}

# Cell Type palette to be consistent with one of the AtoMx palettes
celltype_colors <- c("#1b9e77", "#7570b3", "#e7298a", "#66a61e", "#e6ab02",
                    "#a6761d", "#b3cc1a", "#377eb8", "#f87878",  "#4daf4a",
                    "#984ea3", "#a65628", "#af648b", "#999999",
                    "#ff7f00", "#cccccc",
                    "lightgreen", "turquoise", "lightblue", "lightyellow", "pink")

# CellType / InSituType supervised cell typing types:
names(celltype_colors) <- c("B.cell", "Dendritic.cell", "Endothelial", 
                            "Fibroblast", "Macrophage", "Mast.cell",
                            "Monocyte", "Neutrophil", "NK.cell", "Plasma",
                            "Plasmablast", "T.cell.CD4", "T.cell.CD8",
                            "T.cell.Reg", "Plasmacytoid", "unknown", 
                            
                            "a","b","c","d", "e")

# change to my labels 
mouseIO_colors <- c("#1b9e77", "#7570b3", "#e7298a", "tan", "#e6ab02",
                    "#a6761d", "#b3cc1a", "#377eb8", "#f87878",  "#4daf4a", "darkgreen", # #984ea3",
                    "#af648b", "#a6761d",  "#af648b", "#999999", "#999999",
                    "turquoise", "pink", "pink",  #  "lightblue",
                    "#cccccc", "#dddddd", "#555555", "#444444", "#555555", "#666666", 
                    "darkgreen",
                    "#b3cc1a", "#b3cc1a",
                    "lavender", "turquoise", "lightblue", "peachpuff", "lightyellow",
                    "#a65628", "lightyellow",  "limegreen", "#66a61e",
                    "#984ea3", "grey50",
                    "turquoise", "lightblue" ,"lavender","peachpuff")


names(mouseIO_colors) <- c("B.cell", "Dendritic.cell", "Endothelial", 
                                 "Fibroblast", "Macrophage", 
                            "Mast.cell", "Monocyte", "Neutrophil", "NK", "Plasma", "Plasmablast", 
                           "T.cell", "T.cell.CD4", "T.cell.CD8", "T.cell.regulatory", "T.cell.reg", 
                           "Myofibroblast", "Erythroid.projenitor", "Erythroid.Projenitor",
                            "unknown", "Unknown.34", "Unknown.35", "Unknown.7","Unknown.9", "Unknown.14",
                           "B.cell.like", 
                           "Macrophage/Monocytes", "Monocyte/Macrophage", 
                            "a","b","c","d", "e",
                           "NK.or.T.cell", "Basophil.like","B.cell.2","B.cell.3",
                           "Granulocyte" , "ECM",
                            "Plasmablast","Plasmacytoid.DC", "other.1", "other.2")


# molecule colors #00ffff cyan, #ff0000 red, 



```

Skip: Load Seurat Data from Flatfiles

This loads only the first slide (ending in "5") but both can be loaded and merged here.

Normalization methods can be Total, Seurat, or Pearson. We use Seurat 'Normalize'

```{r loadnanostring}
 #| echo: false
 #| warning: false
 
# Ignoring: "Warning: Not validating FOV objects" on subset
obj_list <- list()
negmeans_list <- list()
for (i in 1:2){
  print(i)
  print(slide_names[i])
  print(run_names[i])
  flatfiles_dir <- paste0(rna_flatfiles_dir, '/', slide_names[i])
  print(flatfiles_dir)
  print(file.exists(flatfiles_dir))
  list.files(flatfiles_dir)
 
  obj_list[[i]] <- LoadNanostring(data.dir = flatfiles_dir, fov = slide_names[i], assay="RNA")
  # LoadNanostring doesn't handle the metadata; add 
  obj_list[[i]] <- load_mouse_meta_load_missed(obj_list[[i]], paste0(flatfiles_dir, "/",slide_names[i],"_metadata_file.csv.gz"))
  
  # This rename is needed as LoadNanostring uses <cell>_<fov> cell ID vs the c_<slide>_<fov>_<cell> format used elsewhere
  obj_list[[i]]  <- rename_keys(obj_list[[i]]) 
  # Each slide can be normalized independently or together. Here we'll normalize each 
  
  # Remove SystemControls
  print(paste0("Num Features before removing System Controls: ", nrow(obj_list[[i]])))

  obj_list[[i]] = remove_sys_control(obj_list[[i]], "RNA", "counts")
  print(paste0("Num Features after removing System Controls (expect 1010): ", nrow(obj_list[[i]])))
  
  # keep 0 values for Negative controls in the counts matrix after subtracting, and set aside the means for later.  InSituType needs this.
  negmeans_list[[i]] <- get_neg_control_means(obj_list[[i]], "RNA", "counts")
  # add metadata for "neg" also 
  obj_list[[i]] <- AddMetaData(obj_list[[i]], metadata = data.frame(neg = negmeans_list[[i]]))
 
  obj_list[[i]] <- subtract_neg_control(obj_list[[i]], "RNA", "counts")
  print(paste0("Num Features after accounting for Negative Controls (s/b unchanged): ", nrow(obj_list[[i]])))
  print(paste0("Num Cells before QC: ", ncol(obj_list[[i]])))
  # BASIC QC filter needed to prevent sparsity errors in SCTransform; option for more later 
  obj_list[[i]] <- subset(obj_list[[i]], subset = (nFeature_RNA > 10 & nCount_RNA > 20)) #20 genes/cell. also vs nFeature_Nanostring
  print(paste0("Num Cells after super basic QC: ", ncol(obj_list[[i]])))
  # Remove cells that didn't pass the AtoMx QC
  obj_list[[i]] <- subset(obj_list[[i]], subset = qcCellsFlagged == FALSE)
  print(paste0("Num Cells after filtering on more complete cell QC: ", ncol(obj_list[[i]])))
  
  # Normalizes counts, same as selecting "Seurat" as the norm method in AtoMx
  # other options are "Total" or Pearson
  obj_list[[i]] <- NormalizeData(obj_list[[i]], normalization.method = "LogNormalize", scale.factor = 10000)
  obj_list[[i]]
  
}
#sobj <- obj_list[[i]] # 270K cells to load one slide
# If loading both slides, uncomment this line
sobj <- merge(obj_list[[1]], y = c(obj_list[[2]]))
#saveRDS(sobj, paste0(saved_rds_dir,"/sobj_after_Load1.rds"))

#class(negmeans_list[[1]])
negmeans_vec <- c(negmeans_list[[1]], negmeans_list[[2]])
sum(negmeans_vec) # 21904 
# Save for later in case of InSituType
#write.table(negmeans_vec, file = paste0(results_dir, "/negmeans_list.txt"), row.name=TRUE, col.names = FALSE)

```

Add FOV and Sample Metdata

```{r loadfovs}

# set rownames
rownames(df_sample) <- df_sample$Sample.ID

head(df_sample)
# keep only subset of columns
df_sample <- df_sample[, c('Sample.ID', 'Sample.Label', 'Sample.Nm', 'tissue', 'condition', 'Physical.Tag', 'Sex', 'Date.of.Birth', 'Genotype', 'time.to.form.tumor', 'Organ')]

head(df_fov_meta)

# Replace "- " with " " in the Sample.Label column
df_sample$Sample.Label <- gsub("\n", "", df_sample$Sample.Label)
df_sample$Sample.Label <- gsub("  ", " ", df_sample$Sample.Label)

#join 
df_fov_meta2 <- merge(df_fov_meta, df_sample, by = 'Sample.ID')
head(df_fov_meta2)
table(df_fov_meta2$Sample.Label)
table(df_fov_meta2$Genotype)

sobj <- add_mouse_sample_metadata(sobj, df_fov_meta2)
table(sobj@meta.data$Organ)
table(sobj@meta.data$Genotype)
sobj

#saveRDS(sobj, paste0(saved_rds_dir,"/sobj_full_after_meta.rds"))
```

## Subsetting

Subset to only single slide (in case of having loaded both)

```{r subset1}
#| echo: false
#| message: false
#| warning: false
sobj_spleen <- subset(sobj, subset = Organ == "Spleen" & Sample.ID >= "30")
sobj_spleen5 <- subset(sobj_spleen, subset = Run_Tissue_name == "Sabaawy new core 09/13/2024 5")

dim(sobj)
dim(sobj_spleen)
dim(sobj_spleen5)

#saveRDS(sobj_spleen5, paste0(saved_rds_dir,"/sobj_spleen5.rds"))

#saveRDS(sobj, paste0(saved_rds_dir,"/sobj_spleen.rds"))

```

# Resume Here

Resume here to save a lot of time. This Seurat object is fully loaded including metadata

```{r resume}

#sobj_spleen5 <- readRDS(paste0(saved_rds_dir,"/sobj_spleen5.rds"))

```

## Spleen Subsets

Subset to Spleen only, the focus of this Analysis.

The reason for subsetting to specific samples is that this automatically creates Seurat fovs with the bounding boxes for the extent of the sample, which makes spatial plots for a single sample easier. We'll look at numbers using the sobj_spleen subset but keep smaller subsets handy for image plots.

```{r subset}
#| echo: false
#| warning: false

#sobj_spleen_even <- subset(sobj, subset = Sample.ID %in% c(30,32,34)) 
#sobj_spleen_even5 <- subset(sobj_spleen_even, subset = Run_Tissue_name == "Sabaawy new core 09/13/2024 5")

# rename to P21
#feat_names <- rownames(sobj_spleen_even5)
#feat_names <- gsub("Cdkn1a", "P21", feat_names)
#rownames(sobj_spleen_even5) <- feat_names

table(sobj_spleen5@meta.data$Sample.ID)
# Focusing on only 3 samples, slide 5
sobj_spleen30 <- subset(sobj_spleen5, subset = Sample.ID == 30 & 
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen31 <- subset(sobj_spleen5, subset = Sample.ID == 31 & 
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen32 <- subset(sobj_spleen5, subset = Sample.ID == 32 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen33 <- subset(sobj_spleen5, subset = Sample.ID == 33 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen34 <- subset(sobj_spleen5, subset = Sample.ID == 34 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen35 <- subset(sobj_spleen5, subset = Sample.ID == 35 & 
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")

```

## Spatial Feature Plots

of key Senescence Genes

```{r featureplots}
#| echo: false
#| warning: false
features_genes <- c("P21", "Mki67" , "Lmna", "Chek1","Stmn1", "Pten", "Ccl5", "Cxcl13", "Gzmb" )
Idents(sobj_spleen5) <- "Genotype"
ImageDimPlot(sobj_spleen5, fov="Sabaawynewcore091320245")
# FeaturePlot
p <- ImageFeaturePlot(sobj_spleen30, fov="Sabaawynewcore091320245",
                 features = features_genes, 
                 size = 1,
                 coord.fixed=TRUE,
                 dark.background = FALSE) + 
  patchwork::plot_layout(ncol=3)
print(p)
# note: this returns patchworked object

str(p)
ggsave(paste0(results_dir,"/spleen30_senescence_FeaturePlots.png"), plot = p,  width = 10, height = 12, dpi = 300)

p <- ImageFeaturePlot(sobj_spleen32, fov="Sabaawynewcore091320245",
                 features = features_genes, 
                 size = 1,
                 dark.background = FALSE) + 
    patchwork::plot_layout(ncol=3)
ggsave(paste0(results_dir,"/spleen32_senescence_FeaturePlots.png"), plot = p, width = 10, height = 12, dpi = 300)


p <- ImageFeaturePlot(sobj_spleen34, fov="Sabaawynewcore091320245",
                 features = features_genes, 
                 size = 1,
                 dark.background = FALSE) + 
  patchwork::plot_layout(ncol=3)
ggsave(paste0(results_dir,"/spleen34_senescence_FeaturePlots.png"), plot = p, width = 10, height = 12, dpi = 300)



```

CellTypes from AtoMx

CellTyping was run in AtoMx by re-running this module of the pipeline, uploading different possible Cell Profile Matrices.

Best:

From the CosMx-Cell-Profiles repo, adapted the Human IO matrix for mouse by querying linked database in biomaRt.

<https://github.com/Nanostring-Biostats/CosMx-Cell-Profiles>

scRNA Mouse Spleen_MCA.RData from <https://github.com/Nanostring-Biostats/CellProfileLibrary/tree/master/Mouse/Adult>

This celltype is the semisupervised InSituType + 5 clusters. cluster c appears to really be Macrophages

Some of the other celltypes coming from AtoMx are below. When running cell typing multiple times, it's necessary to figure out which of these long column names is for the cell typing (or niches) you want, since they are all stored in the metatdata flatfile and the R Seurat object you can export from AtoMx. These will differ each time. Some options are to use table() to see what label counts seem to be the most recent celltyping attempt? I slightly prefer to run InSituType in R code for faster access to this data, but either way works. Here, I wanted to take representative screenshots in AtoMx including cell types so I used the AtoMx celltyping returned in this field: "RNA_nbclust_f89a7c0e.a01e.4e44.9bbc.67ffbba70793_1_clusters" to match the fully supervised AtoMx celltyping found in the menu under "WIO" (does not have labels a,b,c,d,e)

What are the other celltyping attempts in this dataset:

a57c6ac1.3d04.4093.af08.340b8f4c3e0d was run with the Mouse Brain reference and has celltypes line Astrocytes, Ependymal cells, Glia, also 30 unsupervised clusters. Could use these for the mouse brain. (but 30 is too many unclassified cell types).

4786da16.29dc.44c6.ad08.97cef88cc2ee uses our Mouse IO + 5 unsupervised clusters ( best)

e154c0c5.0f1e.45ff.ae0f.58708a68f270

colnames with 62fb7681.b3f9.4725.bdf6.2eda5ee04cac has celltypes incl Dentric cell S100a4.high

273c9998.c801.4cc8.a5af.7d3786190c13 is unsupervised, no labels

Column names starting with RNA_nbclust and ending with \_clusters are the cell type assignments from InSituType.

\[4\] "RNA_nbclust_505dea9c.f901.4337.965a.d3f312c2867d_1_clusters" \[5\] "RNA_nbclust_505dea9c.f901.4337.965a.d3f312c2867d_1_posterior_probability" \[6\]

"RNA_nbclust_7c39eeda.4bb5.4a69.b6d0.9a43710bfb64_1_clusters" \[7\] \# Dendric S100a4 hi, semisup

"RNA_nbclust_7c39eeda.4bb5.4a69.b6d0.9a43710bfb64_1_posterior_probability" \[8\] "RNA_nbclust_f89a7c0e.a01e.4e44.9bbc.67ffbba70793_1_clusters" \[9\] \# Supervised

"RNA_nbclust_f89a7c0e.a01e.4e44.9bbc.67ffbba70793_1_posterior_probability" \[10\]

"RNA_nbclust_e3def5ab.413a.4c02.b683.f76ba4202d63_1_clusters" \[11\] \# Semi + 5

"RNA_nbclust_e3def5ab.413a.4c02.b683.f76ba4202d63_1_posterior_probability" \[12\] "RNA_nbclust_853a9cfe.66b9.4d5b.895c.daee922bc6a6_1_clusters" \[13\] \# Dendritic S100a4 + to i

"RNA_nbclust_853a9cfe.66b9.4d5b.895c.daee922bc6a6_1_posterior_probability" \[14\] "RNA_nbclust_0fd218a9.2846.44fe.8b33.4198048004ab_1_clusters" \[15\] \# Mouse Brain "RNA_nbclust_0fd218a9.2846.44fe.8b33.4198048004ab_1_posterior_probability"

```{r celltypes}
df_cell_types <- sobj_spleen5@meta.data %>%
   dplyr::select ("cell", "Sample.ID", 
                  "RNA_nbclust_e3def5ab.413a.4c02.b683.f76ba4202d63_1_clusters",
                  # semisupervised plus 10 
                  "RNA_nbclust_f89a7c0e.a01e.4e44.9bbc.67ffbba70793_1_clusters",
                  # "RNA_nbclust_853a9cfe.66b9.4d5b.895c.daee922bc6a6_1_clusters",
                  "spatialclust_4786da16.29dc.44c6.ad08.97cef88cc2ee_1_assignments"
            )
  # group_by(Sample.ID, RNA_nbclust_853a9cfe.66b9.4d5b.895c.daee922bc6a6_1_clusters
  #         ) %>%
  # summarise(count = n(), .groups = "drop")
head(df_cell_types)
colnames(df_cell_types) <- c("cell", "Sample.ID", "CellType", "CellType_sup", "Niche")

# Assign "a" to "Macrophges" 
df_cell_types$CellType <- ifelse(df_cell_types$CellType == "c", "Macrophage", df_cell_types$CellType)

table(df_cell_types$CellType_sup)
head(df_cell_types)


```

```{r celltype}
sobj_spleen5 <- AddMetaData(sobj_spleen5, metadata = df_cell_types[c('CellType', 'CellType_sup')])

```

## PCA and UMAP

### PCA

```{r pca}
#| echo: false
#| message: false
#| warning: false
#| 
sobj_spleen5 <- FindVariableFeatures(object = sobj_spleen5) 
   # , mean.function = ExpMean, dispersion.function = LogVMR, 
   # x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)

#length(x = sobj_spleen@var.features)

sobj_spleen5 <- ScaleData(sobj_spleen5)
#sobj_spleen5 <- RunPCA(sobj_spleen5, verbose = FALSE, npcs = 50)

# Assess how PCA did with different npcs, 20, 30, 50 e.g. 
# ElbowPlot to decide best cutoff.  DimPlot colored by possible batch effect variables. e.g. slides should look integrated.
sobj_spleen5 <- RunPCA(sobj_spleen5, verbose = FALSE, npcs = 30)
ElbowPlot(sobj_spleen5)


```

```{r pcaplots}
#| echo: false

# PCA plot
#Idents(sobj_spleen5) <- "Sample.ID"
features <- TopFeatures(sobj_spleen5, nfeautures=30)
sobj_spleen5.no.umap <- sobj_spleen5
sobj_spleen5.no.umap[["umap"]] <- NULL
DimPlot(sobj_spleen5.no.umap) + RotatedAxis()


```

### DotPlot of Supervised InsituType CellTypes

These InSituType celltypes were run in AtoMx as supervised, meaning all cells are classified as an existing/pre-listed type from the Human-\> Mouse Cell Profile matrix (made by simply changing upper to mixed case gene names)

TODO: Replace this with the cell type we want to use... tbd.

```{r CellTypesup}
#| echo: false

Idents(sobj_spleen5) <- "CellType_sup"

df_markers <- FindAllMarkers(sobj_spleen5,nfeatures=5 )
head(df_markers)

# reduce to highest FC genes
top_genes <- df_markers %>%
      dplyr::top_n(40, wt = abs(avg_log2FC))
      #dplyr::select(1:10)

print(top_genes$gene)


p <- DotPlot(sobj_spleen5, features = unique(top_genes$gene)) + RotatedAxis()
p
ggsave(paste0(results_dir, "/DotPlot_CellType_sup1.png"), p, width=12)
```

### Heatmap PCA

```{r umap}

Idents(sobj_spleen5) <- "Genotype"
table(Idents(sobj_spleen5))
DoHeatmap(sobj_spleen5,
          #group.by = "ident",
          features=TopFeatures(sobj_spleen5, dim=1, nfeatures=30),
          )

# PCHeatmap(object = sobj_spleen, pc.use = 1, cells.use = 500, do.balanced = TRUE, label.columns = FALSE)
# PCHeatmap(object = sobj_spleen, pc.use = 1:12, cells.use = 500, do.balanced = TRUE, 
#     label.columns = FALSE, use.full = FALSE)
```

### Umap

The resolution of 0.6 found 17 clusters which was better for finding the Dendritic cells in sample 34, but did subdivide B.cells too far (ok)

```{r UMAP}
set.seed(24)
sobj_spleen5 <- FindNeighbors(sobj_spleen5, dims = 1:30)
sobj_spleen5 <- FindClusters(sobj_spleen5,  cluster.name='seurat_cluster.6', resolution=0.6, verbose = TRUE)
#sobj <- RunUMAP(sobj, min_dist=0.3, spread=5, dims = 1:20)
sobj_spleen5 <- RunUMAP(sobj_spleen5, dims = 1:20, spread=5, min_dist = 0.1, n_neighbors=10) # from 0.1, 30, was 20


# cell cluster assignments are kept here 
#table(Idents(sobj_spleen))
# This is where metadata is placed for clusters, independent of FindClusters cluster.name
table(sobj_spleen5@meta.data$seurat_clusters)

```

### Rename

```{r rename }
# Cluster renames
# Rename the cluster
df_meta <- sobj_spleen5@meta.data[c('cell', 'seurat_cluster.6')]
#df_meta$seurat_clusters.6 <- df_meta$seurat_clusters
head(df_meta)

df_meta <- df_meta %>%
  mutate(CellType_Label6 = case_when(
    seurat_cluster.6 == 0 ~ "Unknown.35",
    seurat_cluster.6  == 1 ~ "B.cell",
    seurat_cluster.6  == 2 ~ "Erythroid.Projenitor",
    seurat_cluster.6 == 3 ~ "T.cell",
    seurat_cluster.6  == 4 ~ "B.cell",
    seurat_cluster.6  == 5 ~ "Unknown.34",
    seurat_cluster.6 == 6 ~ "B.cell.like",
    seurat_cluster.6  == 7 ~ "Unknown.7",
    seurat_cluster.6  == 8 ~ "Macrophage/Monocytes",
    seurat_cluster.6 == 9 ~ "Unknown.9",
    seurat_cluster.6  == 10 ~ "Neutrophils",
    seurat_cluster.6  == 11 ~ "Plasma",
    seurat_cluster.6 == 12 ~ "Dendritic.cell",
    seurat_cluster.6  == 13 ~ "Macrophage",
    seurat_cluster.6  == 14 ~ "Unknown.14",
    seurat_cluster.6  == 15 ~ "Dendritic.cell",
    seurat_cluster.6  == 16 ~ "B.cell",
    TRUE ~ "other" # Optional: handle unexpected values
  ))

sobj_spleen5 <- AddMetaData(sobj_spleen5, metadata = df_meta[c('seurat_cluster.6','CellType_Label6')])

Idents(sobj_spleen5) <- 'seurat_cluster.6'
```

Show UMAP with Seurat clusters

```{r umap1}

Idents(sobj_spleen5) <- "CellType_Label6"
DimPlot(sobj_spleen5, reduction = "umap", alpha=0.5, cols=mouseIO_colors[sobj_spleen5@meta.data$CellType_Label6]) + 
  ggtitle("Seurat Louvain clusters6")

ggsave(paste0(results_dir, "/Umap_Louvain6.png"), last_plot(), dpi=300)
```

### 

DotPlot Setup

```{r gene_annots}

genes_cosMx_celltyping <- get_nanostring_celltyping_genes(ns_gene_fn)
cat("Nanostring lists", length(genes_cosMx_celltyping), "genes for celltyping" )

get_top_markers <- function(sobj, cluster, n) {
  # depends on Idents being set correctly 
  markers <- FindMarkers(sobj, ident.1 = cluster)
  markers %>%
    rownames_to_column(var = "gene") %>% # Add gene names as a column
    top_n(n, wt = abs(avg_log2FC)) %>%  # Select top 10 markers by absolute log2 fold change
    mutate(cluster = cluster)            # Add cluster information
}

```

### DotPlot Most Recent Seurat Clusters

```{r seuratDotPlot}

# Function to find top n markers for a specific cluster
clusters <- unique(sobj_spleen5@meta.data$seurat_clusters)

# Apply the function to all clusters and combine results
Idents(sobj_spleen5) <- 'seurat_clusters'
top_markers <- map_dfr(clusters, get_top_markers, 15)

table(top_markers$cluster)
dim(top_markers) # num clusters * n
head(top_markers)
# also append our favorite cell typing markers

# Genes we want to see because they are classic cell typing genes
genes_lineage <- c("Cd19", "Ptprc", "Cd8a", "Cd8b1", "Cd68", "Cd163","Itgax", "Itgam", "Cd3e", "Cd3d", "Fn1", "Acta2")

# Compare DotPlots with top_markers limited by only ns celltyping genes, but
# augmented with classic cell typing genes for comparison
# remove any genes where the rowsum is too low unless its a lineage marker, try to keep with lower barriers. 
markers_to_plot <- top_markers %>%
    dplyr::filter ((gene %in% genes_cosMx_celltyping & (pct.1 + pct.2) > 0.1 
                   & p_val_adj < 0.05) | gene %in% genes_lineage)

dim(markers_to_plot) # 72 is somewhat reasonable; w repeats is really 36 unique genes

DotPlot(sobj_spleen5, features = unique(markers_to_plot$gene)) + RotatedAxis() +
  theme_minimal() + # Change to a minimal (white) background
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1), # Reduce font size and rotate x-axis labels
    axis.text.y = element_text(size = 10), # Adjust y-axis font size if needed
    panel.background = element_rect(fill = "white", color = NA), # Force white panel background
    plot.background = element_rect(fill = "white", color = NA)  # Force white overall background
    #panel.grid = element_blank() # Optional: remove grid lines if needed
  ) +
  ggtitle("Seurat Unsupervised Umap clusters Res0.6 top Log2FC")

ggsave(paste0(results_dir, "/Clusters_unsup6_DotPlot.png"), last_plot(), width = 12)

# tip:
# before running this, make sure no clusters are tiny. merge/rename



head(markers_to_plot$gene)
#get annotations
df_celltype_markers <- df_gene_data2 %>%
  filter(Display_Name %in% markers_to_plot$gene)
#write.csv( df_celltype_markers, paste0(results_dir, "/cell_typing_markers.csv"))
```

Rearrange DotPlot to keep only a nice "diagonal"

```{r cleanDot}

# same dotplot but refine/reorder genes and markers 

```

### Umap by Sample

```{r umapsample}

Idents(sobj_spleen5) <- "Sample.ID"
DimPlot(sobj_spleen5, reduction = "umap", alpha=0.5, cols='polychrome')

ggsave(paste0(results_dir, "/CellTypes_SampleID_Umap.png"), last_plot())
```

Show UMAP with Cell Type (InsituType + 5 unsup clusters)

```{r UMAP2}

# sobj_spleen5 <- FindNeighbors(sobj_spleen5, dims = 1:30)
# sobj_spleen5 <- FindClusters(sobj_spleen5,  cluster.name='seurat_cluster.4', resolution=0.4, verbose = FALSE)
#sobj <- RunUMAP(sobj, min_dist=0.3, spread=5, dims = 1:20)
#sobj_spleen5 <- RunUMAP(sobj_spleen5, dims = 1:20, spread=5, min_dist = 0.1, n_neighbors=20) # from 0.1, 30

Idents(sobj_spleen5) <- "CellType"
DimPlot(sobj_spleen5, reduction = "umap", alpha=0.5, cols=mouseIO_colors['CellType'])

ggsave(paste0(results_dir, "/CellTypes_SemiSup_Umap.png"), last_plot())
```

```{r semisupDot}

# Function to find top n markers for a specific cluster
clusters <- unique(sobj_spleen5@meta.data$CellType)

# Apply the function to all clusters and combine results
Idents(sobj_spleen5) <- 'CellType'
top_markers <- map_dfr(clusters, get_top_markers, sobj = sobj_spleen5, n = 15)

table(top_markers$cluster)
dim(top_markers) # num clusters * n
head(top_markers)
# also append our favorite cell typing markers

genes_lineage <- c("Cd19", "Ptprc", "Cd8a", "Cd8b1", "Cd68", "Cd163","Itgax", "Itgam", "Cd3e", "Cd3d", "Fn1", "Acta2")

# Compare DotPlots with top_markers limited by only ns celltyping genes, but
# augmented with classic cell typing genes for comparison
# remove any genes where the rowsum is too low unless its a lineage marker, try to keep with lower barriers. 
markers_to_plot <- top_markers %>%
    dplyr::filter ((gene %in% genes_cosMx_celltyping & (pct.1 + pct.2) > 0.1 
                   & p_val_adj < 0.05) | gene %in% genes_lineage)

dim(markers_to_plot) # 72 is somewhat reasonable; w repeats is really 36 unique genes

DotPlot(sobj_spleen5, features = unique(markers_to_plot$gene)) + RotatedAxis() +
  theme_minimal() + # Change to a minimal (white) background
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1), # Reduce font size and rotate x-axis labels
    axis.text.y = element_text(size = 10), # Adjust y-axis font size if needed
    panel.background = element_rect(fill = "white", color = NA), # Force white panel background
    plot.background = element_rect(fill = "white", color = NA)  # Force white overall background
    #panel.grid = element_blank() # Optional: remove grid lines if needed
  ) +
  ggtitle("CellType SemiSup5 DotPlot top Log2FC")

ggsave(paste0(results_dir, "/CellTypes_semisup5_DotPlot.png"), last_plot(), width = 12)


```

### DotPlot

Columns for celltyping to chose from:

"CellType" InSituType semi supervised + 5 new clusters, from AtoMx

"CellType_sup" InSituType supervised with Human -\> Mouse IO cell profile matrix

"seurat_cluster.6" Seurat clustering w resolution 0.6

"CellType_Label6" labeled version of seurat_cluster.6

```{r dotplot1}

# Set Idents
Idents(sobj_spleen5) <- 'CellType'
table(Idents(sobj_spleen5))
clusters <- unique(Idents(sobj_spleen5))

#genes_cosMx_celltyping <- get_nanostring_celltyping_genes(ns_gene_fn)

#cluster = "NK.cell"
#markersNK <- FindMarkers(sobj_spleen5, ident.1 = cluster)
#dim(markersNK)
#markersNK <- markersNK %>%
#  dplyr::top_n(10, wt = abs(avg_log2FC))

# Function to find top n markers for a specific cluster
n <- 15

# Apply the function to all clusters and combine results
top_markers <- map_dfr(clusters, get_top_markers, sobj = sobj_spleen5, n = n)

table(top_markers$cluster)
dim(top_markers) # 150 -> 91. 
head(top_markers)
# also append our favorite cell typing markers

genes_lineage <- c("Cd19", "Ptprc", "Cd8a", "Cd8b1", "Cd68", "Cd163","Itgax", "Itgam", "Cd3e", "Cd3d", "Fn1", "Acta2")

# Compare DotPlots with top_markers limited by only ns celltyping genes, but
# augmented with classic cell typing genes for comparison
# remove any genes where the rowsum is too low unless its a lineage marker, try to keep with lower barriers. 
markers_to_plot <- top_markers %>%
    dplyr::filter ((gene %in% genes_cosMx_celltyping & (pct.1 + pct.2) > 0.1 
                   & p_val_adj < 0.05) | gene %in% genes_lineage)

dim(markers_to_plot) # 72 is somewhat reasonable; w repeats is really 36 unique genes

DotPlot(sobj_spleen5, features = unique(markers_to_plot$gene)) + RotatedAxis() +
  theme_minimal() + # Change to a minimal (white) background
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1), # Reduce font size and rotate x-axis labels
    axis.text.y = element_text(size = 10), # Adjust y-axis font size if needed
    panel.background = element_rect(fill = "white", color = NA), # Force white panel background
    plot.background = element_rect(fill = "white", color = NA)  # Force white overall background
    #panel.grid = element_blank() # Optional: remove grid lines if needed
  ) +
  ggtitle("Supervised InSituType Cell types top Log2FC")

ggsave(paste0(results_dir, "/CellType_sup_DotPlot.png"), last_plot(), width = 12)
```

## SubCluster

These are the labels if Seurat clustering run with resolution 0.5

```{r nameclusters}
# 
# # Add a metadata column for the labels from unsupervised clustering
# # bonus to have T cells and NK cells.
# 
# df_meta <- sobj_spleen5@meta.data
# df_meta <- df_meta %>%
#   mutate(CellType_Label = case_when(
#     seurat_cluster.5 == 0 ~ "NK", # might be NK. 
#     seurat_cluster.5  == 1 ~ "B.cell",
#     seurat_cluster.5  == 2 ~ "Erythroid.Projenitor",
#     seurat_cluster.5 == 3 ~ "Stressed.unknown",
#     seurat_cluster.5  == 4 ~ "T.cell",
#     seurat_cluster.5  == 5 ~ "Unknown.a",
#     seurat_cluster.5 == 6 ~ "Unknown.b",
#     seurat_cluster.5  == 7 ~ "Neutrophil",
#     seurat_cluster.5  == 8 ~ "Macrophage",
#     seurat_cluster.5 == 9 ~ "Dendritic.cell",
#     seurat_cluster.5  == 10 ~ "Plasma",
#     seurat_cluster.5  == 11 ~ "Monocytes",
#     seurat_cluster.5 == 12 ~ "Macrophage",
#     seurat_cluster.5  == 13 ~ "Fibroblast",
#     seurat_cluster.5  == 14 ~ "B.cell",
#     TRUE ~ "other" # Optional: handle unexpected values
#   ))
# 
# sobj_spleen5 <- AddMetaData(sobj_spleen5, metadata = df_meta[c('CellType_Label')])
# 
# 

```

### Waterfall Plot

For interesting Cell Typing genes, show the gene annotations we have

```{r waterfall}

# try out SeuratExtend plots 
length(unique(markers_to_plot$gene))

#library(SeuratExtend)
Idents(sobj_spleen5) <- "CellType_sup"
SeuratExtend::DimPlot2(sobj_spleen5)

Idents(sobj_spleen5) <- "CellType"
SeuratExtend::DimPlot2(sobj_spleen5) + 
  ggtitle ("Semisupervised InsituType")

Idents(sobj_spleen5) <- "seurat_cluster.6"
SeuratExtend::DimPlot2(sobj_spleen5)
```

```{r MarkerAnalysis}

# Calculating z-scores for variable features
genes.zscore <- CalcStats(
  sobj_spleen5,
  features = VariableFeatures(sobj_spleen5),
  group.by = "CellType_sup",
  order = "p",
  n = 4)
  
# Displaying heatmap
SeuratExtend::Heatmap(genes.zscore, lab_fill = "zscore")

```

```{r heat2}

options(spe = "mouse")
sobj_spleen5 <- SeuratExtend::GeneSetAnalysisGO(sobj_spleen5, parent = "immune_system_process", n.min = 5)
matr <- SeuratExtend::RenameGO(sobj_spleen5@misc$AUCell$GO$immune_system_process)
go_zscore <- CalcStats(
  matr,
  f = sobj_spleen5$CellType_sup,
  order = "p",
  n = 3)

SeuratExtend::Heatmap(go_zscore, lab_fill = "zscore")

matr
```

```{r}

Assays(sobj_spleen5)
#DefaultAssay(sobj_spleen5) <- "TF"
WaterfallPlot(
  sobj_spleen5,
  features = markers_to_plot, #  rownames(sobj_spleen5),
  ident.1 = "B.Cells",
  ident.2 = "Monocytes",
  exp.transform = FALSE,
  top.n = 10)



```

### FeaturePlots

```{r MultFeatures}

SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Lmna", feature.2 = "Mki67", feature.3 = "Cd19")


```


```{r subsetagain}
#| echo: false
#| warning: false 

# subset again to pick up CellType Labels 
SeuratExtend::ClusterDistrBar(sobj_spleen5$orig.ident, sobj_spleen5$CellType_Label6,
                              cols = mouseIO_colors[sobj_spleen30$CellType_Label6])

# Re-subset to get metadata
sobj_spleen30 <- subset(sobj_spleen5, subset = Sample.ID == 30 & 
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen31 <- subset(sobj_spleen5, subset = Sample.ID == 31 & 
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen32 <- subset(sobj_spleen5, subset = Sample.ID == 32 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen33 <- subset(sobj_spleen5, subset = Sample.ID == 33 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen34 <- subset(sobj_spleen5, subset = Sample.ID == 34 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen35 <- subset(sobj_spleen5, subset = Sample.ID == 35 & 
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")

SeuratExtend::ClusterDistrBar(sobj_spleen30$orig.ident, 
                              sobj_spleen30$CellType_Label6,
                              cols = mouseIO_colors[sobj_spleen30$CellType_Label6])

SeuratExtend::ClusterDistrBar(sobj_spleen31$orig.ident, 
                              sobj_spleen31$CellType_Label6,
                              cols = mouseIO_colors[sobj_spleen30$CellType_Label6])

SeuratExtend::ClusterDistrBar(sobj_spleen32$orig.ident, 
                              sobj_spleen32$CellType_Label6,
                              cols = mouseIO_colors[sobj_spleen30$CellType_Label6])

SeuratExtend::ClusterDistrBar(sobj_spleen34$orig.ident, 
                              sobj_spleen34$CellType_Label6,
                              cols = mouseIO_colors[sobj_spleen30$CellType_Label6])

SeuratExtend::ClusterDistrBar(sobj_spleen35$orig.ident, 
                              sobj_spleen35$CellType_Label6,
                              cols = mouseIO_colors[sobj_spleen30$CellType_Label6])

```

Requested, separate Umaps by Sample. Then what?

```{r separateUmaps}

run_pca_stuff <- function(sobj) {
  sobj <- FindVariableFeatures(object = sobj) 
  sobj <- ScaleData(sobj)
  sobj <- RunPCA(sobj, verbose = FALSE, npcs = 30)

  sobj <- FindNeighbors(sobj, dims = 1:30)
  sobj <- FindClusters(sobj,  cluster.name='seurat_cluster.6', resolution=0.6, verbose = FALSE)
  sobj <- RunUMAP(sobj, dims = 1:20, spread=5, min_dist = 0.1, n_neighbors=20) # from 0.1, 30

  return(sobj)
}

sobj_spleen30 <- run_pca_stuff(sobj_spleen30)
sobj_spleen31 <- run_pca_stuff(sobj_spleen31)
sobj_spleen32 <- run_pca_stuff(sobj_spleen32)
sobj_spleen33 <- run_pca_stuff(sobj_spleen33)
sobj_spleen34 <- run_pca_stuff(sobj_spleen34)
sobj_spleen35 <- run_pca_stuff(sobj_spleen35)


```


```{r eachumap}

# Unlabeled

DimPlot(sobj_spleen30, reduction = "umap", alpha=0.5, cols='polychrome')
DimPlot(sobj_spleen31, reduction = "umap",  alpha=0.5, cols='polychrome')
DimPlot(sobj_spleen32, reduction = "umap", alpha=0.5, cols='polychrome')
DimPlot(sobj_spleen33, reduction = "umap",  alpha=0.5, cols='polychrome')
DimPlot(sobj_spleen34, reduction = "umap", alpha=0.5, cols='polychrome')
DimPlot(sobj_spleen35, reduction = "umap",alpha=0.5, cols='polychrome')

```
## DotPlots by Sample

```{r dotploteach}

p1 <- my_dot_plot(sobj_spleen30, cluster_col="seurat_clusters", title="Sample30", results_dir, genes_cosMx_celltyping)
p1
p2 <- my_dot_plot(sobj_spleen31, cluster_col="seurat_clusters", title="Sample31", results_dir, genes_cosMx_celltyping)
p2
p3 <- my_dot_plot(sobj_spleen32, cluster_col="seurat_clusters", title="Sample32", results_dir, genes_cosMx_celltyping)
p3
p4 <- my_dot_plot(sobj_spleen33, cluster_col="seurat_clusters", title="Sample33", results_dir, genes_cosMx_celltyping)
p4
p5 <- my_dot_plot(sobj_spleen34, cluster_col="seurat_clusters", title="Sample34", results_dir, genes_cosMx_celltyping)
p5
p6 <- my_dot_plot(sobj_spleen35, cluster_col="seurat_clusters", title="Sample35", results_dir, genes_cosMx_celltyping)
p6


```


```{r eachumap2}

# Project each CellType 
Idents(sobj_spleen30) <- "CellType_sup"
DimPlot(sobj_spleen30, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen31) <- "CellType_sup"
DimPlot(sobj_spleen31, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen32) <- "CellType_sup"
DimPlot(sobj_spleen32, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen33) <- "CellType_sup"
DimPlot(sobj_spleen33, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen34) <- "CellType_sup"
DimPlot(sobj_spleen34, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen35) <- "CellType_sup"
DimPlot(sobj_spleen35, reduction = "umap", alpha=0.5, cols='polychrome')
```

```{r celltypesemisup}
Idents(sobj_spleen30) <- "CellType"
DimPlot(sobj_spleen30, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen31) <- "CellType"
DimPlot(sobj_spleen31, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen32) <- "CellType"
DimPlot(sobj_spleen32, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen33) <- "CellType"
DimPlot(sobj_spleen33, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen34) <- "CellType"
DimPlot(sobj_spleen34, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen35) <- "CellType"
DimPlot(sobj_spleen35, reduction = "umap", alpha=0.5, cols='polychrome')
```

```{r cluster6}
# Project each CellType 
Idents(sobj_spleen30) <- "CellType_Label"
DimPlot(sobj_spleen30, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen31) <- "CellType_Label"
DimPlot(sobj_spleen31, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen32) <- "CellType_Label"
DimPlot(sobj_spleen32, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen32) <- "CellType_Label"
DimPlot(sobj_spleen33, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen33) <- "CellType_Label"
DimPlot(sobj_spleen34, reduction = "umap", alpha=0.5, cols='polychrome')
Idents(sobj_spleen35) <- "CellType_Label"
DimPlot(sobj_spleen35, reduction = "umap", alpha=0.5, cols='polychrome')
```

FindMarkers for the whole spleen clusters first. Then by Sample.

```{r findmarkers}

which_cluster <- "seurat_cluster.6"

Idents(sobj_spleen5) <- which_cluster
table(Idents(sobj_spleen5))
num_clusters <- length(unique(Idents(sobj_spleen5)))
spleen_markers <- FindAllMarkers(sobj_spleen5)
# keep only top <something> for each cluster

spleen_markers <- spleen_markers %>%
      mutate(HighFoldChangeLowPval = ifelse(p_val_adj < 0.05 & abs(avg_log2FC) > 1.0, "Y", "N")) %>%
      mutate(abs_logFC = abs(avg_log2FC))
    
top_markers_list <- list()
for (cluster_num in 0:num_clusters) {
    print(cluster_num)
    spleen_markers_cluster <- spleen_markers %>% 
      filter(cluster == cluster_num) %>%
      filter(HighFoldChangeLowPval == "Y")
    head(spleen_markers_cluster)
    top_markers_list[[cluster_num + 1]] <- spleen_markers_cluster
}
names(top_markers_list) <- 0:num_clusters

```

```{r}
top_markers_list[1]

```

############################ Excel wb of EnrichedGenes by cluster

```{r findmarkers2}

wb <- createWorkbook()

df_list <- list()
for (cluster_num in 0:num_clusters) {
  
  df_list[cluster_num + 1] <- top_markers_list[cluster_num + 1]

}
names(df_list) <- paste("Cluster", 0:num_clusters)

# Write each dataframe to a separate sheet
for (name in names(df_list)) {
  addWorksheet(wb, name)                 # Add a new sheet named after the dataframe
  writeData(wb, sheet = name, df_list[[name]])  # Write the dataframe to the sheet
  # Set freeze panes (e.g., freeze the first row and column)
  freezePane(wb, sheet = name, firstRow = TRUE, firstCol = TRUE)
}

# Save the workbook
saveWorkbook(wb, file = paste0(results_dir, "/SpleenCluster5_DEGs.xlsx"), overwrite = TRUE)


```

```{r UMAPwClusters}

# sobj_spleen5 <- FindNeighbors(sobj_spleen5, dims = 1:30)
# sobj_spleen5 <- FindClusters(sobj_spleen5,  cluster.name='seurat_cluster.4', resolution=0.4, verbose = FALSE)
#sobj <- RunUMAP(sobj, min_dist=0.3, spread=5, dims = 1:20)
sobj_spleen5 <- RunUMAP(sobj_spleen5, dims = 1:20, spread=5, min_dist = 0.1, n_neighbors=40, reduction.name = "umap_cluster5") # from 0.1, 30

Idents(sobj_spleen5) <- "seurat_cluster.5"
DimPlot(sobj_spleen5, reduction = "umap_cluster5", alpha=0.5, cols='polychrome')
```

DotPlot for SeuratClusters

```{r dotplot2}

Idents(sobj_spleen5) <- "seurat_clusters.5"
table(Idents(sobj_spleen5))
clusters <- unique(Idents(sobj_spleen5))

#genes_cosMx_celltyping <- get_nanostring_celltyping_genes(ns_gene_fn)

#cluster = "NK.cell"
#markersNK <- FindMarkers(sobj_spleen5, ident.1 = cluster)
#dim(markersNK)
#markersNK <- markersNK %>%
#  dplyr::top_n(10, wt = abs(avg_log2FC))

# Function to find top n markers for a specific cluster
n <- 15

# Apply the function to all clusters and combine results
top_markers <- map_dfr(clusters, get_top_markers, sobj=sobj)

table(top_markers$cluster)
dim(top_markers) # 150 -> 91. 
head(top_markers)
# also append our favorite cell typing markers

genes_lineage <- c("Cd19", "Ptprc", "Cd8a", "Cd8b1", "Cd68", "Cd163","Itgax", "Itgam", "Cd3e", "Cd3d", "Fn1", "Acta2")

# Compare DotPlots with top_markers limited by only ns celltyping genes, but
# augmented with classic cell typing genes for comparison
# remove any genes where the rowsum is too low unless its a lineage marker, try to keep with lower barriers. 
markers_to_plot <- top_markers %>%
    dplyr::filter ((gene %in% genes_cosMx_celltyping & (pct.1 + pct.2) > 0.1 
                   & p_val_adj < 0.05) | gene %in% genes_lineage)

dim(markers_to_plot) # 72 is somewhat reasonable; w repeats is really 36 unique genes

DotPlot(sobj_spleen5, features = unique(markers_to_plot$gene)) + RotatedAxis() +
  theme_minimal() + # Change to a minimal (white) background
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1), # Reduce font size and rotate x-axis labels
    axis.text.y = element_text(size = 10), # Adjust y-axis font size if needed
    panel.background = element_rect(fill = "white", color = NA), # Force white panel background
    plot.background = element_rect(fill = "white", color = NA)  # Force white overall background
    #panel.grid = element_blank() # Optional: remove grid lines if needed
  ) +
  ggtitle("Supervised InSituType Cell types top Log2FC")

ggsave(paste0(results_dir, "/CellType_sup_DotPlot.png"), last_plot(), width = 12)

```

Feature Plots

```{r}

# Feature Plots
Idents(sobj_spleen_split2) <- "CellType_Integrated"
ImageDimPlot(sobj_spleen_split2, fov="fov30", border.size = 0.1,
             cols = mouseIO_colors,
             axes = TRUE,
             flip_xy = FALSE,
             coord.fixed=TRUE) 

ImageDimPlot(sobj_spleen_split2, fov="fov31", border.size = 0.1,
             cols = mouseIO_colors,
             axes = TRUE,
             flip_xy = FALSE,
             coord.fixed=TRUE) 

ImageDimPlot(sobj_spleen_split2, fov="fov32", border.size = 0.1,
             cols = mouseIO_colors,
             axes = TRUE,
             flip_xy = FALSE,
             coord.fixed=TRUE) 

ImageDimPlot(sobj_spleen_split2, fov="fov34", border.size = 0.1,
             cols = mouseIO_colors,
             axes = TRUE,
             flip_xy = FALSE,
             coord.fixed=TRUE) 
```

```{r feature dim plot}


ImageDimPlot(sobj_spleen5, fov="fov30", molecules=genes_lineage[1:9],
             #split.by='ident',
             #mols.cols='Set2',
                 coord.fixed=TRUE, mols.size=0.1, alpha=0.5) 

```

```{r}

p <- VlnPlot2(sobj_spleen5, features = genes_lineage, violin=F, pt=FALSE, group.by= "CellType_Label", ncol=1)
p
```

```{r}

SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Foxp3", feature.2 = "Cd8a", feature.3 = "Cd4")

# Try to confirm CD4+ 
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Cd4", feature.2 = "Cd28", feature.3 = "Cd68")
```

```{r featureplot3}

# Neutrophils, overlapping Monocytes
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Itgam", feature.2 = "S100a8", feature.3 = "S100a9") 


# Monocytes
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Cd68", feature.2 = "Cd14", feature.3 = "Ccr2") + ggtitle("Monocytes")

#Activated DCs
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Tnf", feature.2 = "Ccl17", feature.3 = "Ccl22") + ggtitle("Activated DCs")

# pDCs
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Itgax", feature.2 = "Gzmb", feature.3 = "Tlr7") + ggtitle ("pDCs")

# Macrophages
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Marco", feature.2 = "Cd68", feature.3 = "Cd163") + ggtitle ("pDCs")

```

```{r}

# CD68+/CD163- could be M1 pro-inflammatory?  No, not colocated 
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Cd68", feature.2 = "Il1b", feature.3 = "Ccr7") + ggtitle ("M1")

# CD68+/CD163- could be Monocytes # No. 
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Cd14", feature.2 = "Cd68", feature.3 = "Ccr2") + ggtitle ("Monocytes")

# CD68+/CD163- could be DCs?
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Itgax", feature.2 = "Cd68", feature.3 = "Cd86") + ggtitle ("DCs")


```

```{r}

ImageDimPlot(sobj_spleen5, fov="fov34", flip_xy=FALSE,
             molecules = c("Itgax", "Irf4"))
```

```{r}

mouseprofiles <- read.csv( "/Users/annmstrange/Documents/git/CosMx-Cell-Profiles/Human/IO/IO.profiles.mouse2.csv", 
                           row.names = 1, 
                           header=TRUE)

#refprofiles <- read.csv("https://raw.githubusercontent.com/Nanostring-Biostats/CosMx-Cell-Profiles/main/Human/IO/IO.profiles.csv", row.names = 1, header = TRUE)
# keep only genes we have in counts matrix
#mouseprofiles <- mouseprofiles[is.element(rownames(mouseprofiles), colnames(counts)), #]
pdf(paste0(results_dir, "/cosMxIO_mouseprofiles2_heatmap.pdf"), height=60, width=6, compress=FALSE)
pheat <- pheatmap::pheatmap(sweep(mouseprofiles, 1, pmax(apply(mouseprofiles, 1, max), 0.2), "/"), 
          fontsize_row = 5,
          col = colorRampPalette(c("white", "darkblue"))(100))

grid::grid.draw(pheat$gtable)
dev.off()




```

Briefer Heatmap

```{r}

class(mouseprofiles)
colnames(mouseprofiles)
mouseprofiles$Gene <- rownames(mouseprofiles)

# Calculate standard deviation and second highest value for each row
mouseprofiles <- mouseprofiles %>%
  rowwise() %>% # Operate on rows
  mutate(
    Standard_Deviation = sd(c_across(B.cell:T.cell.CD8)), # Standard deviation
    Highest_Value = sort(c_across(B.cell:T.cell.CD8), decreasing = TRUE)[1],  
    Second_Highest_Value = sort(c_across(B.cell:T.cell.CD8), decreasing = TRUE)[2] # Second highest value
  ) %>%
  ungroup() # Remove rowwise structure

# View the result
head(mouseprofiles)

dim(mouseprofiles)
# filter down to the interesting rows
mouseprofiles2 <- mouseprofiles %>%
   #dplyr::filter(Standard_Deviation > 0.5) 
   dplyr::filter(Highest_Value - Second_Highest_Value > 0.5)

dim(mouseprofiles2)
```

This reduced form of the heatmap focuses on more variable genes that are also unique to a single cell type. (specific).

```{r}

mouseprofiles3 <- as.data.frame(mouseprofiles2[,1:16])
rownames(mouseprofiles3) <- mouseprofiles3$Gene
mouseprofiles3 <- mouseprofiles3[,1:15]

pdf(paste0(results_dir, "/cosMxIO_mouseprofiles_heatmap2.pdf"), height=20, width=6, compress=FALSE)
pheat <- pheatmap::pheatmap(sweep(mouseprofiles3, 1, pmax(apply(mouseprofiles3, 1, max), 0.2), "/"), 
          fontsize_row = 5,
          col = colorRampPalette(c("white", "darkblue"))(100))

grid::grid.draw(pheat$gtable)
dev.off()
```

## Integration

```{r integrationsample}
#remotes::install_github("satijalab/seurat-data", "seurat5", quiet = TRUE)
library(SeuratData)
#devtools::install_github('satijalab/seurat-data')
#library(patchwork)
InstallData("ifnb")

# load dataset
data(ifnb)
ifnb <- UpdateSeuratObject(ifnb)
ifnb
Layers(ifnb)
Assays(ifnb)
DefaultAssay(ifnb)
# split the RNA measurements into two layers one for control cells, one for stimulated cells

ifnb[["RNA"]] <- split(ifnb[["RNA"]], f = ifnb$stim) # already split
# after split, see  4 layers present: counts.CTRL, counts.STIM, data.CTRL, data.STIM
ifnb


# run standard anlaysis workflow
ifnb <- NormalizeData(ifnb)
ifnb <- FindVariableFeatures(ifnb)
ifnb <- ScaleData(ifnb)
ifnb <- RunPCA(ifnb)
ifnb <- FindNeighbors(ifnb, dims = 1:30, reduction = "pca")
ifnb <- FindClusters(ifnb, resolution = 2, cluster.name = "unintegrated_clusters")
ifnb <- RunUMAP(ifnb, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")

```

```{r}

DimPlot(ifnb, reduction = "umap.unintegrated", group.by = c("stim", "seurat_clusters"))

# split is critical
ifnb <- IntegrateLayers(object = ifnb, method = CCAIntegration, orig.reduction = "pca", new.reduction = "integrated.cca",
    verbose = FALSE)

# re-join layers after integration
ifnb[["RNA"]] <- JoinLayers(ifnb[["RNA"]])
ifnb 
ifnb <- FindNeighbors(ifnb, reduction = "integrated.cca", dims = 1:30)
ifnb <- FindClusters(ifnb, resolution = 1)

```



```{r integration1}

sobj_wt <- subset(sobj_spleen5, subset = Sample.ID %in% c("30", "31"))

# run standard anlaysis workflow
sobj_wt <- NormalizeData(sobj_wt)
sobj_wt <- FindVariableFeatures(sobj_wt)
sobj_wt <- ScaleData(sobj_wt)
sobj_wt <- RunPCA(sobj_wt)
sobj_wt <- FindNeighbors(sobj_wt, dims = 1:30, reduction = "pca")
sobj_wt <- FindClusters(sobj_wt, resolution = 2, cluster.name = "unintegrated_clusters")

sobj_wt <- RunUMAP(sobj_wt, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")
DimPlot(sobj_wt, reduction = "umap.unintegrated", group.by = c("Sample.ID", "seurat_clusters"))

```

```{r integration2}

######################
table(sobj_spleen5@meta.data$Genotype)
sobj_wt2 <- subset(sobj_spleen5, subset = Genotype %in% c("Spleen WT", "Spleen Heterozygous"))

# run standard anlaysis workflow
sobj_wt2 <- NormalizeData(sobj_wt2)
sobj_wt2 <- FindVariableFeatures(sobj_wt2)
sobj_wt2 <- ScaleData(sobj_wt2)
sobj_wt2 <- RunPCA(sobj_wt2)
sobj_wt2 <- FindNeighbors(sobj_wt2, dims = 1:30, reduction = "pca")
sobj_wt2 <- FindClusters(sobj_wt2, resolution = 2, cluster.name = "unintegrated_clusters")

sobj_wt2 <- RunUMAP(sobj_wt2, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")
DimPlot(sobj_wt2, reduction = "umap.unintegrated", group.by = c("Genotype", "seurat_clusters"))


```

```{r integration3}

######################
table(sobj_spleen5@meta.data$Genotype)
sobj_wt3 <- subset(sobj_spleen5, subset = Genotype %in% c("Spleen WT", "Spleen Heterozygous", "Spleen Homozygous"))

# run standard anlaysis workflow
sobj_wt3 <- NormalizeData(sobj_wt3)
sobj_wt3 <- FindVariableFeatures(sobj_wt3, nfeatures=1000)
sobj_wt3 <- ScaleData(sobj_wt3)
sobj_wt3 <- RunPCA(sobj_wt3)
sobj_wt3 <- FindNeighbors(sobj_wt3, dims = 1:30, reduction = "pca")
sobj_wt3 <- FindClusters(sobj_wt3, resolution = 2, cluster.name = "unintegrated_clusters")

sobj_wt3 <- RunUMAP(sobj_wt3, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")
DimPlot(sobj_wt3, reduction = "umap.unintegrated", group.by = c("Genotype", "seurat_clusters"))


```

```{r vizneighbors}

# separate objs
sobj_wt <- RunPCA(sobj_wt)
sobj_spleen34 <- RunPCA(sobj_spleen34)
sobj_spleen35 <- RunPCA(sobj_spleen35)

merged <- merge(sobj_wt, y = sobj_spleen34)
merged <- RunPCA(merged)
Idents(merged) <- "seurat_clusters"
merged <- RunUMAP(merged, reduction = "pca", features=NULL, nn.name=NULL, graph="RNA_nn")

DimPlot(merged, group.by = "orig.ident", reduction = "umap") +
  ggtitle("UMAP of Combined Datasets")

# Find neighbors in the reduced PCA space
merged <- FindNeighbors(merged, dims = 1:30, features=VariableFeatures(merged))
merged@neighbors

# Highlight neighbors for a specific cell
DimPlot(merged, reduction = "umap", cells.highlight = neighbors$nn.idx[1,]) +
  ggtitle("Nearest Neighbors of a Cell")

DimPlot(merged, group.by = "orig.ident", reduction = "umap") +
  geom_point(aes(color = ifelse(cell_id %in% neighbors$nn.idx[1,], "Neighbor", "Other")))


# Example for sobj1 and sobj2
neighbors1 <- FindNeighbors(sobj1, dims = 1:30)
neighbors2 <- FindNeighbors(sobj2, dims = 1:30)

# Plot sobj1 and connect it to its neighbors in sobj2
DimPlot(sobj1, reduction = "umap") +
  geom_segment(data = neighbors_df, aes(x = sobj_wt_x, y = sobj_wt_y, xend = sobj_spleen34_x, yend = sobj_spleen34_y), color = "blue")



```

```{r}

anchors <- FindIntegrationAnchors(object.list = list(sobj1, sobj2), dims = 1:30)

# Plot anchors
DimPlot(merged, reduction = "umap") +
  geom_point(data = anchors, aes(x = umap_1, y = umap_2), color = "red")

FeatureScatter(sobj1, feature1 = "GeneA", feature2 = "GeneB", group.by = "orig.ident")



```

##Integration 
###Integration v34 DN use
```{r integration3b}

# Viz Neighbors 

# sobj_spleen_split1 <- subset(sobj_spleen5, subset = Sample.ID != 35)
# 
# # critical
# #split object by WT and Hetero vs sample 34 only
# # Add a new column 'Split' based on 'Sample.ID'
# sobj_spleen_split1@meta.data$Split <- ifelse(sobj_spleen_split1@meta.data$Sample.ID %in% c(30, 31, 32, 33), "Split1",
#                                         ifelse(sobj_spleen_split1@meta.data$Sample.ID == 34, "Split2", NA))
# table(sobj_spleen_split1@meta.data$Split)
# sobj_spleen_split1
# # why do I have counts.2, data.2? 
# 
# # This splits the object into layers including counts.2.Split2, counts.2.Split1, same for data
# sobj_spleen_split1[["RNA"]] <- split(sobj_spleen_split1[["RNA"]], f = sobj_spleen_split1$Split) 
# sobj_spleen_split1
# 
# # run standard anlaysis workflow
# sobj_spleen_split1 <- NormalizeData(sobj_spleen_split1)
# sobj_spleen_split1 <- FindVariableFeatures(sobj_spleen_split1)
# sobj_spleen_split1 <- ScaleData(sobj_spleen_split1)
# sobj_spleen_split1 <- RunPCA(sobj_spleen_split1)
# sobj_spleen_split1 <- FindNeighbors(sobj_spleen_split1, dims = 1:30, reduction = "pca")
# sobj_spleen_split1 <- FindClusters(sobj_spleen_split1, resolution = 2, cluster.name = "unintegrated_clusters")
# sobj_spleen_split1 <- RunUMAP(sobj_spleen_split1, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")
# 
# 
# table(sobj_spleen_split1@meta.data$Sample.ID)
# table(sobj_spleen_split1@meta.data$CellType_Label6)
# Idents(sobj_spleen_split1) <- "CellType_Label6"
# 
# # Integration
# Idents(sobj_spleen_split1) <- "Split"
# sobj_spleen_split1 <- IntegrateLayers(object = sobj_spleen_split1, method = CCAIntegration, orig.reduction = "pca", new.reduction = "integrated.cca",
#     verbose = TRUE)
# 
# # features <- rownames(sobj_spleen_split1[["RNA"]])
# # length(features)  # Count the number of features
# # head(features)    # Check the first few feature names
# 
# 
# # re-join layers after integration
# sobj_spleen_split1[["RNA"]] <- JoinLayers(sobj_spleen_split1[["RNA"]])
# 
# sobj_spleen_split1 <- FindNeighbors(sobj_spleen_split1, reduction = "integrated.cca", dims = 1:30)
# sobj_spleen_split1 <- FindClusters(sobj_spleen_split1, resolution = 1)
# sobj_spleen_split1 <- RunUMAP(sobj_spleen_split1, dims = 1:30, reduction = "integrated.cca")
# # Visualization
# DimPlot(sobj_spleen_split1, reduction = "umap", group.by = c("Split", "CellType_Label6"))
# 
# DimPlot(sobj_spleen_split1, reduction = "umap", group.by = c("Sample.ID"))
# DimPlot(sobj_spleen_split1, reduction = "umap", group.by = c("CellType_Label6"))

```

```{r integration2}
# 
# table(sobj_spleen_split1@meta.data$seurat_clusters)
# Idents(sobj_spleen_split1) <- 'seurat_clusters'
# DimPlot(sobj_spleen_split1, reduction = "umap", split.by = "Split")


```

dependency here on install.packages('metap') and BiocManager::install('multtest')
```{r splitcelltyping}

# find Conserved markers across conditions

Idents(sobj_spleen_split1) <- "CellType_Label6"
table(sobj_spleen_split1@meta.data$CellType_Label6)
library(metap)
library(multtest)
bcell.markers <- Seurat::FindConservedMarkers(sobj_spleen_split1, ident.1 = "B.cell", grouping.var = "Split", verbose = FALSE)
head(bcell.markers)

neutrophil.markers <- Seurat::FindConservedMarkers(sobj_spleen_split1, ident.1 = "Neutrophils", grouping.var = "Split", verbose = FALSE)
head(neutrophil.markers)

dc.markers <- Seurat::FindConservedMarkers(sobj_spleen_split1, ident.1 = "Dendritic.cell", grouping.var = "Split", verbose = FALSE)
head(dc.markers)



```
### Integration all

Split by Sample.ID. 


```{r integrationall}

sobj_spleen_split2 <- sobj_spleen5

# SPLIT
#split object by WT and Hetero vs sample 34 only
# Add a new column 'Split' based on 'Sample.ID'
# sobj_spleen_split2@meta.data$Split <- 
#     ifelse(sobj_spleen_split2@meta.data$Sample.ID %in% c(30, 32, 31, 33), "WTHetero",
#       ifelse(sobj_spleen_split2@meta.data$Sample.ID == 34, "Homoz34", 
#            ifelse(sobj_spleen_split2@meta.data$Sample.ID == 35, "Homoz35",NA)))
# table(sobj_spleen_split2@meta.data$Split)
# sobj_spleen_split2
# why do I have counts.2, data.2? 
sobj_spleen_split2@meta.data$Split <- sobj_spleen_split2@meta.data$Sample.ID

# critical
# This splits the object into layers including counts.2.Split2, counts.2.Split1, same for data
sobj_spleen_split2[["RNA"]] <- split(sobj_spleen_split2[["RNA"]], f = sobj_spleen_split2$Sample.ID) 
sobj_spleen_split2


# run standard anlaysis workflow
sobj_spleen_split2 <- NormalizeData(sobj_spleen_split2)
sobj_spleen_split2 <- FindVariableFeatures(sobj_spleen_split2)
sobj_spleen_split2 <- ScaleData(sobj_spleen_split2)
sobj_spleen_split2 <- RunPCA(sobj_spleen_split2)
sobj_spleen_split2 <- FindNeighbors(sobj_spleen_split2, dims = 1:30, reduction = "pca")
sobj_spleen_split2 <- FindClusters(sobj_spleen_split2, resolution = 1.7, cluster.name = "unintegrated_clusters")


table(sobj_spleen_split2@meta.data$Sample.ID)
table(sobj_spleen_split2@meta.data$CellType_Label6)
Idents(sobj_spleen_split2) <- "CellType_Label6"
Idents(sobj_spleen_split2) <- "Split"
sobj_spleen_split2 <- RunUMAP(sobj_spleen_split2, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")

# Integration
sobj_spleen_split2 <- IntegrateLayers(object = sobj_spleen_split2, method = CCAIntegration, orig.reduction = "pca", new.reduction = "integrated.cca",
    verbose = TRUE)

# features <- rownames(sobj_spleen_split1[["RNA"]])
# length(features)  # Count the number of features
# head(features)    # Check the first few feature names


# re-join layers after integration
sobj_spleen_split2[["RNA"]] <- JoinLayers(sobj_spleen_split2[["RNA"]])

sobj_spleen_split2 <- FindNeighbors(sobj_spleen_split2, reduction = "integrated.cca", dims = 1:20)
sobj_spleen_split2 <- FindClusters(sobj_spleen_split2, resolution = 0.8)
sobj_spleen_split2 <- RunUMAP(sobj_spleen_split2, dims = 1:20, reduction = "integrated.cca")
DimPlot(sobj_spleen_split2, reduction = "umap", group.by = c("seurat_clusters"), cols='polychrome')

# Visualization
DimPlot(sobj_spleen_split2, reduction = "umap", group.by = c("Split", "CellType_Label6"))

DimPlot(sobj_spleen_split2, reduction = "umap", group.by = c("Sample.ID"))
DimPlot(sobj_spleen_split2, reduction = "umap", group.by = c("CellType_Label6"), cols='polychrome')


# SAVE here, after Integration AND Seurat clustering steps. 
#saveRDS(sobj_spleen_split2, paste0(saved_rds_dir, "/sobj_spleen_split2_postIntegration_v1.RDS"))

#saveRDS(sobj_spleen_split2, paste0(saved_rds_dir, "/sobj_spleen_split2_postIntegration_121624.RDS"))


```

```{r resumehere}

sobj_spleen_split2 <- readRDS(paste0(saved_rds_dir, "/sobj_spleen_split2_postIntegration_121624.RDS"))

```


```{r integ2b}


table(sobj_spleen_split2@meta.data$seurat_clusters)
Idents(sobj_spleen_split2) <- 'seurat_clusters'
DimPlot(sobj_spleen_split2, reduction = "umap", split.by = "Split", cols='polychrome')

#ggsave(paste0(results_dir, "/Integration_by_Sample_DimPlot.png"), width=12)



```
### Integration Labelling

```{r integrationlabels}

# Add a metadata column for the labels from unsupervised clustering
# bonus to have T cells and NK cells.

df_meta <- sobj_spleen_split2@meta.data
df_meta <- df_meta %>%
  mutate(CellType_Integrated = case_when(
    seurat_clusters == 0 ~ "B.cell",
    seurat_clusters  == 1 ~ "T.cell",
    seurat_clusters  == 2 ~ "B.cell",
    seurat_clusters == 3 ~ "Monocyte", 
    seurat_clusters  == 4 ~ "Fibroblast", 
    seurat_clusters  == 5 ~ "Plasmacytoid.DC", # was c
    seurat_clusters == 6 ~ "other.1", # mostly sample 35 
    seurat_clusters  == 7 ~ "Plasmablast", # Platelets or basophiles
    seurat_clusters  == 8 ~ "Plasmacytoid.DC", # Basophil.like",
    seurat_clusters == 9 ~ "Dendritic.cell",
    seurat_clusters  == 10 ~ "Erythroid.Projenitor",
    seurat_clusters  == 11 ~ "B.cell",
    seurat_clusters == 12 ~ "Neutrophil",
    seurat_clusters  == 13 ~ "Plasma",
    seurat_clusters  == 14 ~ "Granulocyte", # Granulocyte
    seurat_clusters  == 15 ~ "Macrophage",
    seurat_clusters == 16 ~ "other.2",
    seurat_clusters  == 17 ~ "other.2", # "Macrophage" had only 2,
    seurat_clusters  == 18 ~ "other.2", # 2 cells only
    seurat_clusters  == 19 ~ "other.2", # 2 cells only
    TRUE ~ "other" # Optional: handle unexpected values
  ))

table(df_meta$CellType_Integrated)

sobj_spleen_split2 <- AddMetaData(sobj_spleen_split2, metadata = df_meta[c('CellType_Integrated')])
sobj_spleen5 <- AddMetaData(sobj_spleen5, metadata = df_meta[c('CellType_Integrated', 'seurat_clusters', 'Split')])


```

```{r integ_umap}

Idents(sobj_spleen_split2) <- "CellType_Integrated"
DimPlot(sobj_spleen_split2, reduction = "umap", group.by = c("seurat_clusters"), label=TRUE)

cols <- mouseIO_colors[sobj_spleen_split2@meta.data$CellType_Integrated]
# ARe any cell types unlabelled with a color?
unique(sobj_spleen_split2@meta.data$CellType_Integrated[which(is.na(cols))])



# set factor levels to control legend, but missing ones wb NA
Idents(sobj_spleen_split2) <- factor(sobj_spleen_split2@meta.data$CellType_Integrated, levels =
                                       c("B.cell", "Plasma", "T.cell",
                                         "Neutrophil", "Dendritic.cell", "Macrophage", "Monocyte",
                                         "Erythroid.Projenitor", "Granulocyte", "Fibroblast",
                                         "other.1","Plasmablast","Plasmacytoid.DC","other.2","e"))
                                        
DimPlot(sobj_spleen_split2, reduction = "umap", cols=cols, label=FALSE)                                                                            

ggsave(paste0(results_dir, "/Integrated_Umap_Labeled.png"), last_plot(), dpi=300)

```
```{r}

#Idents(sobj_spleen_split2) <- "CellType_Integrated"
DimPlot(sobj_spleen_split2, reduction = "umap", split.by = "Split", cols=cols)
ggsave(paste0(results_dir, "/Integration_by_Sample_DimPlot.png"),  width=20, height=5, dpi=300)

```



```{r label}
 #| echo: false
 #| warning: false

# Assign some labels
# get conserved markers

#library(metap)
#library(multtest)
# find Conserved markers across conditions

Idents(sobj_spleen_split2) <- "CellType_Integrated"
table(sobj_spleen_split2@meta.data$CellType_Integrated)

bcell.markers <- Seurat::FindConservedMarkers(sobj_spleen_split2, ident.1 = "B.cell", grouping.var = "Split", verbose = FALSE)
head(bcell.markers)

neutrophil.markers <- Seurat::FindConservedMarkers(sobj_spleen_split2, ident.1 = "Neutrophil", grouping.var = "Split", verbose = FALSE)
head(neutrophil.markers)

dc.markers <- Seurat::FindConservedMarkers(sobj_spleen_split2, ident.1 = "Dendritic.cell", grouping.var = "Split", verbose = FALSE)
head(dc.markers)

# OR loop through seurat_clusters
cons_markers <- list()
#Idents(sobj_spleen_split2) <- "seurat_clusters"
# careful with +1, remember the label is i-1 now
# 
for (i in 0:10) {
  cons_markers[[i+1]] <- Seurat::FindConservedMarkers(sobj_spleen_split2, ident.1 = i, grouping.var = "Split", verbose = FALSE)
  head(cons_markers[[i+1]])
}

head(cons_markers[[3]])




```

Integration DotPlot

```{r integrationdotplot}
# Set Idents
#Idents(sobj_spleen_split2) <- 'CellType_Integrated' # 'CellType_Integrated'
#Idents(sobj_spleen_split2) <- 'seurat_clusters'
table(Idents(sobj_spleen_split2))
clusters <- unique(Idents(sobj_spleen_split2))

# Function to find top n markers for a specific cluster
# First check for tiny clusters
table(sobj_spleen_split2@meta.data$CellType_Integrated)
n <- 15

# Apply the function to all clusters and combine results
top_markers <- map_dfr(clusters, get_top_markers, sobj = sobj_spleen_split2)

table(top_markers$cluster)
dim(top_markers) # 150 -> 91. 
head(top_markers)
# also append our favorite cell typing markers

genes_lineage <- c("Cd19", "Ptprc", "Cd8a", "Cd8b1", "Cd68", "Cd163","Itgax", "Itgam", "Cd3e", "Cd3d", "Fn1", "Acta2")

# Compare DotPlots with top_markers limited by only ns celltyping genes, but
# augmented with classic cell typing genes for comparison
# remove any genes where the rowsum is too low unless its a lineage marker, try to keep with lower barriers. 
markers_to_plot <- top_markers %>%
    dplyr::filter ((gene %in% genes_cosMx_celltyping & (pct.1 + pct.2) > 0.1 
                   & p_val_adj < 0.05) | gene %in% genes_lineage)

dim(markers_to_plot) # 72 is somewhat reasonable; w repeats is really 36 unique genes

DotPlot(sobj_spleen_split2, features = unique(markers_to_plot$gene)) +  
  RotatedAxis() +
  theme_minimal() + # Change to a minimal (white) background
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1), # Reduce font size and rotate x-axis labels
    axis.text.y = element_text(size = 10), # Adjust y-axis font size if needed
    panel.background = element_rect(fill = "white", color = NA), # Force white panel background
    plot.background = element_rect(fill = "white", color = NA)  # Force white overall background
    #panel.grid = element_blank() # Optional: remove grid lines if needed
  ) +
  ggtitle("Integrated Cell types top Log2FC")

ggsave(paste0(results_dir, "/CellType_Integrated_DotPlot.png"), last_plot(), width = 12)


```

# Featureplots

```{r feature_ea}
# show certain molecules on the umap


# Generate feature plots for the selected features
feature_plots <- lapply(genes_lineage, function(feature) {
  FeaturePlot(sobj_spleen_split2, features = feature)
})

# Combine plots into a grid
CombinePlots(plots = feature_plots, ncol = 3)

FeaturePlot(sobj_spleen_split2, c("Foxp3", "Il2ra"))
FeaturePlot(sobj_spleen_split2, c("Cd4", "Cd8a","Cd8b1", "Foxp3"))
FeaturePlot(sobj_spleen_split2, c("Cd8a", "Cd8b1"))
FeaturePlot(sobj_spleen_split2, c("Nkg7"))
FeaturePlot(sobj_spleen_split2, c("Itgax")) # matches DC region
FeaturePlot(sobj_spleen_split2, c("Itgam")) #, "C1qb", "Itgam"))

FeaturePlot(sobj_spleen_split2, c("Igkc")) # Plasma
FeaturePlot(sobj_spleen_split2, c("Mpo", "Elane", "Prtn3")) # Neutrophil 
FeaturePlot(sobj_spleen_split2, c("Mpo", "Ly6g"))
FeaturePlot(sobj_spleen_split2, c("Cd19"))
FeaturePlot(sobj_spleen_split2, c("Cd3d", "Cd3e","Cd3g"))
FeaturePlot(sobj_spleen_split2, c("C1qb", "C1qb","Selenop","Marco", "Cd68")) # monocyte
FeaturePlot(sobj_spleen_split2, c("Clu", "Thbs1", "Myl9")) # macrophages


FeaturePlot(sobj_spleen_split2, c("Cd14", "Ccr2", "Sell")) # Monocytes markers, but not found in specific regions
FeaturePlot(sobj_spleen_split2, c("Cd163", "Cd68", "Mrc1"))

FeaturePlot(sobj_spleen_split2, c("Hbb"))
FeaturePlot(sobj_spleen_split2, c("Acta2", "Clu", "Tagln"))


```




```{r prettydotplot}

# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
# get labels
names(table(sobj_spleen5@meta.data$CellType_Integrated))

# levels will be sorted in DotPlot bottom to top
Idents(sobj_spleen_split2) <- factor(sobj_spleen_split2@meta.data$CellType_Integrated, levels = c(  "e","other.2","other.1", "Plasmablast","Plasmacytoid.DC", "Granulocyte", "Fibroblast", "Endothelial",  "Erythroid.Projenitor", "Macrophage", "Monocyte",  "Dendritic.cell", "Neutrophil" ,"T.cell" , "T.cell.CD8","Plasma","B.cell" ))
table(Idents(sobj_spleen_split2))

markers_to_plot$gene
markers_to_not_plot <- c("Hba-a1/2", "Hbb", "Ighm", "Ctsw", "Scgb3a1","Igfbp5","Myh11", "Ybx3","Rgs1", "Tshz2", "Tm4sf1", "Fabp4","Igkc", "Igha", "Ighm", "Thbs2","Ctsw")
markers_to_plot2 <- unlist(list(setdiff(markers_to_plot$gene, markers_to_not_plot)))
markers_to_plot2

# sorted 
markers_to_plot3 <- c( "Ighd",  "Cd19","Jchain",   "Ighg1",   "Xbp1", 
                      "Cd3d",    "Nkg7",    "Cd3e",    "Cd8a", "Lcn2",    "Ltf",    "S100a4",  "Itgax",  "C1qb",    "C1qa",    "C1qc",  "Selenop", 
"Thbs1",   "Myl9",    "Hmgb2",  "Ube2c" ,  "Mt1" ,    "Top2a"  ,
  "Acta2" ,  "Clu" ,    "Igfbp3" , "Tagln", "Mpo" ,"Elane",   "Prtn3")

# non-unique values when setting 'row.names' means the Ident levels are off from the metadata col
#DotPlot(sobj_spleen_split2, features = markers_to_plot3, dot.scale = 8) +
#    RotatedAxis()


DotPlot(sobj_spleen_split2, features = markers_to_plot3) +  
  RotatedAxis() +
  theme_minimal() + # Change to a minimal (white) background
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1), # Reduce font size and rotate x-axis labels
    axis.text.y = element_text(size = 10), # Adjust y-axis font size if needed
    panel.background = element_rect(fill = "white", color = NA), # Force white panel background
    plot.background = element_rect(fill = "white", color = NA)  # Force white overall background
    #panel.grid = element_blank() # Optional: remove grid lines if needed
  ) +
  ggtitle("Integrated Cell types top Log2FC")

ggsave(paste0(results_dir, "/CellType_Integrated_DotPlot.png"), last_plot(), width = 8)

```

### Integration w Anchors

```{r}

# panc8 is a merged Seurat object containing 8 separate pancreas datasets
# split the object by dataset
# spleen.list <- SplitObject(sobj_spleen5, split.by = "Sample.ID")
# 
# # perform standard preprocessing on each object
# for (i in 1:length(spleen.list)) {
#   spleen.list[[i]] <- NormalizeData(spleen.list[[i]], verbose = FALSE)
#   spleen.list[[i]] <- FindVariableFeatures(
#     spleen.list[[i]], selection.method = "vst",
#     nfeatures = 200, verbose = FALSE
#   )
# }
# 
# # find anchors
# anchors <- FindIntegrationAnchors(object.list = spleen.list, anchor.features <- genes_cosMx_celltyping)
# 
# # integrate data
# integrated <- IntegrateData(anchorset = anchors)


```

### or

```{r integ35}
# samples <- list(30,31, 32,33, 34, 35)  # Your Seurat objects
# samples <- lapply(samples, function(x) {
#     x <- NormalizeData(x)
#     x <- FindVariableFeatures(x)
#     return(x)
# })
# 
# samples <- lapply(samples, function(x) {
#     x <- ScaleData(x)
#     x <- RunPCA(x)
#     x <- FindNeighbors(x, dims = 1:30)
#     x <- FindClusters(x, resolution = 0.5)
#     return(x)
# })
# 
# # Identify cluster markers
# markers <- FindAllMarkers(sampleX, only.pos = TRUE)
# 
# # Annotate clusters manually based on known markers
# cluster_annotations <- c("Cluster0" = "T cells", "Cluster1" = "B cells", ...)
# sampleX$cell_type <- factor(cluster_annotations[sampleX$seurat_clusters])

# endresult, AddMetaData(samplex, )


```

### CellType 35
```{r}

dim(sobj_spleen35)
df_meta <- sobj_spleen35@meta.data

# Cluster and all that 


p <- my_dot_plot(sobj_spleen5, cluster_col='CellType_Label6', title='Title', results_dir, genes_cosMx_celltyping)
p

AddMetaData(sobj_spleen35, metadata = df_meta@CellType_BySample)

```


### Integration Celltype Aware
```{r intcelltypes}

# samples as list of sobj I assume
# samples <- lapply(samples, function(x) {
#     subset(x, subset = cell_type %in% c("T cells", "B cells", ...))
# })
# 
# # Use cell type-informed variable features for integration:
# features <- SelectIntegrationFeatures(object.list = samples)
# samples <- lapply(samples, function(x) ScaleData(x, features = features))
# samples <- lapply(samples, function(x) RunPCA(x, features = features))
# anchors <- FindIntegrationAnchors(object.list = samples, anchor.features = features)
# integrated <- IntegrateData(anchorset = anchors)
# 
# # proceed
# integrated <- ScaleData(integrated)
# integrated <- RunPCA(integrated)
# integrated <- RunUMAP(integrated, dims = 1:30)
# integrated <- FindNeighbors(integrated, dims = 1:30)
# integrated <- FindClusters(integrated, resolution = 0.5)




```




## InSituType

### Mouse IO Profile

Here we convert the Bruker provided Human IO profile to Mouse with use of the Human to Mouse gene conversion offered in the Gene List xls for the Mouse assay, loaded earlier to df_gene_data.

```{r InSituType}

# Convert Human to Mouse
# load cosMx Cell Profile for Human IO
human_cell_profile <- read.csv( "/Users/annmstrange/Documents/git/CosMx-Cell-Profiles/Human/IO/IO.profiles.csv",
                                 row.names = 1)

head(human_cell_profile)
# inner join on Human_Gene
human_cell_profile$gene <- rownames(human_cell_profile)
new_matrix <- merge(human_cell_profile, df_gene_data, by.x ="gene", by.y= "Human_Gene")
head(new_matrix)
dim(human_cell_profile)
dim(new_matrix)
# Lost 100, which ones?
setdiff(human_cell_profile$gene, new_matrix$gene)
setdiff(df_gene_data$Display_Name, new_matrix$Display_Name)

human_genes <- rownames(human_cell_profile)
human_genes
new_matrix <- new_matrix[,1:17]
rownames(new_matrix) <- new_matrix$Display_Name
new_matrix <- new_matrix[, -1]
mouse_cell_profile <- new_matrix[, -16]
head(mouse_cell_profile)

# optional, save this CellProfile matrix for future use
#write.csv( mouse_cell_profile, "/Users/annmstrange/Documents/git/CosMx-Cell-Profiles#/Human/IO/IO.profiles.mouse2.csv")


```

SemiSupervised InSituType

```{r semisup}



semisup <- run_insitu_type_unsup(sobj_spleen5, negmeans_vec, n_clusts = 4,title_suffix="InSituType4", group.by="Sample.ID", mouse_cell_profile, results_dir, mouseIO_colors)

# redo plot 
  # Plot the results
  df_meta$cell_type <- semisup$clus
  df_meta$CellType_InSitu4 <- semisup$clus
  
  df_meta <- df_meta %>%
    mutate(!!group.by := gsub(" ", "_", .data[[group.by]])) %>%
    select(!!group.by, cell_type)
  
  # df_meta <- df_meta %>%
  #   mutate(Run_Tissue_name = gsub(" ", "_", Run_Tissue_name)) %>%
  #   select(Run_Tissue_name, cell_type)
  # 
  df_celltype <- df_meta %>%
    group_by_at(c(group.by, "cell_type")) %>%
    summarise(count = n(), .groups = 'drop')
  
  p <- plot_celltypes(df_celltype, group.by, title_suffix, colors)



  
```

### ClusterDist

```{r clusterdist}
#| echo: false
#| warning: false

table(semisup$clust)
# Add metadata
sobj_spleen5 <- AddMetaData(sobj_spleen5, metadata = df_meta[c('CellType_InSitu4')])

```

### Flighpath

```{r}

 flightpath <- InSituType::flightpath_layout(logliks = semisup$logliks, 
                                               profiles = semisup$profiles)
  # 
  # # Save the plot as a PNG file
# png(paste0(results_dir, paste0("/InSitu_FlightPath_for_",sanitize_name(title_suffix),".png")), width = 600, height = 600)  # Open the PNG device
  cols <- 
  par(mar = c(0,0,0,0))
  plot(flightpath$cellpos, pch = 16, cex = 0.2, col = mouseIO_colors[semisup$clust])
  text(flightpath$clustpos[, 1], flightpath$clustpos[, 2], rownames(flightpath$clustpos), cex = 0.7)
  # dev.off()


```

```{r}
# heatmap, featureplots, and spatial plots 




```

```{r}
# Violin, Ridge
```

### DotPlot InSituType4

```{r}
# DotPlot

# Function to find top n markers for a specific cluster
clusters <- unique(sobj_spleen5@meta.data$CellType_InSitu4)

# Apply the function to all clusters and combine results
Idents(sobj_spleen5) <- 'CellType_InSitu4'
top_markers <- map_dfr(clusters, get_top_markers, 15)

table(top_markers$cluster)
dim(top_markers) # num clusters * n
head(top_markers)
# also append our favorite cell typing markers

genes_lineage <- c("Cd19", "Ptprc", "Cd8a", "Cd8b1", "Cd68", "Cd163","Itgax", "Itgam", "Cd3e", "Cd3d", "Fn1", "Acta2")

# Compare DotPlots with top_markers limited by only ns celltyping genes, but
# augmented with classic cell typing genes for comparison
# remove any genes where the rowsum is too low unless its a lineage marker, try to keep with lower barriers. 
markers_to_plot <- top_markers %>%
    dplyr::filter ((gene %in% genes_cosMx_celltyping & (pct.1 + pct.2) > 0.1 
                   & p_val_adj < 0.05) | gene %in% genes_lineage)

dim(markers_to_plot) # 72 is somewhat reasonable; w repeats is really 36 unique genes

DotPlot(sobj_spleen5, features = unique(markers_to_plot$gene)) + RotatedAxis() +
  theme_minimal() + # Change to a minimal (white) background
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1), # Reduce font size and rotate x-axis labels
    axis.text.y = element_text(size = 10), # Adjust y-axis font size if needed
    panel.background = element_rect(fill = "white", color = NA), # Force white panel background
    plot.background = element_rect(fill = "white", color = NA)  # Force white overall background
    #panel.grid = element_blank() # Optional: remove grid lines if needed
  ) +
  ggtitle("Seurat InSituType4 top Log2FC")

ggsave(paste0(results_dir, "/Clusters_InSitu4_DotPlot.png"), last_plot(), width = 12)


head(markers_to_plot$gene)
#get annotations
df_celltype_markers <- df_gene_data2 %>%
  filter(Display_Name %in% markers_to_plot$gene)
#write.csv( df_celltype_markers, paste0(results_dir, "/cell_typing_markers.csv"))
```

### Updates

CD4 and CD8 tcells didn't separate well even with InSituType

```{r}
#| echo: false
#| warning: false

# Renames

# Marker updates
# Cells labeled Macrophage with Itgax, change to DC
# 
# Cells labeled CD4+ with high CD8 marker, change to CD8 

# how many cells on 34 have Itgax count > 0 and CellType_InSitu4 == "Macrophage"
# Subset the Seurat object for cells that meet the conditions
# dc_cells <- subset(
#   sobj_spleen5, 
#   subset = CellType_InSitu4 == "Macrophage" & Itgax > 0
# )
# cat("Number of cells matching the criteria:", ncol(dc_cells), "\n")
# update_dc <- dc_cells$cell
# 
# monocyte_cells <- subset(
#   sobj_spleen5,
#   subset = CellType_InSitu4 == "Macrophage" & Itgam > 0 & Cd14 >0)
# cat("Number of cells matching the criteria:", ncol(monocyte_cells), "\n")
# update_monocyte <- monocyte_cells$cell

cd4_cells <- subset(
  sobj_spleen5, 
  subset = CellType_InSitu4 == "T.cell.CD8" & Cd8a == 0 & Cd8b1 == 0 & Cd4 > 0
)
cat("Number of cells matching the CD4 criteria:", ncol(cd4_cells), "\n")
update_cd4 <- cd4_cells$cell

cd8_cells <- subset(
  sobj_spleen5, 
  subset = CellType_InSitu4 == "T.cell.CD4" & (Cd8a > 0) > 0 & Cd4 == 0
)
cat("Number of cells matching the CD8 criteria:", ncol(cd8_cells), "\n")
update_cd8 <- cd8_cells$cell

# Make updates
df_meta <- sobj_spleen5@meta.data[c('CellType_InSitu4', 'cell_id')]
df_meta[update_dc, "CellType_InSitu4"] <- "Dendritic.cell"
df_meta[update_monocyte, "CellType_InSitu4"] <- "Monocyte"
df_meta[update_cd4, "CellType_InSitu4"] <- "T.cell.CD4"
df_meta[update_cd8, "CellType_InSitu4"] <- "T.cell.CD8"
sobj_spleen5 <- AddMetaData(sobj_spleen5, metadata = df_meta[c('CellType_InSitu4')])


# Cluster renames
# Rename the cluster
Idents(sobj_spleen5) <- 'CellType_InSitu4'
new_idents <- sobj_spleen5@meta.data$CellType_InSitu4 # Extract current identities
new_idents[new_idents == "a"] <- "Neutrophil" # Rename 
new_idents[new_idents == "b"] <- "Myofibroblast"
new_idents[new_idents == "c"] <- "Erythroid.projenitor"
new_idents[new_idents == "d"] <- "d" # ?? 
new_idents[new_idents == "Plasmacytoid.dendritic.cell"] <- "pDC"
sobj_spleen5@meta.data$CellType_InSitu4 <- new_idents
#Idents(sobj_spleen5) <- new_idents # Update identities in the Seurat object

table(sobj_spleen5@meta.data$CellType_InSitu4)  


```

```{r}


DimPlot(sobj_spleen5, reduction = "umap", group.by = "CellType_InSitu4", alpha=0.5, cols=mouseIO_colors) + 
  ggtitle("InSituType4")

# highlight one cell type
mouseIO_colors
mouseIO_colors_monocytes <- ifelse(names(mouseIO_colors) == "Monocyte", 
                                   "blue", 
                                   "grey")
names(mouseIO_colors_monocytes) <- names(mouseIO_colors)
mouseIO_colors_monocytes

DimPlot(sobj_spleen5, reduction = "umap", group.by = "CellType_InSitu4", alpha=0.5, cols=mouseIO_colors_monocytes) + 
  ggtitle("InSituType4_monocytes")
```

## FeaturePlots 
```{r}
DimPlot(sobj_spleen_split2, reduction = "umap", group.by = c("CellType_Integrated"), cols=cols, label=TRUE)

```



```{r feature}
# show certain molecules on the umap


# Generate feature plots for the selected features
feature_plots <- lapply(genes_lineage, function(feature) {
  FeaturePlot(sobj_spleen_split2, features = feature)
})

# Combine plots into a grid
CombinePlots(plots = feature_plots, ncol = 3)

FeaturePlot(sobj_spleen_split2, c("Foxp3", "Il2ra"))
FeaturePlot(sobj_spleen_split2, c("Cd4", "Cd8a","Cd8b1", "Foxp3"))
FeaturePlot(sobj_spleen_split2, c("Cd8a", "Cd8b1"))
FeaturePlot(sobj_spleen_split2, c("Nkg7"))
FeaturePlot(sobj_spleen_split2, c("Itgax")) # matches DC region
FeaturePlot(sobj_spleen_split2, c("Itgam")) #, "C1qb", "Itgam"))

FeaturePlot(sobj_spleen_split2, c("Igkc")) # Plasma
FeaturePlot(sobj_spleen_split2, c("Mpo", "Elane", "Prtn3")) # Neutrophil 
FeaturePlot(sobj_spleen_split2, c("Mpo"))
FeaturePlot(sobj_spleen_split2, c("Cd19"))
FeaturePlot(sobj_spleen_split2, c("Cd3d", "Cd3e","Cd3g"))
FeaturePlot(sobj_spleen_split2, c("C1qb", "C1qb","Selenop","Marco", "Cd68"))


FeaturePlot(sobj_spleen_split2, c("Cd14", "Ccr2", "Sell")) # Monocytes markers, but not found in specific regions
FeaturePlot(sobj_spleen_split2, c("Cd163", "Cd68", "Mrc1"))

FeaturePlot(sobj_spleen_split2, c("Ccl5", "Cxcl13"))
ggsave(paste0(results_dir, "/FeaturePlots_ccl5_cxcl13.png"), dpi=300, width=8, height=4)

FeaturePlot(sobj_spleen_split2, c("Acta2", "Clu", "Tagln"))


```

## Spatial Celltype and Features

```{r spatialfeature}
Idents(sobj_spleen5) <- 'CellType_Integrated'
cells <- rownames(sobj_spleen5@meta.data)
ImageDimPlot(sobj_spleen5, fov="fov34", flip_xy=FALSE, 
             border.size = 0.07,
             cols = mouseIO_colors,
             axes = TRUE,
             coord.fixed=TRUE )
            #molecules = c("Itgax", "Irf4" )) # DC markers

             
 ImageDimPlot(sobj_spleen5, fov="fov30", flip_xy=FALSE, 
             border.size = 0.07,
             cols = mouseIO_colors,
             axes = TRUE,
             coord.fixed=TRUE,
            molecules = c("Cd4", "Cd8a" )) # T cellmarkers           
 
  ImageDimPlot(sobj_spleen5, fov="fov32", flip_xy=FALSE, 
             border.size = 0.07,
             cols = mouseIO_colors,
             axes = TRUE,
             coord.fixed=TRUE,
            molecules = c("Cd4", "Cd8a" )) # T cellmarkers   

```

# Pending Cell Typing

Resume here after cell typing is worked out.

```{r}

```

## Calculate gene stats

### Senescence vs Prolif

Make a dataframe of the summary counts by sample (not cell type dependent; just get percent positive)

```{r markeroverlap}
#df_meta <- sobj_spleen_even@meta.data
sobj_spleen30
# count matrix need
df_30 <- get_counts_df(sobj_spleen30)
df_31 <- get_counts_df(sobj_spleen31)
df_32 <- get_counts_df(sobj_spleen32)
df_33 <- get_counts_df(sobj_spleen33)
df_34 <- get_counts_df(sobj_spleen34)
df_35 <- get_counts_df(sobj_spleen35)
dim(df_30)

# Add phenotypes
df_30$cell <- rownames(df_30)
df_31$cell <- rownames(df_31)
df_32$cell <- rownames(df_32)
df_33$cell <- rownames(df_33)
df_34$cell <- rownames(df_34)
df_35$cell <- rownames(df_35)

# expects 'CellType' to exist.
df_30 <- df_30 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                  ifelse (prolif == 1, "prolif",
                    ifelse(sen == 1, "sen", "neither"))))
                    
table(df_30$sen_pt)
df_31 <- df_31 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                  ifelse (prolif == 1, "prolif",
                    ifelse(sen == 1, "sen", "neither"))))

df_32 <- df_32 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                         ifelse (prolif == 1, "prolif",
                                 ifelse(sen == 1, "sen", "neither"))))
table(df_32$sen_pt)

df_33 <- df_33 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                         ifelse (prolif == 1, "prolif",
                                 ifelse(sen == 1, "sen", "neither"))))
table(df_33$sen_pt)

df_34 <- df_34 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                         ifelse (prolif == 1, "prolif",
                                 ifelse(sen == 1, "sen", "neither"))))
table(df_34$sen_pt)
df_35 <- df_35 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                  ifelse (prolif == 1, "prolif",
                    ifelse(sen == 1, "sen", "neither"))))

# add cell type to these, lookup for df_cell_types
df_cell_types <- sobj_spleen_split2@meta.data[c("cell", "Sample.ID", "CellType_Integrated")]
df_cell_types$CellType <- df_cell_types$CellType_Integrated

df_30 <- merge(df_30, df_cell_types, by="cell")
dim(df_30)
table(df_30$CellType)
df_31 <- merge(df_31, df_cell_types, by="cell")
df_32 <- merge(df_32, df_cell_types, by="cell")
df_33 <- merge(df_33, df_cell_types, by="cell")
df_34 <- merge(df_34, df_cell_types, by="cell")
dim(df_31)
df_35 <- merge(df_35, df_cell_types, by="cell")

# celltype breakdown for each
df_30_summary <- df_30 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
df_30_summary$Sample.ID <- 30



df_31_summary <- df_31 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
df_31_summary$Sample.ID <- 31

dim(df_32)
# celltype breakdown for each
df_32_summary <- df_32 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
# pct of the cell type in the PT (e.g. sen or prolif or both or neither)
df_32_summary$Sample.ID <- 32

df_33_summary <- df_33 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
# pct of the cell type in the PT (e.g. sen or prolif or both or neither)
df_33_summary$Sample.ID <- 33



# celltype breakdown for each
df_34_summary <- df_34 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
df_34_summary$Sample.ID <- 34

df_35_summary <- df_35 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
df_35_summary$Sample.ID <- 35

# rbind
df_spleen_sen_summary <- rbind(df_30_summary, df_31_summary, df_32_summary, df_34_summary, df_35_summary)
df_spleen_sen_summary <- df_spleen_sen_summary %>%
  filter(count > 20) %>%
  filter(CellType %in% c( "B.cell", "T.cell", "Macrophage", "Monocyte","Plasma" ,         
                          "Dendritic.cell", "Neutrophil"))

# pie plot for each sample
df_spleen_sen_summary$sen_pt <- factor(df_spleen_sen_summary$sen_pt, levels = c("both", "prolif", "sen", "neither"))
df_spleen_sen_summary$CellType <- factor(df_spleen_sen_summary$CellType)
df_spleen_sen_summary <- df_spleen_sen_summary %>%
  filter(sen_pt != "neither")

levels(df_spleen_sen_summary$CellType)

# Barplot grouped by sample ID and sen_pt
ggplot(df_spleen_sen_summary, aes(x=sen_pt, y=pct_celltype_inPT, fill=CellType)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~Sample.ID) +
  theme_classic() +
  theme( 
        legend.position = "bottom") +
  labs(title = "Spleen Cell Type Breakdown by Senescent/Prolif Phenotypes",
       fill = "CellType",
       y = "percent of CellType",
       x = "Phenotype")
ggsave(paste0(results_dir, "/spleen_sen_pt_celltype_barplot.png"), width = 10, height = 6, dpi=300)

# Filter columns based on the condition
num_cells_both30 <- df_30 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both30

num_cells_prolif30 <- df_30 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif30
num_cells_sensec30 <- df_30 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec30
tot_cells30 <- nrow(df_30)

################
num_cells_both31 <- df_31 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both31
num_cells_prolif31 <- df_31 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif31
num_cells_sensec31 <- df_31 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec31
tot_cells31 <- nrow(df_31)

##########

num_cells_both32 <- df_32 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both32

num_cells_prolif32 <- df_32 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif32
num_cells_sensec32 <- df_32 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec32
tot_cells32 <- nrow(df_32)
###############

num_cells_both33 <- df_33 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both33

num_cells_prolif33 <- df_33 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif33
num_cells_sensec33 <- df_33 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec33
tot_cells30 <- nrow(df_30)

############

num_cells_both34 <- df_34 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both34

num_cells_prolif34 <- df_34 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif34
num_cells_sensec34 <- df_34 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec34
tot_cells34 <- nrow(df_34)
#############
num_cells_both35 <- df_35 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both35

num_cells_prolif35 <- df_35 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif35
num_cells_sensec35 <- df_35 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec35
tot_cells35 <- nrow(df_35)


# need total cell counts by sample

# put in a dataframe 
sample.ids <- c(30,31,32,33,34,35)
both_counts <- c(num_cells_both30, num_cells_both31, num_cells_both32, num_cells_both33,
                 num_cells_both34, num_cells_both35)
prolif_counts <- c(num_cells_prolif30, num_cells_prolif31, num_cells_prolif32, num_cells_prolif33, num_cells_prolif34, num_cells_prolif35)
sene_counts <- c(num_cells_sensec30, num_cells_sensec31, num_cells_sensec32, num_cells_sensec33,  num_cells_sensec34, num_cells_sensec35)
pt_df <- data.frame(sample.id = sample.ids, 
                    both = both_counts, 
                    prolif = prolif_counts, 
                    sene = sene_counts)
print(pt_df)
```

### by FOV

Summarize gene counts by fov to find ratios, to aide in selecting nice spatial examples to zoom

We have overall percent cells positive for a Sample, find representative fovs

```{r genesbyfov}

# already have count matrices df_30 e.g. 

dim(df_30)



# cells positive for each gene breakdown for each fov
# df_30$fov <- sapply(df_30$cell, parse_third_token)
# df_30_fov <- df_30 %>%
#   dplyr::select(c('fov','Cdkn1a','Mki67','Lmna')) %>%
#   group_by(fov) %>%
#   summarize(count = n(), # number of cells
#           Cdkn1a_count = sum(Cdkn1a > 0),
#           Mki67_count = sum(Mki67 > 0),
#           Lmna_count = sum(Lmna > 0), 
#           .groups = "drop") %>%
#   dplyr::filter(count > 0)  %>%
#   mutate(pct_cells_Cdkn1a = (Cdkn1a_count / sum(count)) * 100,
#          pct_cells_Mki67 = (Mki67_count / sum(count)) * 100,
#          pct_cells_Lmna = (Lmna_count / sum(count)) * 100) 

df_30_fov <- get_fov_pcts(df_30, 30)
df_30_sample <- get_sample_pcts(df_30, 30)
df_31_fov <- get_fov_pcts(df_31, 31)
df_31_sample <- get_sample_pcts(df_31, 31)

df_32_fov <- get_fov_pcts(df_32, 32)
df_32_sample <- get_sample_pcts(df_32, 32)
df_33_fov <- get_fov_pcts(df_33, 33)
df_33_sample <- get_sample_pcts(df_33, 33)

df_34_fov <- get_fov_pcts(df_34, 34)
df_34_sample <- get_sample_pcts(df_34, 34)
df_35_fov <- get_fov_pcts(df_35, 35)
df_35_sample <- get_sample_pcts(df_35, 35)

# rbind
df_genes_by_sample <- rbind(df_30_sample, df_31_sample, df_32_sample, df_33_sample, df_34_sample, df_35_sample)
df_fov_by_sample <- rbind(df_30_fov,df_31_fov, df_32_fov, df_33_fov, df_34_fov, df_35_fov)
write.csv(df_genes_by_sample, paste0(results_dir, "/key_genes_by_sample.csv"))
write.csv(df_fov_by_sample, paste0(results_dir, "/key_genes_by_fov.csv"))



df_spleen_sen_summary <- rbind(df_30_summary, df_31_summary, df_32_summary,df_33_summary, df_34_summary,
                               df_35_summary)
df_spleen_sen_summary <- df_spleen_sen_summary %>%
  filter(count > 20) %>%
  filter(CellType %in% c( "B.cell",  "Macrophage", "Monocyte","Plasma" ,         
                          "T.cell" , "Dendritic.cell", "Neutrophil", "Monocyte"))

# pie plot for each sample
df_spleen_sen_summary$sen_pt <- factor(df_spleen_sen_summary$sen_pt, levels = c("both", "prolif", "sen", "neither"))
df_spleen_sen_summary$CellType <- factor(df_spleen_sen_summary$CellType)
df_spleen_sen_summary <- df_spleen_sen_summary %>%
  filter(sen_pt != "neither")

levels(df_spleen_sen_summary$CellType)

# Barplot grouped by sample ID and sen_pt
ggplot(df_spleen_sen_summary, aes(x=sen_pt, y=pct_celltype_inPT, fill=CellType)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~Sample.ID) +
  theme_classic() +
  theme( 
        legend.position = "bottom") +
  labs(title = "Spleen Cell Type Breakdown by Senescent/Prolif Phenotypes",
       fill = "CellType",
       y = "percent of CellType",
       x = "Phenotype")
ggsave(paste0(results_dir, "/spleen_sen_pt_celltype_barplot.png"), width = 10, height = 6, dpi=300)

# # Filter columns based on the condition
# num_cells_both30 <- df_30 %>%
#   filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
#   nrow()
# num_cells_both30
# 
# num_cells_prolif30 <- df_30 %>%
#   filter(Pcna > 0 | Mki67 > 0) %>%
#   nrow()
# num_cells_prolif30
# num_cells_sensec30 <- df_30 %>%
#   filter(Cdkn1a > 0) %>%
#   nrow()
# num_cells_sensec30
# tot_cells30 <- nrow(df_30)
# 
# num_cells_both32 <- df_32 %>%
#   filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
#   nrow()
# num_cells_both32
# 
# num_cells_prolif32 <- df_32 %>%
#   filter(Pcna > 0 | Mki67 > 0) %>%
#   nrow()
# num_cells_prolif32
# num_cells_sensec32 <- df_32 %>%
#   filter(Cdkn1a > 0) %>%
#   nrow()
# num_cells_sensec32
# tot_cells32 <- nrow(df_32)
# 
# num_cells_both34 <- df_34 %>%
#   filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
#   nrow()
# num_cells_both34
# 
# num_cells_prolif34 <- df_34 %>%
#   filter(Pcna > 0 | Mki67 > 0) %>%
#   nrow()
# num_cells_prolif34
# num_cells_sensec34 <- df_34 %>%
#   filter(Cdkn1a > 0) %>%
#   nrow()
# num_cells_sensec34
# tot_cells34 <- nrow(df_34)
# # need total cell counts by sample
# 
# # put in a dataframe 
# sample.ids <- c(30,32,34)
# both_counts <- c(num_cells_both30, num_cells_both32, num_cells_both34)
# prolif_counts <- c(num_cells_prolif30, num_cells_prolif32, num_cells_prolif34)
# sene_counts <- c(num_cells_sensec30, num_cells_sensec32, num_cells_sensec34)
# pt_df <- data.frame(sample.id = sample.ids, 
#                     both = both_counts, 
#                     prolif = prolif_counts, 
#                     sene = sene_counts)
# print(pt_df)
```

## Bootstrap 

```{r bootstrap}

# example for cdkn1a gene, sample 30
df <- df_30 %>%
  dplyr::select(c("Sample.ID", "Cdkn1a"))



# Assuming `df` is your dataframe with columns: percent_of_cells_positive, sample, condition

bootstrap_ci <- function(data, n_bootstrap = 1000, ci = 0.95) {
  boot_means <- replicate(n_bootstrap, {
    sample_counts <- sample(data$Cdkn1a, size=500, replace = TRUE)
    pct_non_zero <- pct_non_zero(sample_counts)
  })
  quantile(pct_non_zero, probs = c((1 - ci) / 2, 1 - (1 - ci) / 2))
}

# Calculate median and CI for each condition
summary_df <- df %>%
  group_by(Sample.ID) %>%
  summarise(
    means = mean(pct_non_zero(Cdkn1a))
    #ci_lower = bootstrap_ci(cur_data(), 500, 0.95)[1],
    #ci_upper = bootstrap_ci(cur_data(), 500, 0.95)[2]
  )

# Plot
ggplot(summary_df, aes(x = condition, y = median)) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
  theme_minimal() +
  labs(
    title = "Median Percent of Cells Positive with CI",
    x = "Condition",
    y = "Percent of Cells Positive"
  )



```


```{r countmatrices}

exp_data <- as.matrix(GetAssayData(sobj_spleen_split2, assay="RNA", layer="counts"))
norm_exp_data <- as.matrix(GetAssayData(sobj_spleen_split2, assay="RNA", layer="data"))
class(exp_data)
dim(exp_data) # 1000 x 191K
# how to subset matrix by gene

# which genes in genes_special not found as rownames in exp_data
genes_special_not_found <- setdiff(genes_special, rownames(exp_data))
print(genes_special_not_found)
genes_special <- genes_special[!genes_special %in% genes_special_not_found]

exp_data2 <- exp_data[genes_special, ]
norm_exp_data2 <- norm_exp_data[genes_special,]
dim(exp_data2) # 94 x 191K

df_meta <- sobj_spleen5@meta.data
# get cell counts per sample
cell_counts_by_sample <- table(df_meta$Sample.ID)
```

## 

Given the special genes list, and the count matrices, and metadata, get percent non-zero and mean pos expression into df_gene_stats.

```{r genestats}
gene <- "Mki67"
# Step 4: Calculate mean and standard deviation per sample for each gene
gene_stats <- lapply(genes_special, function(gene) {
  # Extract expression for the gene
  gene_expression <- exp_data2[gene, ]
  norm_expression <- norm_exp_data2[gene, ]
  # Combine expression with sample information
  gene_df <- data.frame(expression = gene_expression,
                        norm_expression = norm_expression,
                        sample = df_meta$Sample.ID,
                        label = df_meta$Sample.Label,
                        genotype = df_meta$Genotype)
  
  # Calculate mean and standard deviation by sample
  # stats <- aggregate(expression ~ sample, data = gene_df, 
  #                    FUN = function(x) c(mean = mean(x), sd = sd(x)))
  # norm_stats <- aggregate(norm_expression ~ sample, data = gene_df, 
  #                    FUN = function(x) c(mean = mean(x), sd = sd(x)))
  
  # by sample
  stats <- aggregate(expression ~ sample, data = gene_df, 
                     FUN = function(x) c(pct_non_zero = pct_non_zero(x), mean_non_zero = mean_non_zero(x)))
  
  norm_stats <- aggregate(norm_expression ~ sample, data = gene_df, 
                      FUN = function(x) c(pct_non_zero = pct_non_zero(x), mean_non_zero = mean_non_zero(x)))
  
  stats
  norm_stats
  # non_zero_counts <- gene_expression[gene_expression >0]
  # print(length(non_zero_counts))
  # non_zero_counts_norm <- norm_expression[norm_expression >0]
  # print(length(non_zero_counts_norm))  # expected to be the same
  # pct_non_zero <- length(gene_expression[gene_expression >0]) / length(gene_expression) * 100
  # mean_pos_expr <- mean(non_zero_counts)
  # mean_pos_expr_norm <- mean(non_zero_counts_norm)
  
  # Add the number of cells for each sample to the result
  stats$cell_count <- cell_counts_by_sample[stats$sample]
  
  # join stats and norm_stats
  stats <- merge(stats, norm_stats, by="sample")
  #stats <- merge(pct_non_zero, mean_pos_expr, mean_pos_expr_norm, by="sample")
  # Format the result
  # stats <- data.frame(sample = stats$sample,
  #                     mean = sapply(stats$expression, "[", 1),
  #                     sd = sapply(stats$expression, "[", 2))
  stats$gene <- gene
  stats
})
df_gene_stats <- do.call(rbind, gene_stats)
class(df_gene_stats)
df_gene_stats
colnames(df_gene_stats) #<- c("sample", "expression.mean", "expression.sd", "gene"))
df_gene_stats <- df_gene_stats[, c("gene", "sample","cell_count", "expression", "norm_expression")]
head(df_gene_stats)
```

### Agg Stats e.g CD3

Gene Stats Summary, for genes that need aggregating such as Cd3e, Cd3d, Cd3g to CD3.

```{r gene_stat_summary}
# get unique GroupAs from df_gene_data2
grouped_genes <- unique(df_gene_data2$GroupAs) # CD3, CD8, VEGF
grouped_genes <- grouped_genes[!grouped_genes %in% c("", " ")]
grouped_genes
group <- "CD3"

# get stats by GroupAs
gene_stats_grouped <- lapply(grouped_genes, function(group) {
  # Extract expression for the gene
  gene_expression <- colSums(exp_data2[df_gene_data2[df_gene_data2$GroupAs == group, "Display_Name"], ])
  norm_expression <- colSums(norm_exp_data2[df_gene_data2[df_gene_data2$GroupAs == group, "Display_Name"], ])
  # Combine expression with sample information
  # not used
  gene_df <- data.frame(expression = gene_expression,
                        norm_expression = norm_expression,
                        sample = df_meta$Sample.ID,
                        label = df_meta$Sample.Label,
                        genotype = df_meta$Genotype
                        )
  
  # by sample
  stats <- aggregate(expression ~ sample, data = gene_df, 
                     FUN = function(x) c(pct_non_zero = pct_non_zero(x), mean_non_zero = mean_non_zero(x)))
  
  norm_stats <- aggregate(norm_expression ~ sample, data = gene_df, 
                          FUN = function(x) c(pct_non_zero = pct_non_zero(x), mean_non_zero = mean_non_zero(x)))
  
  # join stats and norm_stats
  stats <- merge(stats, norm_stats, by="sample")
  
  # Add the number of cells for each sample to the result
  stats$cell_count <- cell_counts_by_sample[stats$sample]
  stats$gene <- group
  stats
})

gene_stats_grouped <- do.call(rbind, gene_stats_grouped)
class(gene_stats_grouped)
gene_stats_grouped
colnames(gene_stats_grouped) #<- c("sample", "expression.mean", "expression.sd", "gene"))
gene_stats_grouped <- gene_stats_grouped[, c("gene", "sample","cell_count", "expression", "norm_expression")]
head(gene_stats_grouped)

# Now combine the two 
colnames(gene_stats_grouped) #<- c("sample", "expression.mean", "expression.sd", "gene"))
gene_stats_grouped <- gene_stats_grouped[, c("gene", "sample","cell_count", "expression", "norm_expression")]
colnames(df_gene_stats)
df_list <- list(df_gene_stats, gene_stats_grouped)
df_gene_stats2 <- do.call(rbind, df_list)
 

# add gene names from df_gene_data2
df_gene_data_temp <- df_gene_data2[,c("Display_Name", "OfInterest_Reason", "Notes", "GroupAs", "Highlight")]
df_gene_stats3 <- merge(df_gene_stats2, df_gene_data_temp, by.x="gene", by.y="Display_Name")
head(df_gene_stats3)

# also get sample.label from df_sample
df_gene_stats3 <- merge(df_gene_stats3, df_sample[,c("Sample.ID", "Sample.Nm", "Genotype")], by.x="sample", by.y="Sample.ID")
head(df_gene_stats3)


write.csv(df_gene_stats3, paste0(results_dir, "/geneOfInterest_stats_spleen.csv"), row.names = FALSE)


```

Barplots to show relative expression levels by sample, to see which increase/decrease e.g.

```{r barplots}
print("Barplots placeholder")
```

## SpatialFOVs

Crop FOVs using bounding boxes of sample extents for Spatial rendering of multiple molecules per TMA sample. This is an alternate method to subsetting the object by sample number, and may result in trimmer plots.

```{r crop}

Idents(sobj_spleen_split2) <- "CellType_Integrated"
ImageDimPlot(sobj_spleen_split2, fov="Sabaawynewcore091320245", axes=TRUE, flip_xy =FALSE,
             cols=mouseIO_colors)
ggsave(paste0(results_dir, "/Spatial_Spleen_all.png"), last_plot(), dpi=300, width=12)

#######################
# Define fovs, needed for spatial plots of molecules. 
# fov30 
# fov31, etc. 
df_meta <- sobj_spleen_split2@meta.data
bbox_mtx <- get_bbox_of_sample(df_meta, "Sabaawy new core 09/13/2024 5", 30)
bbox_mtx
# BUG: The y and x coords are flipped in the Crop function
cropped.coords <- Crop(sobj_spleen_split2[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
sobj_spleen_split2[["fov30"]] <- cropped.coords
# do we have the right subregion?

DefaultBoundary(sobj_spleen_split2[["fov30"]]) <- "segmentation"
ImageDimPlot(sobj_spleen_split2, fov="fov30", axes=TRUE, flip_xy=FALSE, border.size=0.01, cols=mouseIO_colors)
ggsave(paste0(results_dir, "/Spatial_Spleen_30.png"), last_plot(), dpi=300, width=8)

# fov31
bbox_mtx <- get_bbox_of_sample(df_meta, "Sabaawy new core 09/13/2024 5", 31)
bbox_mtx
cropped.coords <- Crop(sobj_spleen_split2[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
sobj_spleen_split2[["fov31"]] <- cropped.coords
# fov32
bbox_mtx <- get_bbox_of_sample(df_meta, "Sabaawy new core 09/13/2024 5", 32)
bbox_mtx
cropped.coords <- Crop(sobj_spleen_split2[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
#ImageDimPlot(sobj_spleen_split2, fov="fov31", axes=TRUE, flip_xy=FALSE, cols=mouseIO_colors)
#ggsave(paste0(results_dir, "/Spatial_Spleen_31.png"), last_plot(), dpi=300, width=8)

sobj_spleen_split2[["fov32"]] <- cropped.coords
# fov34
bbox_mtx <- get_bbox_of_sample(df_meta, "Sabaawy new core 09/13/2024 5", 34)
bbox_mtx
cropped.coords <- Crop(sobj_spleen_split2[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
DefaultBoundary(sobj_spleen_split2[["fov32"]]) <- "segmentation"
ImageDimPlot(sobj_spleen_split2, fov="fov32", axes=TRUE, flip_xy=FALSE, border.size=0.01, cols=mouseIO_colors)
ggsave(paste0(results_dir, "/Spatial_Spleen_32.png"), last_plot(), dpi=300, width=8)

sobj_spleen_split2[["fov34"]] <- cropped.coords
DefaultBoundary(sobj_spleen_split2[["fov34"]]) <- "segmentation"
ImageDimPlot(sobj_spleen_split2, fov="fov34", axes=TRUE, flip_xy=FALSE, border.size=0.01, cols=mouseIO_colors)
ggsave(paste0(results_dir, "/Spatial_Spleen_34.png"), last_plot(), dpi=300, width=8)

# fov35
bbox_mtx <- get_bbox_of_sample(df_meta, "Sabaawy new core 09/13/2024 5", 35)
bbox_mtx
cropped.coords <- Crop(sobj_spleen_split2[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
sobj_spleen_split2[["fov35"]] <- cropped.coords



DefaultBoundary(sobj_spleen_split2[["fov31"]]) <- "segmentation" # "segmentation" or "centroids" # sets cell segmentation outline
DefaultBoundary(sobj_spleen_split2[["fov32"]]) <- "segmentation" # sets cell segmentation outline
DefaultBoundary(sobj_spleen_split2[["fov34"]]) <- "segmentation" # sets cell segmentation outline
DefaultBoundary(sobj_spleen_split2[["fov35"]]) <- "segmentation"


```
## Plot spatial fov


```{r spatial30}

# for fov or subset, e.g. fov 285, show celltypes and molecules
# fov34
fov_num <- 254

plot_fov_w_markers <- function(sobj, fov, mols, mol.colors, title) {
    
  # 
  df_meta <- sobj@meta.data
  bbox_mtx <- get_bbox_of_fov(df_meta, "Sabaawy new core 09/13/2024 5", fov_num)
  bbox_mtx
  
  cropped.coords <- Crop(sobj[["Sabaawynewcore091320245"]], 
                         y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
  fov_name <- paste0("fov", fov_num)
  sobj_spleen_split2[[fov_name]] <- cropped.coords
  DefaultBoundary(sobj[[fov_name]]) <- "segmentation" 
  
  # Workaround: sobj_spleen_split2 is having issues plotting molecules, "coordinate system" error. 
  # However, sobj_spleen (pre Integration) has cell types loaded. 
  Idents(sobj) <- "CellType_Integrated"
  table(Idents(sobj))
  p <- ImageDimPlot(sobj, fov=fov_name, axes=TRUE, 
               molecules= mols, 
               mols.cols = mol.colors,
               mols.size = 0.3,
               alpha = 1,
               border.size = 0.1,
               coord.fixed=TRUE,
               flip_xy = FALSE, 
               cols=mouseIO_colors) +
    ggtitle(title)
  p  
  ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_", title,".png"), p, dpi=600, height=8)
  
  return(p)
}

p <- plot_fov_w_markers(sobj_spleen_split2, 258, c("Cdkn1a","Lmna", "Mki67"), c("blue", "red", "magenta"), "34Hom_Sene")
p <- plot_fov_w_markers(sobj_spleen_split2, 258, c("Cdkn1a"), c("blue"), "34Hom_Cdkn1a")
p <- plot_fov_w_markers(sobj_spleen_split2, 258, c("Lmna"), c("red"), "34Hom_Lmna")
p <- plot_fov_w_markers(sobj_spleen_split2, 258, c("Mki67"), c("magenta"), "34Hom_Mki67")


```



### Zoom
Note: an fov is 510 um x 510 um and 4225 pixels x 4225 pixels.
Therefore, a 50 um scale bar should be about 400 pixels across.  If zoom is 1000 px ^2, 
plan for a scale bar 4/10 of the width = 50 um
```{r zoom254}
# square 1000 x 1000 from min (x,y)
fov_num <- 254

### SET THESE based of FOV plot above 
# fov254 (sample 34) to get both: x_min: 24500 y_min: 62500 (used)
# fov285 (sample 30) x_min: 92900 y_min: 57100
x_min <- 24500
y_min <- 62500


plot_zoom <- function(sobj, fov, x, y, mols, mol.colors, title) {

  size <- 1000
  x_max <- x_min + size
  y_max <- y_min + size
  print(paste(y_min, y_max, x_min, x_max))
  
  #sobj_fov <- subset(sobj, subset = Sample.ID %in% sample_ids )
  # Create a 2x2 matrix
  bbox_mtx <- matrix(c(y_min, y_max, x_min, x_max), nrow = 2, byrow = TRUE,
                         dimnames = list(c("y", "x"), c("min", "max")))
  
  #bbox_mtx <- get_bbox_from_corner(df_meta, "Sabaawy new core 09/13/2024 5", fov_num)
  bbox_mtx
  cropped.coords <- Crop(sobj[["Sabaawynewcore091320245"]], 
                         y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
  zoom_name <- paste0("zoom", fov_num)
  sobj[[zoom_name]] <- cropped.coords
  DefaultBoundary(sobj[[zoom_name]]) <- "segmentation" 
  
  # ccl5 
  #molcols = c("#f781bf") # Ccl5
  # Define the desired x range per inch
  x_range_per_inch <- 200  # Example: 200 x units per inch
  # Calculate aspect ratio based on plot dimensions
  # Suppose we know the plot width in inches (e.g., 6 inches)
  plot_width_in_inches <- 6
  total_x_range <- 1000  # The full x range in the data
  aspect_ratio <- (total_x_range / plot_width_in_inches) / x_range_per_inch
  
  p <- ImageDimPlot(sobj, fov=zoom_name, axes=TRUE, 
               molecules= mols, 
               mols.cols = mol.colors,
               mols.size = 1.0,
               flip_xy = FALSE,
               alpha=1.0,
               crop = FALSE,
               coord.fixed=TRUE,
               cols=mouseIO_colors ) +
    #coord_fixed(ratio = 1) +
    #theme(aspect.ratio = aspect_ratio) +
    scale_x_continuous(limits = c(y_min, y_max)) +
    scale_y_continuous(limits = c(x_min, x_max)) +
    ggtitle("Sample 34 Hom") 
    
  ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_", title, "_zoom.png"), last_plot(), dpi=300, height=8)
  
  return(p)
  
}


p <- plot_zoom(sobj_spleen_split2, fov_num, x_min, y_min, mols = c("Cdkn1a"), mol.colors=c("blue"), title="Sample30_P21" )

```

```{r spatialWT}

# for fov or subset, e.g. fov 285, show celltypes and molecules
# fov34
fov_num <- 285
# 
df_meta <- sobj_spleen_split2@meta.data
bbox_mtx <- get_bbox_of_fov(df_meta, "Sabaawy new core 09/13/2024 5", fov_num)
bbox_mtx

cropped.coords <- Crop(sobj_spleen_split2[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
fov_name <- paste0("fov", fov_num)
sobj_spleen_split2[["fov285"]] <- cropped.coords
DefaultBoundary(sobj_spleen_split2[[fov_name]]) <- "segmentation" 

# Workaround: sobj_spleen_split2 is having issues plotting molecules, "coordinate system" error. 
# However, sobj_spleen (pre Integration) has cell types loaded. 
Idents(sobj_spleen_split2) <- "CellType_Integrated"
table(Idents(sobj_spleen_split2))
p <- ImageDimPlot(sobj_spleen_split2, fov=fov_name, axes=TRUE, 
             molecules= c("Ccl5", "Cxcl13"), 
             mols.cols = c("cyan", "blue"),
             mols.size = 0.3,
             alpha = 1,
             border.size = 0.1,
             coord.fixed=TRUE,
             flip_xy = FALSE, 
             cols=mouseIO_colors) +
  ggtitle("Sample 30 WT")
p  
ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_Sample30_fov285.png"), p, dpi=300, height=8)

```


```{r zoom285}
# square 1000 x 1000 from min (x,y)
fov_num <- 285

### SET THESE based of FOV plot above 
# fov254 (sample 34) to get both: x_min: 24500 y_min: 62500 (used)
# fov285 (sample 30) x_min: 92900 y_min: 57500
x_min <- 92900
y_min <- 57500
  size <- 1000
  x_max <- x_min + size
  y_max <- y_min + size
  print(paste(y_min, y_max, x_min, x_max))
  
  #sobj_fov <- subset(sobj, subset = Sample.ID %in% sample_ids )
  # Create a 2x2 matrix
  bbox_mtx <- matrix(c(y_min, y_max, x_min, x_max), nrow = 2, byrow = TRUE,
                         dimnames = list(c("y", "x"), c("min", "max")))

#bbox_mtx <- get_bbox_from_corner(df_meta, "Sabaawy new core 09/13/2024 5", fov_num)
bbox_mtx
cropped.coords <- Crop(sobj_spleen_split2[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
zoom_name <- paste0("zoom", fov_num)
sobj_spleen_split2[[zoom_name]] <- cropped.coords
DefaultBoundary(sobj_spleen_split2[[zoom_name]]) <- "segmentation" 

# ccl5 
#molcols = c("#f781bf") # Ccl5
# Define the desired x range per inch
x_range_per_inch <- 200  # Example: 200 x units per inch
# Calculate aspect ratio based on plot dimensions
# Suppose we know the plot width in inches (e.g., 6 inches)
plot_width_in_inches <- 6
total_x_range <- 1000  # The full x range in the data
aspect_ratio <- (total_x_range / plot_width_in_inches) / x_range_per_inch


p285 <- ImageDimPlot(sobj_spleen_split2, fov=zoom_name, axes=TRUE, 
             molecules= c("Ccl5", "Cxcl13"), 
             mols.cols = c("cyan", "blue"),
             mols.size = 1.0,
             flip_xy = FALSE,
             alpha=1.0,
             crop = FALSE,
             coord.fixed=TRUE,
             cols=mouseIO_colors ) +
  #coord_fixed(ratio = 1) +
    #theme(aspect.ratio = aspect_ratio) +
  scale_x_continuous(limits = c(y_min, y_max)) +
  scale_y_continuous(limits = c(x_min, x_max)) +
  
  ggtitle("Sample 30 WT")

p285

ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_Sample30_Ccl5_Cxcl13_zoom.png"), last_plot(), dpi=300, height=8)

```

```{r}

library(patchwork)
p285 + p254

ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_TwoSamples_Ccl5_Cxcl13_zoom.png"), last_plot(), dpi=300, height=6, width=16)


```

```{r}

# for fov or subset, e.g. fov 285, show celltypes and molecules
# fov34
fov_num <- 268
# 
df_meta <- sobj_spleen_split2@meta.data
bbox_mtx <- get_bbox_of_fov(df_meta, "Sabaawy new core 09/13/2024 5", fov_num)
bbox_mtx

cropped.coords <- Crop(sobj_spleen_split2[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
fov_name <- paste0("fov", fov_num)
sobj_spleen_split2[["fov268"]] <- cropped.coords
DefaultBoundary(sobj_spleen_split2[[fov_name]]) <- "segmentation" 

# Workaround: sobj_spleen_split2 is having issues plotting molecules, "coordinate system" error. 
# However, sobj_spleen (pre Integration) has cell types loaded. 
Idents(sobj_spleen_split2) <- "CellType_Integrated"
table(Idents(sobj_spleen_split2))
p <- ImageDimPlot(sobj_spleen_split2, fov=fov_name, axes=TRUE, 
             molecules= c("Cdkn1a", "Lmna", "Mki67"), 
             mols.cols = c("lightblue", "red", "pink"),
             mols.size = 1,
             alpha = 1,
             border.size = 0.1,
             coord.fixed=TRUE,
             flip_xy = FALSE, 
             cols=mouseIO_colors) +
  ggtitle("Sample 32 Het")
p  

ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_Samp32_Sene_fov268.png"), p, dpi=300, height=8)

```


```{r}
Idents(sobj_spleen5) <- "seurat_cluster.5"
DefaultBoundary(sobj_spleen5[["fov30"]]) <- "segmentation" 
ImageDimPlot(sobj_spleen5, fov="fov30", axes=TRUE, flip_xy=FALSE, molecules= "Mki67", dark.background = TRUE)

# smaller region


```

## CellType-Marker Counts

Downstream of Celltyping, write raw data for CellType, marker combinations by fov

Leveraging our sample dataframe(s) of cell/gene matrices, re-aggregate for Dendritic.cell (celltype from Supervised InSituType) and gene: Cxcl13. and Neutrophil celltype with Ccl5.

```{r celltype2 }
#| echo: false

# Summarize the counts matrix by fov by cell type
head(df_30)

# extract fov from cell id
#df_30$fov <- sapply(df_30$cell, parse_third_token)
# add cell types 
#head(df_cell_types)
#df_ct30 <- merge(df_30, df_cell_types, by="cell")

cell_type <- 'Neutrophil'
marker_name <- 'Ccl5'
sample_id <- 32
#df_ct <- df_ct32


df_30$fov <- sapply(df_30$cell, parse_third_token)
#df_ct30 <- merge(df_30, df_cell_types, by="cell")
colnames(df_ct30)[1000:1020]
df_30_ct_neut <- get_pct_fov_celltype(df_30, 30, 'Neutrophil', 'Ccl5')
df_30_ct_dc <- get_pct_fov_celltype(df_30, 30, 'Dendritic.cell', 'Cxcl13')
df_30_ct_neut
df_30_ct_dc

df_30_ct_test <- get_pct_fov_celltype(df_30, 30, 'Dendritic.cell', 'Ccl5')
df_30_ct_test

# Repeat for each Sample ID
# merge first
df_31$fov <- sapply(df_31$cell, parse_third_token)
#df_ct31 <- merge(df_31, df_cell_types, by="cell")

df_31_ct_neut <- get_pct_fov_celltype(df_31, 31, 'Neutrophil', 'Ccl5')
df_31_ct_dc <- get_pct_fov_celltype(df_31, 31, 'Dendritic.cell', 'Cxcl13')

df_32$fov <- sapply(df_32$cell, parse_third_token)
#df_ct32 <- merge(df_32, df_cell_types, by="cell")
df_32_ct_neut <- get_pct_fov_celltype(df_32, 32, 'Neutrophil', 'Ccl5')
df_32_ct_dc <- get_pct_fov_celltype(df_32, 32, 'Dendritic.cell', 'Cxcl13')

df_33$fov <- sapply(df_33$cell, parse_third_token)
#df_ct32 <- merge(df_32, df_cell_types, by="cell")
df_33_ct_neut <- get_pct_fov_celltype(df_33, 33, 'Neutrophil', 'Ccl5')
df_33_ct_dc <- get_pct_fov_celltype(df_33, 33, 'Dendritic.cell', 'Cxcl13')

df_34$fov <- sapply(df_34$cell, parse_third_token)
#df_ct34 <- merge(df_34, df_cell_types, by="cell")
df_34_ct_neut <- get_pct_fov_celltype(df_34, 34, 'Neutrophil', 'Ccl5')
df_34_ct_dc <- get_pct_fov_celltype(df_34, 34, 'Dendritic.cell', 'Cxcl13')

df_35$fov <- sapply(df_35$cell, parse_third_token)
#df_ct35 <- merge(df_35, df_cell_types, by="cell")
df_35_ct_neut <- get_pct_fov_celltype(df_35, 35, 'Neutrophil', 'Ccl5')
df_35_ct_dc <- get_pct_fov_celltype(df_35, 35, 'Dendritic.cell', 'Cxcl13')
df_35_ct_neut
df_35_ct_dc

```

Compile the Sample stats on our gene and celltype of interest. Dendritic.cell with Cxcl13 and Neutrophils with Ccl5

```{r mergethis}
#| echo: false
#| message: false
#| warning: false
df_genes_by_dc_by_fov <- rbind(df_30_ct_dc, df_31_ct_dc, df_32_ct_dc, df_33_ct_dc, df_34_ct_dc, df_35_ct_dc)
df_genes_by_neut_by_fov <- rbind(df_30_ct_neut, df_31_ct_neut, df_32_ct_neut, df_33_ct_neut, df_34_ct_neut, df_35_ct_neut)

write.csv(df_genes_by_dc_by_fov, paste0(results_dir, "/cxcl13_dcs_byfov.csv"))
write.csv(df_genes_by_neut_by_fov, paste0(results_dir, "/ccl5_neut_byfov.csv"))

```

## CellType Percents 
Overall Sample Summaries for DCs (Cxcl13) and Neutrophils (Ccl5)

```{r DC_Neut_Summary}
#| echo: false

df_ct30_sample_dc <- get_sample_pcts_bycelltype(df_30, 30, celltype='Dendritic.cell', marker='Cxcl13')
df_ct31_sample_dc <- get_sample_pcts_bycelltype(df_31, 31, celltype='Dendritic.cell', marker='Cxcl13')
df_ct32_sample_dc <- get_sample_pcts_bycelltype(df_32, 32, celltype='Dendritic.cell', marker='Cxcl13')
df_ct33_sample_dc <- get_sample_pcts_bycelltype(df_33, 33, celltype='Dendritic.cell', marker='Cxcl13')
df_ct34_sample_dc <- get_sample_pcts_bycelltype(df_34, 34, celltype='Dendritic.cell', marker='Cxcl13')
df_ct35_sample_dc <- get_sample_pcts_bycelltype(df_35, 35, celltype='Dendritic.cell', marker='Cxcl13')

df_ct30_sample_neut <- get_sample_pcts_bycelltype(df_30, 30, celltype='Neutrophil', marker='Ccl5')
df_ct31_sample_neut <- get_sample_pcts_bycelltype(df_31, 31, celltype='Neutrophil', marker='Ccl5')
df_ct32_sample_neut <- get_sample_pcts_bycelltype(df_32, 32, celltype='Neutrophil', marker='Ccl5')
df_ct33_sample_neut <- get_sample_pcts_bycelltype(df_33, 33, celltype='Neutrophil', marker='Ccl5')
df_ct34_sample_neut <- get_sample_pcts_bycelltype(df_34, 34, celltype='Neutrophil', marker='Ccl5')
df_ct35_sample_neut <- get_sample_pcts_bycelltype(df_35, 35, celltype='Neutrophil', marker='Ccl5')


# rbind
df_dc_by_sample <- rbind(df_ct30_sample_dc, df_ct31_sample_dc, df_ct32_sample_dc, df_ct33_sample_dc, df_ct34_sample_dc, df_ct35_sample_dc)
df_neut_by_sample <- rbind(df_ct30_sample_neut,df_ct31_sample_neut,df_ct32_sample_neut,df_ct33_sample_neut, df_ct34_sample_neut,df_ct35_sample_neut)

write.csv(df_dc_by_sample, paste0(results_dir, "/Dendritic_by_sample.csv"))
write.csv(df_neut_by_sample, paste0(results_dir, "/Neutrophils_by_sample.csv"))

```

```{r statsbyfov}


# extract fov from cell id
#df_30$fov <- sapply(df_30$cell, parse_third_token)
# add cell types 
#head(df_cell_types)
#df_ct30 <- merge(df_30, df_cell_types, by="cell")

marker_name <- 'Ccl5'
marker_names <- c('Chek1', 'Stmn1', 'Pten', 'Ccl5', 'Cxcl13', 'Gzmb', 'Cdkn1a', 'Lmna','Mki67')
sample_ids <- c(30,31,32,33,34,35)
#df_ct <- df_ct32

# build df

df_matrices <- rbind(df_30, df_31,df_32, df_33, df_34, df_35)
result_df <- data.frame()

for (marker_name in marker_names) {
  #print(marker_name)
  for (sample_id in sample_ids) {
    #print(sample_id)
    df_temp <- get_pct_fov(df_matrices, sample_id, marker_name)
    result_df <- rbind(result_df, df_temp)
  }
}
    
print(dim(result_df))
# df_temp
# df_temp <- get_pct_fov(df_30, 30, "Chek1")

write.csv(result_df, paste0(results_dir, "/SenescenceGenes_byfov.csv"))

```
```{r getcounts}
#| echo: false
#| warning: false

# Total number of FOVs for each of WT (30, 31, duplicate), Het (32, 33, duplicate), and Hom (34, 35, duplicate). From my counts, 24 WT, 32 het, and 20 FOVs for Hom.
# Total number of cells for each WT, Het, Hom.
# Total number of transcripts for each.
#  
# The following are optional but would be nice if we have the data:
# Average single cell size for each. In the Hom images cells look bigger (relevant for senescence), but wonder if Atomix give any size data?
# Total negative transcripts.
# Total false codes.

df_meta <- sobj_spleen_split2@meta.data
dim(df_meta)

counts_matrix <- as.matrix(GetAssayData(sobj_spleen_split2, assay="RNA", layer="counts"))
dim(counts)
counts[1:10,1:10]

neg_counts_matrix <- as.matrix(GetAssayData(sobj_spleen_split2, assay="RNA", layer="counts"))

df_counts <- get_counts_byfov(df_meta, counts_matrix, df_rna_lookup, "Endogenous")
df_sys_counts <- get_counts_byfov(df_meta, counts_matrix, df_rna_lookup, "SystemControl")
df_neg_counts <- get_counts_byfov(df_meta, counts_matrix, df_rna_lookup, "Negative")

sum(df_counts$num_probes)
sum(df_sys_counts$num_probes)
sum(df_neg_counts$num_probes)
print("Total neg probes", sum(df_neg_counts$num_probes))

write.csv(df_counts, paste0(results_dir, "/CellCounts_byfov.csv"))



```



```{r countmatrix}

counts <- as.matrix(GetAssayData(sobj_spleen_split2, assay="RNA", layer="counts"))
data <- as.matrix(GetAssayData(sobj_spleen_split2, assay="RNA", layer="data"))
write.csv(as.matrix(counts), file = paste0(saved_rds_dir, "/count_matrix.csv"))
write.csv(as.matrix(counts), file = paste0(saved_rds_dir, "/norm_count_matrix.csv"))

```

