---
title: "mouse_spleen_RNA"
author: "Ann Strange"
date: "12/4/2024"
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: true
---

## Mouse Spleen CosMx Analysis

Script name: mouse_spleen_RNA

Purpose of script: load the Seurat data object produced by the AtoMx pipeline, 
generate plots, evaluate rna quality controls. summarize and display what has 
already been done in AtoMx 1

1. Seurat LoadNanostring() method to load Seurat from flatfiles 

2\. Load Sample metadata per cell:

2a. Subtract negative control probes
2b. Apply Quality Control filters. 
2c. Normalization method: Seurat LogNormalize
2d. FOV and Sample.ID metadata assignments. 
2e. Subset to slide labelled "Sabaawy new core 09/13/2024 5" and only spleen samples

3. Optimize PCA, Umap, assess clusters
4. Data Exploratory Analysis, FeaturePlots 
5. Integration, since Homozygous samples 
6. Apply Cell Typing to the Seurat object with clustering and manual annotation
with use of FindMarkers and DotPlot

7. plots and visualizations, zoomed in to representative regions
8. Export various metrics, e.g. percent of cells positive by marker


Author: Ann Strange Date Created: 2024-10-14
  Last Modified 2025-01-04

**Email: ann.strange\@cuanschutz.edu**

## Setup

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r include=FALSE}
knitr::opts_chunk$set(echo=FALSE)
knitr::opts_knit$set(root.dir = "/Volumes/T9/Mouse_Spleen_Experiment")

```

```{r libraries}
#| echo: false
#| message: false
#| warning: false

require(tidyverse)
require(data.table)
library(Seurat)
library(Matrix)
library(ggplot2)
library(InSituType)
library(patchwork)
library(pheatmap)
library(SeuratExtend)
library(DESeq2)
library(ggrepel)
library(readxl)
library(openxlsx)
library(grid)
library(gridExtra)

```

Setup variables, make sure to change paths for the files needed.

```{r setup}
#| echo: false

#old.wd <- getwd()           # save the current working directory
#setwd("~/Documents/git/cosMx-mouse-spleen/")   # set working directory (mac)
source("/Volumes/T9/Mouse_Spleen_Experiment/coding_Workspace/R/mouse_seurat_utils.R") # load up the functions we need

options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
#memory.limit(30000000)     # this is needed on some PCs to increase memory allowance, but has no impact on macs.
options(Seurat.object.assay.version = "v5")
options(future.globals.maxSize= 100*1024*1024^2) # 10GB


```

Setup paths

```{r paths}
#| echo: false
###################################
# File structure setup, Mac syntax
###################################
# Modify these for each RNA experiment after export from AtoMx

#root_dir <- '/Volumes/T9/PSR-GEN-057' # Experiment specific folder structure
root_dir <- '/Volumes/T9/Mouse_Spleen_Experiment/Sabaawy_MuTMA_RNA_07_10_2024_21_25_12_667'
exp_name <- 'Sabaawy_MuTMA_RNA_07_10_2024_21_25_12_667'
slide_names <- c( 'Sabaawynewcore091320246', 'Sabaawynewcore091320245')
slide_names
slide_name <- 'Sabaawynewcore091320245' # select one to work with (can be arbitrary)
# run_names is not needed but could be used to navigate the directory structure
run_names <- c('20240920_233038_S2','20240920_233038_S1')
run_name <- '20240920_233038_S1' # matches slide_name

results_dir <- paste0(root_dir, "/spleen_results")
saved_rds_dir <- paste0(root_dir, "/saved_objs")
file.exists(saved_rds_dir)

rna_root_dir <- paste0(root_dir, '/RawFiles') # or flatFiles
rna_flatfiles_dir <- paste0(root_dir, '/flatFiles')
rna_dir <- paste0(rna_root_dir, '/', slide_name, '/', run_name, '/AnalysisResults/s2wi20fpqr') 
# This text file lists all the Probes
# /Users/annmstrange/Documents/Projects/cosMx_MouseOct2024/Sabaawy_MuTMA_RNA_07_10_2024_21_25_12_667/RawFiles/Sabaawynewcore091320245/20240920_233038_S1
rna_lookup <- paste0(rna_root_dir, '/', slide_name, '/', run_name, '/plex-s2wi20fpqr.txt')

metadata_dir <- paste0(root_dir,'/Metadata')
df_sample <- read.csv(paste0(metadata_dir, '/Sample_Metadata.csv'))
df_fov_meta <- read.csv(paste0(metadata_dir, '/FOV_Sample_Ids_RNA.csv'))

# This nanostring-provided file lists Probe names, gene names, and some annotations
markers_dir <- paste0(root_dir, '/BioMarkers')
ns_gene_data <- 'LBL-11176-03-Mouse-Universal-Cell-Characterization-Gene-List.xlsx'
ns_gene_fn <- paste0(markers_dir, '/', ns_gene_data)
df_gene_data <- get_nanostring_mouse_gene_annotations(ns_gene_fn)

df_special_genes <- read.csv(paste0(markers_dir, '/GenesOfInterest_RNA.csv'), header=TRUE, sep=",")
colnames(df_special_genes) <- c('Display_Name', 'OfInterest_Reason', "Notes", "GroupAs", "Highlight")
head(df_special_genes)

# left outer join with df_gene_data by RNA1K to gene 
df_gene_data2 <- left_join(df_gene_data, df_special_genes, by ='Display_Name')
head(df_gene_data2)
nrow(df_gene_data2)
df_gene_data <- df_gene_data2

```

Special Genes are ones we are specifically interested in for a reason, or perhaps simply an annotation that they should be grouped together such as Cd3d and Cd3e, different isotopes for the same RNA molecule. The spreadsheet/csv can be prepared in advance for easier plotting.


```{r specialgenes}
#| echo: false

genes_special <- df_special_genes$Display_Name
genes_special

genes_senescence <- df_special_genes %>%
  filter(OfInterest_Reason %in% c("Senescence")) %>%
  pull(Display_Name)

# left outer join with df_gene_data by RNA1K to gene 
df_gene_data2 <- left_join(df_gene_data, df_special_genes, by ='Display_Name', suffix=c("", ""))
df_gene_data2$OfInterest_Reason[is.na(df_gene_data2$OfInterest_Reason)] <- " "
df_gene_data2$Notes[is.na(df_gene_data2$Notes)] <- " "
df_gene_data2$GroupAs[is.na(df_gene_data2$GroupAs)] <- " "
df_gene_data2$Highlight[is.na(df_gene_data2$Highlight)] <- " "
head(df_gene_data2)
nrow(df_gene_data2)
df_gene_data <- df_gene_data2

table(df_gene_data2$OfInterest_Reason)

file.exists(results_dir)
file.exists(rna_root_dir) 
file.exists(rna_dir)
file.exists(rna_lookup)
file.exists(metadata_dir)
file.exists(paste0(metadata_dir, '/Sample_Metadata.csv'))
file.exists(paste0(metadata_dir, '/FOV_Sample_Ids_RNA.csv'))
```

Load RNA labels for RNA marker attributes

expect counts similar to this for the 1K RNA panel:

Endogenous Negative SystemControl

950 10 197

```{r probes}
#| echo: false

df_rna_lookup <- read.table(rna_lookup, header = TRUE, sep = "\t")
head(df_rna_lookup) # ProbeID e.g CPROT01266, DisplayName e.g. 'CD4'
# example lookup; RNA has no ProbeID, but DisplayName
df_rna_lookup[df_rna_lookup$CodeClass != 'Endogenous', c('DisplayName','CodeClass')] 
# CodeClass can be SystemControl, Negative, or Endogenous. 

print(table(df_rna_lookup$CodeClass))
```

### Color Setup

```{r colors}

# Cell Type palette to be consistent with one of the AtoMx palettes
celltype_colors <- c("#1b9e77", "#7570b3", "#e7298a", "#66a61e", "#e6ab02",
                    "#a6761d", "#b3cc1a", "#377eb8", "#f87878",  "#4daf4a",
                    "#984ea3", "#a65628", "#af648b", "#999999",
                    "#ff7f00", "#cccccc",
                    "lightgreen", "turquoise", "lightblue", "lightyellow", "pink")

# CellType / InSituType supervised cell typing types:
names(celltype_colors) <- c("B.cell", "Dendritic.cell", "Endothelial", 
                            "Fibroblast", "Macrophage", "Mast.cell",
                            "Monocyte", "Neutrophil", "NK.cell", "Plasma",
                            "Plasmablast", "T.cell.CD4", "T.cell.CD8",
                            "T.cell.Reg", "Plasmacytoid", "unknown", 
                            "a","b","c","d", "e")

# change to my labels 
mouseIO_colors <- c("#1b9e77", "#7570b3", "#e7298a", "tan", "#e6ab02",
                    "#a6761d", "#b3cc1a", "#377eb8", "#f87878",  "#4daf4a", "darkgreen", # #984ea3",
                    "#af648b", "#a6761d",  "#af648b", "#999999", "#999999",
                    "turquoise", "pink", "pink",  #  "lightblue",
                    "#cccccc", "#dddddd", "#555555", "#444444", "#555555", "#666666", 
                    "darkgreen",
                    "#b3cc1a", "#b3cc1a",
                    "lavender", "turquoise", "lightblue", "peachpuff", "lightyellow",
                    "#a65628", "lightyellow",  "limegreen", "#66a61e",
                    "#984ea3", "grey50",
                    "turquoise", "lightblue" ,"lavender","peachpuff")


names(mouseIO_colors) <- c("B.cell", "Dendritic.cell", "Endothelial", 
                                 "Fibroblast", "Macrophage", 
                            "Mast.cell", "Monocyte", "Neutrophil", "NK", "Plasma", "Plasmablast", 
                           "T.cell", "T.cell.CD4", "T.cell.CD8", "T.cell.regulatory", "T.cell.reg", 
                           "Myofibroblast", "Erythroid.projenitor", "Erythroid.Projenitor",
                            "unknown", "Unknown.34", "Unknown.35", "Unknown.7","Unknown.9", "Unknown.14",
                           "B.cell.like", 
                           "Macrophage/Monocytes", "Monocyte/Macrophage", 
                            "a","b","c","d", "e",
                           "NK.or.T.cell", "Basophil.like","B.cell.2","B.cell.3",
                           "Granulocyte" , "ECM",
                            "Plasmablast","Plasmacytoid.DC", "other.1", "other.2")


# molecule colors #00ffff cyan, #ff0000 red, 



```

Skip If possible: Load Seurat Data from Flatfiles
This loads only the first slide (ending in "5") but both can be loaded and 
merged here.
Normalization methods can be Total, Seurat, or Pearson. We use Seurat 'Normalize' because it 
   can be easily applied to our spleen-only samples, and is appropriate for this 
   data.

```{r loadnanostring}
#| eval: false
#| echo: false
#| warning: false

#Ignoring: "Warning: Not validating FOV objects" on subset, it's okay
obj_list <- list()
negmeans_list <- list()
for (i in 1:2){
  print(i)
  print(slide_names[i])
  print(run_names[i])
  flatfiles_dir <- paste0(rna_flatfiles_dir, '/', slide_names[i])
  print(flatfiles_dir)
  print(file.exists(flatfiles_dir))
  list.files(flatfiles_dir)

  obj_list[[i]] <- LoadNanostring(data.dir = flatfiles_dir, fov = slide_names[i], assay="RNA")
  # LoadNanostring doesn't handle the metadata; add
  obj_list[[i]] <- load_mouse_meta_load_missed(obj_list[[i]], paste0(flatfiles_dir, "/",slide_names[i],"_metadata_file.csv.gz"))

  # This rename is needed as LoadNanostring uses <cell>_<fov> cell ID vs the c_<slide>_<fov>_<cell> format used elsewhere
  obj_list[[i]]  <- rename_keys(obj_list[[i]])
  # Each slide can be normalized independently or together. Here we'll normalize each

  # Remove SystemControls
  print(paste0("Num Features before removing System Controls: ", nrow(obj_list[[i]])))

  obj_list[[i]] = remove_sys_control(obj_list[[i]], "RNA", "counts")
  print(paste0("Num Features after removing System Controls (expect 1010): ", nrow(obj_list[[i]])))

  # keep 0 values for Negative controls in the counts matrix after subtracting, and set aside the means for later.  InSituType needs this.
  negmeans_list[[i]] <- get_neg_control_means(obj_list[[i]], "RNA", "counts")
  # add metadata for "neg" also
  obj_list[[i]] <- AddMetaData(obj_list[[i]], metadata = data.frame(neg = negmeans_list[[i]]))

  obj_list[[i]] <- subtract_neg_control(obj_list[[i]], "RNA", "counts")
  print(paste0("Num Features after accounting for Negative Controls (s/b unchanged): ", nrow(obj_list[[i]])))
  print(paste0("Num Cells before QC: ", ncol(obj_list[[i]])))
  # BASIC QC filter needed to prevent sparsity errors in SCTransform; option for more later
  obj_list[[i]] <- subset(obj_list[[i]], subset = (nFeature_RNA > 10 & nCount_RNA > 20)) #20 genes/cell. also vs nFeature_Nanostring
  print(paste0("Num Cells after super basic QC: ", ncol(obj_list[[i]])))
  # Remove cells that didn't pass the AtoMx QC
  obj_list[[i]] <- subset(obj_list[[i]], subset = qcCellsFlagged == FALSE)
  print(paste0("Num Cells after filtering on more complete cell QC: ", ncol(obj_list[[i]])))

  # Normalizes counts, same as selecting "Seurat" as the norm method in AtoMx
  # other options are "Total" or Pearson
  obj_list[[i]] <- NormalizeData(obj_list[[i]], normalization.method = "LogNormalize", scale.factor = 10000)
  obj_list[[i]]

}

sobj <- merge(obj_list[[1]], y = c(obj_list[[2]]))


```

Add FOV and Sample Metdata

```{r loadfovs}
#| eval: false

# set rownames
rownames(df_sample) <- df_sample$Sample.ID

head(df_sample)
# keep only subset of columns
df_sample <- df_sample[, c('Sample.ID', 'Sample.Label', 'Sample.Nm', 'tissue', 'condition', 'Physical.Tag', 'Sex', 'Date.of.Birth', 'Genotype', 'time.to.form.tumor', 'Organ')]

head(df_fov_meta)

# Replace "- " with " " in the Sample.Label column
df_sample$Sample.Label <- gsub("\n", "", df_sample$Sample.Label)
df_sample$Sample.Label <- gsub("  ", " ", df_sample$Sample.Label)

#join
df_fov_meta2 <- merge(df_fov_meta, df_sample, by = 'Sample.ID')
head(df_fov_meta2)
table(df_fov_meta2$Sample.Label)
table(df_fov_meta2$Genotype)

#sobj <- add_mouse_sample_metadata(sobj, df_fov_meta2)
table(sobj@meta.data$Organ)
table(sobj@meta.data$Genotype)
sobj

```

## Subsetting

Subset to only single slide (in case of having loaded both)

```{r subset1}
#| echo: false
#| message: false
#| warning: false
#| eval: false
#|  

sobj_spleen <- subset(sobj, subset = Organ == "Spleen" & Sample.ID >= "30")
sobj_spleen5 <- subset(sobj_spleen, subset = Run_Tissue_name == "Sabaawy new core 09/13/2024 5")

dim(sobj)
dim(sobj_spleen)
dim(sobj_spleen5)

saveRDS(sobj_spleen5, paste0(saved_rds_dir,"/sobj_spleen5.rds"))


```

# Resume Checkpoint1 

Resume here to save a lot of time. This Seurat object is fully loaded including metadata

```{r resume1}
#| eval: true 
#| 
sobj_spleen5 <- readRDS(paste0(saved_rds_dir,"/sobj_spleen5.rds"))

```

## Spleen Subsets

Subset to Spleen only, the focus of this Analysis.

The reason for subsetting to specific samples is that this automatically creates Seurat fovs with the bounding boxes for the extent of the sample, which makes spatial plots for a single sample easier. We'll look at numbers using the sobj_spleen subset but keep smaller subsets handy for image plots.


```{r subset}
#| echo: false
#| warning: false


table(sobj_spleen5@meta.data$Sample.ID)
# Focusing on only 3 samples, slide 5
sobj_spleen30 <- subset(sobj_spleen5, subset = Sample.ID == 30 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen31 <- subset(sobj_spleen5, subset = Sample.ID == 31 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen32 <- subset(sobj_spleen5, subset = Sample.ID == 32 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen33 <- subset(sobj_spleen5, subset = Sample.ID == 33 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen34 <- subset(sobj_spleen5, subset = Sample.ID == 34 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen35 <- subset(sobj_spleen5, subset = Sample.ID == 35 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")

```

## Spatial Feature Plots

of key Senescence Genes

```{r featureplots}
#| echo: false
#| warning: false
features_genes <- c("P21", "Mki67" , "Lmna", "Chek1","Stmn1", "Pten", "Ccl5", "Cxcl13", "Gzmb" )
Idents(sobj_spleen5) <- "Genotype"
ImageDimPlot(sobj_spleen5, fov="Sabaawynewcore091320245")
# FeaturePlot
p <- ImageFeaturePlot(sobj_spleen30, fov="Sabaawynewcore091320245",
                 features = features_genes, 
                 size = 1,
                 coord.fixed=TRUE,
                 dark.background = FALSE) + 
  patchwork::plot_layout(ncol=3)
print(p)
# note: this returns patchworked object

str(p)
ggsave(paste0(results_dir,"/spleen30_senescence_FeaturePlots.png"), plot = p,  width = 10, height = 12, dpi = 300)

p <- ImageFeaturePlot(sobj_spleen32, fov="Sabaawynewcore091320245",
                 features = features_genes, 
                 size = 1,
                 dark.background = FALSE) + 
    patchwork::plot_layout(ncol=3)
ggsave(paste0(results_dir,"/spleen32_senescence_FeaturePlots.png"), plot = p, width = 10, height = 12, dpi = 300)


p <- ImageFeaturePlot(sobj_spleen34, fov="Sabaawynewcore091320245",
                 features = features_genes, 
                 size = 1,
                 dark.background = FALSE) + 
  patchwork::plot_layout(ncol=3)
ggsave(paste0(results_dir,"/spleen34_senescence_FeaturePlots.png"), plot = p, width = 10, height = 12, dpi = 300)



```


## PCA and UMAP

### PCA

```{r pca}
#| echo: false
#| message: false
#| warning: false
#| 
sobj_spleen5 <- FindVariableFeatures(object = sobj_spleen5) 

sobj_spleen5 <- ScaleData(sobj_spleen5)
sobj_spleen5 <- RunPCA(sobj_spleen5, verbose = FALSE, npcs = 30)
ElbowPlot(sobj_spleen5)


```

```{r pcaplots}
#| echo: false

# PCA plot
features <- TopFeatures(sobj_spleen5, nfeatures=30)
sobj_spleen5.no.umap <- sobj_spleen5
sobj_spleen5.no.umap[["umap"]] <- NULL
DimPlot(sobj_spleen5.no.umap) + RotatedAxis()


```

### Umap

Initial attempt at cell typing. 
The resolution of 0.6 found 17 clusters which was better for finding the 
Dendritic cells in sample 34, but did subdivide B.cells too far (ok)

```{r UMAP}
set.seed(24)
sobj_spleen5 <- FindNeighbors(sobj_spleen5, dims = 1:30)
sobj_spleen5 <- FindClusters(sobj_spleen5,  cluster.name='seurat_cluster.6', resolution=0.6, verbose = TRUE)
#sobj <- RunUMAP(sobj, min_dist=0.3, spread=5, dims = 1:20)
sobj_spleen5 <- RunUMAP(sobj_spleen5, dims = 1:20, spread=5, min_dist = 0.1, n_neighbors=10) # from 0.1, 30, was 20


# cell cluster assignments are kept here 
#table(Idents(sobj_spleen))
# This is where metadata is placed for clusters, independent of FindClusters cluster.name
table(sobj_spleen5@meta.data$seurat_clusters)

```

### ReLabel1
This is not the final cell typing, but an initial clustering to explore. 

```{r rename }
# Cluster renames
# Rename the cluster
df_meta <- sobj_spleen5@meta.data[c('cell', 'seurat_cluster.6')]
#df_meta$seurat_clusters.6 <- df_meta$seurat_clusters
head(df_meta)

df_meta <- df_meta %>%
  mutate(CellType_Label6 = case_when(
    seurat_cluster.6 == 0 ~ "Unknown.35",
    seurat_cluster.6  == 1 ~ "B.cell",
    seurat_cluster.6  == 2 ~ "Erythroid.Projenitor",
    seurat_cluster.6 == 3 ~ "T.cell",
    seurat_cluster.6  == 4 ~ "B.cell",
    seurat_cluster.6  == 5 ~ "Unknown.34",
    seurat_cluster.6 == 6 ~ "B.cell.like",
    seurat_cluster.6  == 7 ~ "Unknown.7",
    seurat_cluster.6  == 8 ~ "Macrophage/Monocytes",
    seurat_cluster.6 == 9 ~ "Unknown.9",
    seurat_cluster.6  == 10 ~ "Neutrophils",
    seurat_cluster.6  == 11 ~ "Plasma",
    seurat_cluster.6 == 12 ~ "Dendritic.cell",
    seurat_cluster.6  == 13 ~ "Macrophage",
    seurat_cluster.6  == 14 ~ "Unknown.14",
    seurat_cluster.6  == 15 ~ "Dendritic.cell",
    seurat_cluster.6  == 16 ~ "B.cell",
    TRUE ~ "other" # Optional: handle unexpected values
  ))

sobj_spleen5 <- AddMetaData(sobj_spleen5, metadata = df_meta[c('seurat_cluster.6','CellType_Label6')])

Idents(sobj_spleen5) <- 'seurat_cluster.6'
```

Show UMAP with Seurat clusters

```{r umap1}

Idents(sobj_spleen5) <- "CellType_Label6"
DimPlot(sobj_spleen5, reduction = "umap", alpha=0.5, cols=mouseIO_colors[sobj_spleen5@meta.data$CellType_Label6]) + 
  ggtitle("Seurat Louvain clusters6")

ggsave(paste0(results_dir, "/Umap_Louvain6.png"), last_plot(), dpi=300)
```

### 

DotPlot Setup

```{r gene_annots}

genes_cosMx_celltyping <- get_nanostring_celltyping_genes(ns_gene_fn)
cat("Nanostring lists", length(genes_cosMx_celltyping), "genes for celltyping" )

# function exists in utils
# get_top_markers <- function(sobj, cluster, n) {
#   # depends on Idents being set correctly 
#   markers <- FindMarkers(sobj, ident.1 = cluster)
#   markers %>%
#     rownames_to_column(var = "gene") %>% # Add gene names as a column
#     top_n(n, wt = abs(avg_log2FC)) %>%  # Select top 10 markers by absolute log2 fold change
#     mutate(cluster = cluster)            # Add cluster information
# }

```

### DotPlot Most Recent Seurat Clusters

```{r seuratDotPlot}
# eval: false

# Function to find top n markers for a specific cluster
clusters <- unique(sobj_spleen5@meta.data$seurat_clusters)

# Apply the function to all clusters and combine results
Idents(sobj_spleen5) <- 'seurat_clusters'
top_markers <- map_dfr(clusters, get_top_markers, sobj=sobj_spleen5, 10)

table(top_markers$cluster)
dim(top_markers) # num clusters * n
head(top_markers)
# also append our favorite cell typing markers

# Genes we want to see because they are classic cell typing genes
genes_lineage <- c("Cd19", "Ptprc", "Cd8a", "Cd8b1", "Cd68", "Cd163","Itgax", "Itgam", "Cd3e", "Cd3d", "Fn1", "Acta2")

# Compare DotPlots with top_markers limited by only ns celltyping genes, but
# augmented with classic cell typing genes for comparison
# remove any genes where the rowsum is too low unless its a lineage marker, try to keep with lower barriers. 
markers_to_plot <- top_markers %>%
    dplyr::filter ((gene %in% genes_cosMx_celltyping & (pct.1 + pct.2) > 0.1 
                   & p_val_adj < 0.05) | gene %in% genes_lineage)

dim(markers_to_plot) # 72 is somewhat reasonable; w repeats is really 36 unique genes

DotPlot(sobj_spleen5, features = unique(markers_to_plot$gene)) + RotatedAxis() +
  theme_minimal() + # Change to a minimal (white) background
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1), # Reduce font size and rotate x-axis labels
    axis.text.y = element_text(size = 10), # Adjust y-axis font size if needed
    panel.background = element_rect(fill = "white", color = NA), # Force white panel background
    plot.background = element_rect(fill = "white", color = NA)  # Force white overall background
    #panel.grid = element_blank() # Optional: remove grid lines if needed
  ) +
  ggtitle("Seurat Unsupervised Umap clusters Res0.6 top Log2FC")

ggsave(paste0(results_dir, "/Clusters_unsup6_DotPlot.png"), last_plot(), width = 12)

# tip:
# before running this, make sure no clusters are tiny. merge/rename



head(markers_to_plot$gene)
#get annotations
df_celltype_markers <- df_gene_data2 %>%
  filter(Display_Name %in% markers_to_plot$gene)
#write.csv( df_celltype_markers, paste0(results_dir, "/cell_typing_markers.csv"))
```


## By Each Sample
### UMAP
This shows that integration is needed because the Heterozygous samples 34 and 35 are so distinct

```{r umapsample}

Idents(sobj_spleen5) <- "Sample.ID"
DimPlot(sobj_spleen5, reduction = "umap", alpha=0.5, cols='polychrome')

ggsave(paste0(results_dir, "/CellTypes_SampleID_Umap.png"), last_plot())
```



```{r subsetagain}
#| echo: false
#| warning: false 
#| include: false

# subset again to pick up CellType Labels 
# Re-subset to get metadata into the single sample seurat objects
sobj_spleen30 <- subset(sobj_spleen5, subset = Sample.ID == 30 & 
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen31 <- subset(sobj_spleen5, subset = Sample.ID == 31 & 
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen32 <- subset(sobj_spleen5, subset = Sample.ID == 32 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen33 <- subset(sobj_spleen5, subset = Sample.ID == 33 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen34 <- subset(sobj_spleen5, subset = Sample.ID == 34 &
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")
sobj_spleen35 <- subset(sobj_spleen5, subset = Sample.ID == 35 & 
                          Run_Tissue_name == "Sabaawy new core 09/13/2024 5")

# Commented out because these are not the cell type labels we want to use in the end, but these are nice plots.
# SeuratExtend::ClusterDistrBar(sobj_spleen30$orig.ident, 
#                               sobj_spleen30$CellType_Label6,
#                               cols = mouseIO_colors[sobj_spleen30$CellType_Label6])
# 
# SeuratExtend::ClusterDistrBar(sobj_spleen31$orig.ident, 
#                               sobj_spleen31$CellType_Label6,
#                               cols = mouseIO_colors[sobj_spleen30$CellType_Label6])
# 
# SeuratExtend::ClusterDistrBar(sobj_spleen32$orig.ident, 
#                               sobj_spleen32$CellType_Label6,
#                               cols = mouseIO_colors[sobj_spleen30$CellType_Label6])
# 
# SeuratExtend::ClusterDistrBar(sobj_spleen34$orig.ident, 
#                               sobj_spleen34$CellType_Label6,
#                               cols = mouseIO_colors[sobj_spleen30$CellType_Label6])
# 
# SeuratExtend::ClusterDistrBar(sobj_spleen35$orig.ident, 
#                               sobj_spleen35$CellType_Label6,
#                               cols = mouseIO_colors[sobj_spleen30$CellType_Label6])

```

### Sample EDA
Requested, separate Umaps by Sample. Then what?

```{r separateUmaps}
#| eval: false
#| include: false

run_pca_stuff <- function(sobj) {
  sobj <- FindVariableFeatures(object = sobj) 
  sobj <- ScaleData(sobj)
  sobj <- RunPCA(sobj, verbose = FALSE, npcs = 30)

  sobj <- FindNeighbors(sobj, dims = 1:30)
  sobj <- FindClusters(sobj,  cluster.name='seurat_cluster.6', resolution=0.6, verbose = FALSE)
  sobj <- RunUMAP(sobj, dims = 1:20, spread=5, min_dist = 0.1, n_neighbors=20) # from 0.1, 30

  return(sobj)
}

sobj_spleen30 <- run_pca_stuff(sobj_spleen30)
sobj_spleen31 <- run_pca_stuff(sobj_spleen31)
sobj_spleen32 <- run_pca_stuff(sobj_spleen32)
sobj_spleen33 <- run_pca_stuff(sobj_spleen33)
sobj_spleen34 <- run_pca_stuff(sobj_spleen34)
sobj_spleen35 <- run_pca_stuff(sobj_spleen35)


```
EDA on how distinct the celltypes are for each sample. e.g. sample 35 is much more amorphous. 
```{r eachumap}
#| eval: false
#| include: false
#| 
# Unlabeled

DimPlot(sobj_spleen30, reduction = "umap", alpha=0.5, cols='polychrome')
DimPlot(sobj_spleen31, reduction = "umap",  alpha=0.5, cols='polychrome')
DimPlot(sobj_spleen32, reduction = "umap", alpha=0.5, cols='polychrome')
DimPlot(sobj_spleen33, reduction = "umap",  alpha=0.5, cols='polychrome')
DimPlot(sobj_spleen34, reduction = "umap", alpha=0.5, cols='polychrome')
DimPlot(sobj_spleen35, reduction = "umap",alpha=0.5, cols='polychrome')

```


## FindMarkers/DEGs 
FindMarkers for the whole spleen clusters first. Then by Sample.

```{r findmarkers}
#| echo: false
#| include: false
which_cluster <- "seurat_cluster.6"

Idents(sobj_spleen5) <- which_cluster
table(Idents(sobj_spleen5))
num_clusters <- length(unique(Idents(sobj_spleen5)))
spleen_markers <- FindAllMarkers(sobj_spleen5)
# keep only top <something> for each cluster

spleen_markers <- spleen_markers %>%
      mutate(HighFoldChangeLowPval = ifelse(p_val_adj < 0.05 & abs(avg_log2FC) > 1.0, "Y", "N")) %>%
      mutate(abs_logFC = abs(avg_log2FC))
    
top_markers_list <- list()
for (cluster_num in 0:num_clusters) {
    print(cluster_num)
    spleen_markers_cluster <- spleen_markers %>% 
      filter(cluster == cluster_num) %>%
      filter(HighFoldChangeLowPval == "Y")
    head(spleen_markers_cluster)
    top_markers_list[[cluster_num + 1]] <- spleen_markers_cluster
}
names(top_markers_list) <- 0:num_clusters

```

Example FindMarkers / DEGs 
```{r deg_preview}
#| echo: false

top_markers_list[1]

```


```{r findmarkers2}
#| echo: false

wb <- createWorkbook()

df_list <- list()
for (cluster_num in 0:num_clusters) {
  
  df_list[cluster_num + 1] <- top_markers_list[cluster_num + 1]

}
names(df_list) <- paste("Cluster", 0:num_clusters)

# Write each dataframe to a separate sheet
for (name in names(df_list)) {
  addWorksheet(wb, name)                 # Add a new sheet named after the dataframe
  writeData(wb, sheet = name, df_list[[name]])  # Write the dataframe to the sheet
  # Set freeze panes (e.g., freeze the first row and column)
  freezePane(wb, sheet = name, firstRow = TRUE, firstCol = TRUE)
}

# Save the workbook
print("Saving workbook SpleenCluster5_DEGs.xlsx")
saveWorkbook(wb, file = paste0(results_dir, "/SpleenCluster5_DEGs.xlsx"), overwrite = TRUE)


```

```{r featureplot3}
#| eval: false
#| include: false

# Neutrophils, overlapping Monocytes
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Itgam", feature.2 = "S100a8", feature.3 = "S100a9") 


SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Cd68", feature.2 = "Cd14", feature.3 = "Ccr2") + ggtitle("Monocytes")

#Activated DCs
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Tnf", feature.2 = "Ccl17", feature.3 = "Ccl22") + ggtitle("Activated DCs")

# pDCs
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Itgax", feature.2 = "Gzmb", feature.3 = "Tlr7") + ggtitle ("pDCs")

# Macrophages
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Marco", feature.2 = "Cd68", feature.3 = "Cd163") + ggtitle ("pDCs")

SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Cd68", feature.2 = "Il1b", feature.3 = "Ccr7") + ggtitle ("M1")

# CD68+/CD163- could be Monocytes # No. 
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Cd14", feature.2 = "Cd68", feature.3 = "Ccr2") + ggtitle ("Monocytes")

# CD68+/CD163- could be DCs?
SeuratExtend::FeaturePlot3(sobj_spleen5, feature.1 = "Itgax", feature.2 = "Cd68", feature.3 = "Cd86") + ggtitle ("DCs")

```


Briefer Heatmap

```{r}
# 
# class(mouseprofiles)
# colnames(mouseprofiles)
# mouseprofiles$Gene <- rownames(mouseprofiles)
# 
# # Calculate standard deviation and second highest value for each row
# mouseprofiles <- mouseprofiles %>%
#   rowwise() %>% # Operate on rows
#   mutate(
#     Standard_Deviation = sd(c_across(B.cell:T.cell.CD8)), # Standard deviation
#     Highest_Value = sort(c_across(B.cell:T.cell.CD8), decreasing = TRUE)[1],  
#     Second_Highest_Value = sort(c_across(B.cell:T.cell.CD8), decreasing = TRUE)[2] # Second highest value
#   ) %>%
#   ungroup() # Remove rowwise structure
# 
# # View the result
# head(mouseprofiles)
# 
# dim(mouseprofiles)
# # filter down to the interesting rows
# mouseprofiles2 <- mouseprofiles %>%
#    #dplyr::filter(Standard_Deviation > 0.5) 
#    dplyr::filter(Highest_Value - Second_Highest_Value > 0.5)
# 
# dim(mouseprofiles2)
```

This reduced form of the heatmap focuses on more variable genes that are also unique to a single cell type. (specific).

```{r}

# mouseprofiles3 <- as.data.frame(mouseprofiles2[,1:16])
# rownames(mouseprofiles3) <- mouseprofiles3$Gene
# mouseprofiles3 <- mouseprofiles3[,1:15]
# 
# pdf(paste0(results_dir, "/cosMxIO_mouseprofiles_heatmap2.pdf"), height=20, width=6, compress=FALSE)
# pheat <- pheatmap::pheatmap(sweep(mouseprofiles3, 1, pmax(apply(mouseprofiles3, 1, max), 0.2), "/"), 
#           fontsize_row = 5,
#           col = colorRampPalette(c("white", "darkblue"))(100))
# 
# grid::grid.draw(pheat$gtable)
# dev.off()
```

## Integration 

Split by Sample.ID and run CCA Integration


```{r integrationall}
#| eval: false
# This takes an hour or so to run, so use the saved RDS if possible. 

sobj_spleen_integrated <- sobj_spleen5
sobj_spleen_integrated@meta.data$Split <- sobj_spleen_integrated@meta.data$Sample.ID

# critical
# This splits the object into layers including counts.2.Split2, counts.2.Split1, same for data
sobj_spleen_integrated[["RNA"]] <- split(sobj_spleen_integrated[["RNA"]], f = sobj_spleen_integrated$Sample.ID)
sobj_spleen_integrated


# run standard anlaysis workflow
sobj_spleen_integrated <- NormalizeData(sobj_spleen_integrated)
sobj_spleen_integrated <- FindVariableFeatures(sobj_spleen_integrated)
sobj_spleen_integrated <- ScaleData(sobj_spleen_integrated)
sobj_spleen_integrated <- RunPCA(sobj_spleen_integrated)
sobj_spleen_integrated <- FindNeighbors(sobj_spleen_integrated, dims = 1:30, reduction = "pca")
sobj_spleen_integrated <- FindClusters(sobj_spleen_integrated, resolution = 1.7, cluster.name = "unintegrated_clusters")


table(sobj_spleen_integrated@meta.data$Sample.ID)
table(sobj_spleen_integrated@meta.data$CellType_Label6)
Idents(sobj_spleen_integrated) <- "CellType_Label6"
Idents(sobj_spleen_integrated) <- "Split"
sobj_spleen_integrated <- RunUMAP(sobj_spleen_integrated, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")

# Integration
sobj_spleen_integrated <- IntegrateLayers(object = sobj_spleen_integrated, method = CCAIntegration, orig.reduction = "pca", new.reduction = "integrated.cca",
    verbose = TRUE)

# re-join layers after integration
sobj_spleen_integrated[["RNA"]] <- JoinLayers(sobj_spleen_integrated[["RNA"]])

sobj_spleen_integrated <- FindNeighbors(sobj_spleen_integrated, reduction = "integrated.cca", dims = 1:20)
sobj_spleen_integrated <- FindClusters(sobj_spleen_integrated, resolution = 0.8)
sobj_spleen_integrated <- RunUMAP(sobj_spleen_integrated, dims = 1:20, reduction = "integrated.cca")


saveRDS(sobj_spleen_integrated, paste0(saved_rds_dir, "/sobj_spleen_integrated.RDS"))


```
New Integrated UMAP (unlabeled)
```{r resumehere}
#| echo: false
#| warning: false
#| 
# RESUME HERE to save a lot of time. 
sobj_spleen_integrated <- readRDS(paste0(saved_rds_dir, "/sobj_spleen_integrated.RDS"))

DimPlot(sobj_spleen_integrated, reduction = "umap", group.by = c("seurat_clusters"), cols='polychrome')

```
UMAP showing integration of Samples, with previous CellTyping as baseline

```{r betterUmap}

# Visualization
DimPlot(sobj_spleen_integrated, reduction = "umap", group.by = c("Split", "CellType_Label6"))

#DimPlot(sobj_spleen_integrated, reduction = "umap", group.by = c("Sample.ID"))
#DimPlot(sobj_spleen_integrated, reduction = "umap", group.by = c("CellType_Label6"), cols='polychrome')


```




```{r feature_dim_plot}
#| eval: false
#| echo: false
#| warning: false

# Use these plots to see where RNA appears relative to cell types.  Look okay? 
ImageDimPlot(sobj_spleen_integrated, fov="fov30", molecules=genes_lineage[1:9],
                 coord.fixed=TRUE, mols.size=0.1, alpha=0.5)

```

```{r}
#| eval: false
#| echo: false
#| warning: false
ImageDimPlot(sobj_spleen_integrated, fov="fov34", flip_xy=FALSE,
             molecules = c("Itgax", "Irf4"))
```

### Integration Labelling

```{r integrationlabels}
#| echo: false
#| warning: false

df_meta <- sobj_spleen_integrated@meta.data
df_meta <- df_meta %>%
  mutate(CellType_Integrated = case_when(
    seurat_clusters == 0 ~ "B.cell",
    seurat_clusters  == 1 ~ "T.cell",
    seurat_clusters  == 2 ~ "B.cell",
    seurat_clusters == 3 ~ "Monocyte", 
    seurat_clusters  == 4 ~ "Fibroblast", 
    seurat_clusters  == 5 ~ "Plasmacytoid.DC", # was c
    seurat_clusters == 6 ~ "other.1", # mostly sample 35 
    seurat_clusters  == 7 ~ "Plasmablast", # Platelets or basophiles
    seurat_clusters  == 8 ~ "Plasmacytoid.DC", # Basophil.like",
    seurat_clusters == 9 ~ "Dendritic.cell",
    seurat_clusters  == 10 ~ "Erythroid.Projenitor",
    seurat_clusters  == 11 ~ "B.cell",
    seurat_clusters == 12 ~ "Neutrophil",
    seurat_clusters  == 13 ~ "Plasma",
    seurat_clusters  == 14 ~ "Granulocyte", # Granulocyte
    seurat_clusters  == 15 ~ "Macrophage",
    seurat_clusters == 16 ~ "other.2",
    seurat_clusters  == 17 ~ "other.2", # "Macrophage" had only 2,
    seurat_clusters  == 18 ~ "other.2", # 2 cells only
    seurat_clusters  == 19 ~ "other.2", # 2 cells only
    TRUE ~ "other" # Optional: handle unexpected values
  ))

table(df_meta$CellType_Integrated)

sobj_spleen_integrated <- AddMetaData(sobj_spleen_integrated, metadata = df_meta[c('CellType_Integrated')])

```

```{r integ_umap}
#| echo: false
#| warning: false
Idents(sobj_spleen_integrated) <- "CellType_Integrated"
DimPlot(sobj_spleen_integrated, reduction = "umap", group.by = c("seurat_clusters"), label=TRUE)

cols <- mouseIO_colors[sobj_spleen_integrated@meta.data$CellType_Integrated]
# ARe any cell types unlabelled with a color?
unique(sobj_spleen_integrated@meta.data$CellType_Integrated[which(is.na(cols))])



# set factor levels to control legend, but missing ones wb NA
Idents(sobj_spleen_integrated) <- factor(sobj_spleen_integrated@meta.data$CellType_Integrated, levels =
                                       c("B.cell", "Plasma", "T.cell",
                                         "Neutrophil", "Dendritic.cell", "Macrophage", "Monocyte",
                                         "Erythroid.Projenitor", "Granulocyte", "Fibroblast",
                                         "other.1","Plasmablast","Plasmacytoid.DC","other.2","e"))
                                        
DimPlot(sobj_spleen_integrated, reduction = "umap", cols=cols, label=FALSE)                                                                            

ggsave(paste0(results_dir, "/Integrated_Umap_Labeled.png"), last_plot(), dpi=300)

```

```{r}
#| echo: false
#| warning: false
#| 
#Idents(sobj_spleen_integrated) <- "CellType_Integrated"
DimPlot(sobj_spleen_integrated, reduction = "umap", split.by = "Split", cols=cols)
ggsave(paste0(results_dir, "/Integration_by_Sample_DimPlot.png"),  width=20, height=5, dpi=300)

```

### Spatial Celltypes by Sample
Whole sample, good for locating regions of interest as part of EDA

```{r feature_plots_integ}
#| echo: false
#| warning: false

# Feature Plots
Idents(sobj_spleen_integrated) <- "CellType_Integrated"
ImageDimPlot(sobj_spleen_integrated, fov="fov30", border.size = 0.1,
             cols = mouseIO_colors,
             axes = TRUE,
             flip_xy = FALSE,
             coord.fixed=TRUE) 

ImageDimPlot(sobj_spleen_integrated, fov="fov31", border.size = 0.1,
             cols = mouseIO_colors,
             axes = TRUE,
             flip_xy = FALSE,
             coord.fixed=TRUE) 

ImageDimPlot(sobj_spleen_integrated, fov="fov32", border.size = 0.1,
             cols = mouseIO_colors,
             axes = TRUE,
             flip_xy = FALSE,
             coord.fixed=TRUE) 

ImageDimPlot(sobj_spleen_integrated, fov="fov34", border.size = 0.1,
             cols = mouseIO_colors,
             axes = TRUE,
             flip_xy = FALSE,
             coord.fixed=TRUE) 
```

Integration DotPlot

```{r integrationdotplot}
# Set Idents
#Idents(sobj_spleen_integrated) <- 'CellType_Integrated' # 'CellType_Integrated'
#Idents(sobj_spleen_integrated) <- 'seurat_clusters'
table(Idents(sobj_spleen_integrated))
clusters <- unique(Idents(sobj_spleen_integrated))

# Function to find top n markers for a specific cluster
# First check for tiny clusters
table(sobj_spleen_integrated@meta.data$CellType_Integrated)
n <- 15

# Apply the function to all clusters and combine results
top_markers <- map_dfr(clusters, get_top_markers, sobj = sobj_spleen_integrated, n=n)

table(top_markers$cluster)
dim(top_markers) # 150 -> 91. 
head(top_markers)
# also append our favorite cell typing markers

genes_lineage <- c("Cd19", "Ptprc", "Cd8a", "Cd8b1", "Cd68", "Cd163","Itgax", "Itgam", "Cd3e", "Cd3d", "Fn1", "Acta2")

# Compare DotPlots with top_markers limited by only ns celltyping genes, but
# augmented with classic cell typing genes for comparison
# remove any genes where the rowsum is too low unless its a lineage marker, try to keep with lower barriers. 
markers_to_plot <- top_markers %>%
    dplyr::filter ((gene %in% genes_cosMx_celltyping & (pct.1 + pct.2) > 0.1 
                   & p_val_adj < 0.05) | gene %in% genes_lineage)

dim(markers_to_plot) # 72 is somewhat reasonable; w repeats is really 36 unique genes

DotPlot(sobj_spleen_integrated, features = unique(markers_to_plot$gene)) +  
  RotatedAxis() +
  theme_minimal() + # Change to a minimal (white) background
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1), # Reduce font size and rotate x-axis labels
    axis.text.y = element_text(size = 10), # Adjust y-axis font size if needed
    panel.background = element_rect(fill = "white", color = NA), # Force white panel background
    plot.background = element_rect(fill = "white", color = NA)  # Force white overall background
    #panel.grid = element_blank() # Optional: remove grid lines if needed
  ) +
  ggtitle("Integrated Cell types top Log2FC")

ggsave(paste0(results_dir, "/CellType_Integrated_DotPlot.png"), last_plot(), width = 12)


```

### Featureplots
EDA

```{r feature_ea}
#| echo: false
#| warning: false
#| 
# show certain molecules on the umap

# Generate feature plots for the selected features
# feature_plots <- lapply(genes_lineage, function(feature) {
#   FeaturePlot(sobj_spleen_integrated, features = feature)
# })
# 
# # Combine plots into a grid
# CombinePlots(plots = feature_plots, ncol = 3)

FeaturePlot(sobj_spleen_integrated, c("Cd3d", "Cd3e","Cd3g"))
FeaturePlot(sobj_spleen_integrated, c("Cd4", "Cd8a","Cd8b1", "Foxp3"))
FeaturePlot(sobj_spleen_integrated, c("Cd8a", "Cd8b1"))
FeaturePlot(sobj_spleen_integrated, c("Nkg7"))
FeaturePlot(sobj_spleen_integrated, c("Itgax","Itgam")) # matches DC region

#FeaturePlot(sobj_spleen_integrated, c("Igkc")) # Plasma
FeaturePlot(sobj_spleen_integrated, c("Mpo", "Elane", "Prtn3")) # Neutrophil 
#FeaturePlot(sobj_spleen_integrated, c("Mpo", "Ly6g"))
#eaturePlot(sobj_spleen_integrated, c("Cd19"))

FeaturePlot(sobj_spleen_integrated, c("C1qb", "C1qb","Selenop","Marco", "Cd68")) # monocyte
FeaturePlot(sobj_spleen_integrated, c("Clu", "Thbs1", "Myl9")) # macrophages

#FeaturePlot(sobj_spleen_integrated, c("Cd14", "Ccr2", "Sell")) # Monocytes markers, but not found in specific regions
FeaturePlot(sobj_spleen_integrated, c( "Cd68", "Mrc1")) # "Cd163",

#FeaturePlot(sobj_spleen_integrated, c("Hbb"))
FeaturePlot(sobj_spleen_integrated, c("Acta2", "Clu", "Tagln"))

```

```{r prettydotplot}
#| echo: false
#| warning: false
#| 
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
# get labels
names(table(sobj_spleen_integrated@meta.data$CellType_Integrated))

# levels will be sorted in DotPlot bottom to top
Idents(sobj_spleen_integrated) <- factor(sobj_spleen_integrated@meta.data$CellType_Integrated, levels = c(  "e","other.2","other.1", "Plasmablast","Plasmacytoid.DC", "Granulocyte", "Fibroblast", "Endothelial",  "Erythroid.Projenitor", "Macrophage", "Monocyte",  "Dendritic.cell", "Neutrophil" ,"T.cell" , "T.cell.CD8","Plasma","B.cell" ))
table(Idents(sobj_spleen_integrated))

markers_to_plot$gene
markers_to_not_plot <- c("Hba-a1/2", "Hbb", "Ighm", "Ctsw", "Scgb3a1","Igfbp5","Myh11", "Ybx3","Rgs1", "Tshz2", "Tm4sf1", "Fabp4","Igkc", "Igha", "Ighm", "Thbs2","Ctsw")
markers_to_plot2 <- unlist(list(setdiff(markers_to_plot$gene, markers_to_not_plot)))
markers_to_plot2

# sorted 
markers_to_plot3 <- c( "Ighd",  "Cd19","Jchain",   "Ighg1",   "Xbp1", 
                      "Cd3d",    "Nkg7",    "Cd3e",    "Cd8a", "Lcn2",    "Ltf",    "S100a4",  "Itgax",  "C1qb",    "C1qa",    "C1qc",  "Selenop", 
"Thbs1",   "Myl9",    "Hmgb2",  "Ube2c" ,  "Mt1" ,    "Top2a"  ,
  "Acta2" ,  "Clu" ,    "Igfbp3" , "Tagln", "Mpo" ,"Elane",   "Prtn3")

# non-unique values when setting 'row.names' means the Ident levels are off from the metadata col
#DotPlot(sobj_spleen_integrated, features = markers_to_plot3, dot.scale = 8) +
#    RotatedAxis()


DotPlot(sobj_spleen_integrated, features = markers_to_plot3) +  
  RotatedAxis() +
  theme_minimal() + # Change to a minimal (white) background
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1), # Reduce font size and rotate x-axis labels
    axis.text.y = element_text(size = 10), # Adjust y-axis font size if needed
    panel.background = element_rect(fill = "white", color = NA), # Force white panel background
    plot.background = element_rect(fill = "white", color = NA)  # Force white overall background
    #panel.grid = element_blank() # Optional: remove grid lines if needed
  ) +
  ggtitle("Integrated Cell types top Log2FC")

ggsave(paste0(results_dir, "/CellType_Integrated_DotPlot.png"), last_plot(), width = 8)

```

### UMAP of CellTypes

```{r umap_int}
#| echo: false
#| warning: false
DimPlot(sobj_spleen_integrated, reduction = "umap", group.by = c("CellType_Integrated"), cols=cols, label=FALSE)

```

```{r feature}
#| echo: false
#| warning: false
# show certain molecules on the umap

FeaturePlot(sobj_spleen_integrated, c("Ccl5", "Cxcl13"))
ggsave(paste0(results_dir, "/FeaturePlots_ccl5_cxcl13.png"), dpi=300, width=8, height=4)



```

## Spatial Celltype and Features

```{r spatialfeature}
#| echo: false
#| warning: false
Idents(sobj_spleen_integrated) <- 'CellType_Integrated'
cells <- rownames(sobj_spleen_integrated@meta.data)
ImageDimPlot(sobj_spleen_integrated, fov="fov34", flip_xy=FALSE, 
             border.size = 0.07,
             cols = mouseIO_colors,
             axes = TRUE,
             coord.fixed=TRUE )
            #molecules = c("Itgax", "Irf4" )) # DC markers

             
 ImageDimPlot(sobj_spleen_integrated, fov="fov30", flip_xy=FALSE, 
             border.size = 0.07,
             cols = mouseIO_colors,
             axes = TRUE,
             coord.fixed=TRUE,
            molecules = c("Cd4", "Cd8a" )) # T cellmarkers           
 
  ImageDimPlot(sobj_spleen_integrated, fov="fov32", flip_xy=FALSE, 
             border.size = 0.07,
             cols = mouseIO_colors,
             axes = TRUE,
             coord.fixed=TRUE,
            molecules = c("Cd4", "Cd8a" )) # T cellmarkers   

```


## Calculate gene stats

### Senescence vs Prolif

```{r resubset}
#| warning: false

print("Cell numbers per Sample:")
table(sobj_spleen5@meta.data$Sample.ID)
# Focusing on only 3 samples, slide 5
sobj_spleen30 <- subset(sobj_spleen_integrated, subset = Sample.ID == 30 )
sobj_spleen31 <- subset(sobj_spleen_integrated, subset = Sample.ID == 31 )
sobj_spleen32 <- subset(sobj_spleen_integrated, subset = Sample.ID == 32 )
sobj_spleen33 <- subset(sobj_spleen_integrated, subset = Sample.ID == 33 )
sobj_spleen34 <- subset(sobj_spleen_integrated, subset = Sample.ID == 34 )
sobj_spleen35 <- subset(sobj_spleen_integrated, subset = Sample.ID == 35 )


```


Make a dataframe of the summary counts by sample (not cell type dependent; just get percent positive)

```{r markeroverlap}
#| echo: false
#| warning: false
#| 
#df_meta <- sobj_spleen_even@meta.data
# sobj_spleen30
# count matrix need
df_30 <- get_counts_df(sobj_spleen30)
df_31 <- get_counts_df(sobj_spleen31)
df_32 <- get_counts_df(sobj_spleen32)
df_33 <- get_counts_df(sobj_spleen33)
df_34 <- get_counts_df(sobj_spleen34)
df_35 <- get_counts_df(sobj_spleen35)


# Add phenotypes
df_30$cell <- rownames(df_30)
df_31$cell <- rownames(df_31)
df_32$cell <- rownames(df_32)
df_33$cell <- rownames(df_33)
df_34$cell <- rownames(df_34)
df_35$cell <- rownames(df_35)

# expects 'CellType' to exist.
print("How many cells are positive for Senescence vs Proliferation genes?")
df_30 <- df_30 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                  ifelse (prolif == 1, "prolif",
                    ifelse(sen == 1, "sen", "neither"))))
                    
table(df_30$sen_pt)
df_31 <- df_31 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                  ifelse (prolif == 1, "prolif",
                    ifelse(sen == 1, "sen", "neither"))))

df_32 <- df_32 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                         ifelse (prolif == 1, "prolif",
                                 ifelse(sen == 1, "sen", "neither"))))
table(df_32$sen_pt)

df_33 <- df_33 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                         ifelse (prolif == 1, "prolif",
                                 ifelse(sen == 1, "sen", "neither"))))
table(df_33$sen_pt)

df_34 <- df_34 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                         ifelse (prolif == 1, "prolif",
                                 ifelse(sen == 1, "sen", "neither"))))
table(df_34$sen_pt)
df_35 <- df_35 %>%
  mutate(prolif = ifelse(Pcna > 0 | Mki67 > 0, 1, 0)) %>%
  mutate(sen = ifelse(Cdkn1a > 0, 1, 0)) %>%
  mutate(sen_pt = ifelse(prolif == 1 & sen ==1, "both",
                  ifelse (prolif == 1, "prolif",
                    ifelse(sen == 1, "sen", "neither"))))

# add cell type to these, lookup for df_cell_types
df_cell_types <- sobj_spleen_integrated@meta.data[c("cell", "Sample.ID", "CellType_Integrated")]
df_cell_types$CellType <- df_cell_types$CellType_Integrated

df_30 <- merge(df_30, df_cell_types, by="cell")
dim(df_30)
table(df_30$CellType)
df_31 <- merge(df_31, df_cell_types, by="cell")
df_32 <- merge(df_32, df_cell_types, by="cell")
df_33 <- merge(df_33, df_cell_types, by="cell")
df_34 <- merge(df_34, df_cell_types, by="cell")
dim(df_31)
df_35 <- merge(df_35, df_cell_types, by="cell")

# celltype breakdown for each
df_30_summary <- df_30 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
df_30_summary$Sample.ID <- 30



df_31_summary <- df_31 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
df_31_summary$Sample.ID <- 31

dim(df_32)
# celltype breakdown for each
df_32_summary <- df_32 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
# pct of the cell type in the PT (e.g. sen or prolif or both or neither)
df_32_summary$Sample.ID <- 32

df_33_summary <- df_33 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
# pct of the cell type in the PT (e.g. sen or prolif or both or neither)
df_33_summary$Sample.ID <- 33



# celltype breakdown for each
df_34_summary <- df_34 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
df_34_summary$Sample.ID <- 34

df_35_summary <- df_35 %>%
  group_by(sen_pt, CellType) %>%
  summarize(count = n(), .groups = "drop") %>%
  #group_by(sen_pt) %>%
  group_by(CellType) %>%
  mutate(pct_celltype_inPT = (count / sum(count)) * 100) 
df_35_summary$Sample.ID <- 35

# rbind
df_spleen_sen_summary <- rbind(df_30_summary, df_31_summary, df_32_summary, df_34_summary, df_35_summary)
df_spleen_sen_summary <- df_spleen_sen_summary %>%
  filter(count > 20) %>%
  filter(CellType %in% c( "B.cell", "T.cell", "Macrophage", "Monocyte","Plasma" ,         
                          "Dendritic.cell", "Neutrophil"))

# pie plot for each sample
df_spleen_sen_summary$sen_pt <- factor(df_spleen_sen_summary$sen_pt, levels = c("both", "prolif", "sen", "neither"))
df_spleen_sen_summary$CellType <- factor(df_spleen_sen_summary$CellType)
df_spleen_sen_summary <- df_spleen_sen_summary %>%
  filter(sen_pt != "neither")

levels(df_spleen_sen_summary$CellType)

# Barplot grouped by sample ID and sen_pt
ggplot(df_spleen_sen_summary, aes(x=sen_pt, y=pct_celltype_inPT, fill=CellType)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~Sample.ID) +
  theme_classic() +
  theme( 
        legend.position = "bottom") +
  labs(title = "Spleen Cell Type Breakdown by Senescent/Prolif Phenotypes",
       fill = "CellType",
       y = "percent of CellType",
       x = "Phenotype")
ggsave(paste0(results_dir, "/spleen_sen_pt_celltype_barplot.png"), width = 10, height = 6, dpi=300)

# Filter columns based on the condition
num_cells_both30 <- df_30 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both30

num_cells_prolif30 <- df_30 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif30
num_cells_sensec30 <- df_30 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec30
tot_cells30 <- nrow(df_30)

################
num_cells_both31 <- df_31 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both31
num_cells_prolif31 <- df_31 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif31
num_cells_sensec31 <- df_31 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec31
tot_cells31 <- nrow(df_31)

##########

num_cells_both32 <- df_32 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both32

num_cells_prolif32 <- df_32 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif32
num_cells_sensec32 <- df_32 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec32
tot_cells32 <- nrow(df_32)
###############

num_cells_both33 <- df_33 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both33

num_cells_prolif33 <- df_33 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif33
num_cells_sensec33 <- df_33 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec33
tot_cells30 <- nrow(df_30)

############

num_cells_both34 <- df_34 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both34

num_cells_prolif34 <- df_34 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif34
num_cells_sensec34 <- df_34 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec34
tot_cells34 <- nrow(df_34)
#############
num_cells_both35 <- df_35 %>%
  filter((Pcna > 0 | Mki67 > 0) & Cdkn1a > 0) %>%
  nrow()
num_cells_both35

num_cells_prolif35 <- df_35 %>%
  filter(Pcna > 0 | Mki67 > 0) %>%
  nrow()
num_cells_prolif35
num_cells_sensec35 <- df_35 %>%
  filter(Cdkn1a > 0) %>%
  nrow()
num_cells_sensec35
tot_cells35 <- nrow(df_35)


# need total cell counts by sample
sample.ids <- c(30,31,32,33,34,35)
both_counts <- c(num_cells_both30, num_cells_both31, num_cells_both32, num_cells_both33,
                 num_cells_both34, num_cells_both35)
prolif_counts <- c(num_cells_prolif30, num_cells_prolif31, num_cells_prolif32, num_cells_prolif33, num_cells_prolif34, num_cells_prolif35)
sene_counts <- c(num_cells_sensec30, num_cells_sensec31, num_cells_sensec32, num_cells_sensec33,  num_cells_sensec34, num_cells_sensec35)
pt_df <- data.frame(sample.id = sample.ids, 
                    both = both_counts, 
                    prolif = prolif_counts, 
                    sene = sene_counts)
print(pt_df)
```

### by FOV

Summarize gene counts by fov to find ratios, to aide in selecting nice spatial examples to zoom

We have overall percent cells positive for a Sample, find representative fovs

```{r genesbyfov}
#| echo: false
#| warning: false

df_30_fov <- get_fov_pcts(df_30, 30)
df_30_sample <- get_sample_pcts(df_30, 30)
df_31_fov <- get_fov_pcts(df_31, 31)
df_31_sample <- get_sample_pcts(df_31, 31)

df_32_fov <- get_fov_pcts(df_32, 32)
df_32_sample <- get_sample_pcts(df_32, 32)
df_33_fov <- get_fov_pcts(df_33, 33)
df_33_sample <- get_sample_pcts(df_33, 33)

df_34_fov <- get_fov_pcts(df_34, 34)
df_34_sample <- get_sample_pcts(df_34, 34)
df_35_fov <- get_fov_pcts(df_35, 35)
df_35_sample <- get_sample_pcts(df_35, 35)

# rbind
df_genes_by_sample <- rbind(df_30_sample, df_31_sample, df_32_sample, df_33_sample, df_34_sample, df_35_sample)
df_fov_by_sample <- rbind(df_30_fov,df_31_fov, df_32_fov, df_33_fov, df_34_fov, df_35_fov)
write.csv(df_genes_by_sample, paste0(results_dir, "/key_genes_by_sample.csv"))
write.csv(df_fov_by_sample, paste0(results_dir, "/key_genes_by_fov.csv"))


df_spleen_sen_summary <- rbind(df_30_summary, df_31_summary, df_32_summary,df_33_summary, df_34_summary,
                               df_35_summary)
df_spleen_sen_summary <- df_spleen_sen_summary %>%
  filter(count > 20) %>%
  filter(CellType %in% c( "B.cell",  "Macrophage", "Monocyte","Plasma" ,         
                          "T.cell" , "Dendritic.cell", "Neutrophil", "Monocyte"))

# pie plot for each sample
df_spleen_sen_summary$sen_pt <- factor(df_spleen_sen_summary$sen_pt, levels = c("both", "prolif", "sen", "neither"))
df_spleen_sen_summary$CellType <- factor(df_spleen_sen_summary$CellType)
df_spleen_sen_summary <- df_spleen_sen_summary %>%
  filter(sen_pt != "neither")


# Barplot grouped by sample ID and sen_pt
ggplot(df_spleen_sen_summary, aes(x=sen_pt, y=pct_celltype_inPT, fill=CellType)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~Sample.ID) +
  theme_classic() +
  theme( 
        legend.position = "bottom") +
  labs(title = "Spleen Cell Type Breakdown by Senescent/Prolif Phenotypes",
       fill = "CellType",
       y = "percent of CellType",
       x = "Phenotype")
ggsave(paste0(results_dir, "/spleen_sen_pt_celltype_barplot.png"), width = 10, height = 6, dpi=300)


```



```{r countmatrices}
#| echo: false
#| warning: false
exp_data <- as.matrix(GetAssayData(sobj_spleen_integrated, assay="RNA", layer="counts"))
norm_exp_data <- as.matrix(GetAssayData(sobj_spleen_integrated, assay="RNA", layer="data"))

# which genes in genes_special not found as rownames in exp_data
genes_special_not_found <- setdiff(genes_special, rownames(exp_data))
#cat("Were any genes listed of interest we don't have?" ,genes_special_not_found)
genes_special <- genes_special[!genes_special %in% genes_special_not_found]

exp_data2 <- exp_data[genes_special, ]
norm_exp_data2 <- norm_exp_data[genes_special,]
dim(exp_data2) # 94 x 191K

df_meta <- sobj_spleen_integrated@meta.data
# get cell counts per sample
cell_counts_by_sample <- table(df_meta$Sample.ID)
```

## 

Given the special genes list, and the count matrices, and metadata, get percent non-zero and mean pos expression into df_gene_stats.

```{r genestats}
gene <- "Mki67"
# Step 4: Calculate mean and standard deviation per sample for each gene
gene_stats <- lapply(genes_special, function(gene) {
  # Extract expression for the gene
  gene_expression <- exp_data2[gene, ]
  norm_expression <- norm_exp_data2[gene, ]
  # Combine expression with sample information
  gene_df <- data.frame(expression = gene_expression,
                        norm_expression = norm_expression,
                        sample = df_meta$Sample.ID,
                        label = df_meta$Sample.Label,
                        genotype = df_meta$Genotype)
  
  # by sample
  stats <- aggregate(expression ~ sample, data = gene_df, 
                     FUN = function(x) c(pct_non_zero = pct_non_zero(x), mean_non_zero = mean_non_zero(x)))
  
  norm_stats <- aggregate(norm_expression ~ sample, data = gene_df, 
                      FUN = function(x) c(pct_non_zero = pct_non_zero(x), mean_non_zero = mean_non_zero(x)))
  
  # Add the number of cells for each sample to the result
  stats$cell_count <- cell_counts_by_sample[stats$sample]
  
  # join stats and norm_stats
  stats <- merge(stats, norm_stats, by="sample")
  stats$gene <- gene
  stats
})
df_gene_stats <- do.call(rbind, gene_stats)
df_gene_stats <- df_gene_stats[, c("gene", "sample","cell_count", "expression", "norm_expression")]

```

### Compile RNA level Percent of Cells Positive (>1 RNA probe) by Sample (Senescence Genes)

Gene Stats Summary, for genes that need aggregating such as Cd3e, Cd3d, Cd3g to CD3.

```{r gene_stat_summary}
#| echo: false
#| warning: false
# get unique GroupAs from df_gene_data2
grouped_genes <- unique(df_gene_data2$GroupAs) # CD3, CD8, VEGF
grouped_genes <- grouped_genes[!grouped_genes %in% c("", " ")]
cat ("Genes that need to be grouped: ", grouped_genes)
group <- "CD3"

# get stats by GroupAs
gene_stats_grouped <- lapply(grouped_genes, function(group) {
  # Extract expression for the gene
  gene_expression <- colSums(exp_data2[df_gene_data2[df_gene_data2$GroupAs == group, "Display_Name"], ])
  norm_expression <- colSums(norm_exp_data2[df_gene_data2[df_gene_data2$GroupAs == group, "Display_Name"], ])
  # Combine expression with sample information
  # not used
  gene_df <- data.frame(expression = gene_expression,
                        norm_expression = norm_expression,
                        sample = df_meta$Sample.ID,
                        label = df_meta$Sample.Label,
                        genotype = df_meta$Genotype
                        )
  # by sample
  stats <- aggregate(expression ~ sample, data = gene_df, 
                     FUN = function(x) c(pct_non_zero = pct_non_zero(x), mean_non_zero = mean_non_zero(x)))
  
  norm_stats <- aggregate(norm_expression ~ sample, data = gene_df, 
                          FUN = function(x) c(pct_non_zero = pct_non_zero(x), mean_non_zero = mean_non_zero(x)))
  
  # join stats and norm_stats
  stats <- merge(stats, norm_stats, by="sample")
  
  # Add the number of cells for each sample to the result
  stats$cell_count <- cell_counts_by_sample[stats$sample]
  stats$gene <- group
  stats
})

gene_stats_grouped <- do.call(rbind, gene_stats_grouped)
gene_stats_grouped <- gene_stats_grouped[, c("gene", "sample","cell_count", "expression", "norm_expression")]

# Now combine the two 
#colnames(gene_stats_grouped) #<- c("sample", "expression.mean", "expression.sd", "gene"))
gene_stats_grouped <- gene_stats_grouped[, c("gene", "sample","cell_count", "expression", "norm_expression")]
#colnames(df_gene_stats)
df_list <- list(df_gene_stats, gene_stats_grouped)
df_gene_stats2 <- do.call(rbind, df_list)
 
# add gene names from df_gene_data2
df_gene_data_temp <- df_gene_data2[,c("Display_Name", "OfInterest_Reason", "Notes", "GroupAs", "Highlight")]
df_gene_stats3 <- merge(df_gene_stats2, df_gene_data_temp, by.x="gene", by.y="Display_Name")

# also get sample.label from df_sample
df_gene_stats4 <- merge(df_gene_stats3, df_sample[,c("Sample.ID", "Sample.Nm", "Genotype")], by.x="sample", by.y="Sample.ID")

cat("Writing geneOfInterest_stats_spleen.csv with Percentage non-zero, mean expression for ",
    length(unique(df_gene_stats4$gene)), " genes")
write.csv(df_gene_stats4, paste0(results_dir, "/geneOfInterest_stats_spleen.csv"), row.names = FALSE)


```


# SpatialFOVs

Crop FOVs using bounding boxes of sample extents for Spatial rendering of multiple molecules per TMA sample. This is an alternate method to subsetting the object by sample number, and may result in trimmer plots.

```{r crop}
#| echo: false
#| warning: false
Idents(sobj_spleen_integrated) <- "CellType_Integrated"
p <- ImageDimPlot(sobj_spleen_integrated, fov="Sabaawynewcore091320245", axes=TRUE, flip_xy =FALSE,
             cols=mouseIO_colors)
ggsave(paste0(results_dir, "/Spatial_Spleen_all.png"), p, dpi=300, width=12)

#######################
# Define fovs, needed for spatial plots of molecules. 
# fov30 
# fov31, etc. 
df_meta <- sobj_spleen_integrated@meta.data
bbox_mtx <- get_bbox_of_sample(df_meta, "Sabaawy new core 09/13/2024 5", 30)
bbox_mtx
# BUG: The y and x coords are flipped in the Crop function
cropped.coords <- Crop(sobj_spleen_integrated[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
sobj_spleen_integrated[["fov30"]] <- cropped.coords
# do we have the right subregion?

DefaultBoundary(sobj_spleen_integrated[["fov30"]]) <- "segmentation"
ImageDimPlot(sobj_spleen_integrated, fov="fov30", axes=TRUE, flip_xy=FALSE, border.size=0.01, cols=mouseIO_colors)
ggsave(paste0(results_dir, "/Spatial_Spleen_30.png"), last_plot(), dpi=300, width=8)

# fov31
bbox_mtx <- get_bbox_of_sample(df_meta, "Sabaawy new core 09/13/2024 5", 31)
bbox_mtx
cropped.coords <- Crop(sobj_spleen_integrated[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
sobj_spleen_integrated[["fov31"]] <- cropped.coords
# fov32
bbox_mtx <- get_bbox_of_sample(df_meta, "Sabaawy new core 09/13/2024 5", 32)
bbox_mtx
cropped.coords <- Crop(sobj_spleen_integrated[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")

sobj_spleen_integrated[["fov32"]] <- cropped.coords
# fov34
bbox_mtx <- get_bbox_of_sample(df_meta, "Sabaawy new core 09/13/2024 5", 34)
bbox_mtx
cropped.coords <- Crop(sobj_spleen_integrated[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
DefaultBoundary(sobj_spleen_integrated[["fov32"]]) <- "segmentation"
ImageDimPlot(sobj_spleen_integrated, fov="fov32", axes=TRUE, flip_xy=FALSE, border.size=0.01, cols=mouseIO_colors)
ggsave(paste0(results_dir, "/Spatial_Spleen_32.png"), last_plot(), dpi=300, width=8)

sobj_spleen_integrated[["fov34"]] <- cropped.coords
DefaultBoundary(sobj_spleen_integrated[["fov34"]]) <- "segmentation"
ImageDimPlot(sobj_spleen_integrated, fov="fov34", axes=TRUE, flip_xy=FALSE, border.size=0.01, cols=mouseIO_colors)
ggsave(paste0(results_dir, "/Spatial_Spleen_34.png"), last_plot(), dpi=300, width=8)

# fov35
bbox_mtx <- get_bbox_of_sample(df_meta, "Sabaawy new core 09/13/2024 5", 35)
bbox_mtx
cropped.coords <- Crop(sobj_spleen_integrated[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
sobj_spleen_integrated[["fov35"]] <- cropped.coords



DefaultBoundary(sobj_spleen_integrated[["fov31"]]) <- "segmentation" # "segmentation" or "centroids" # sets cell segmentation outline
DefaultBoundary(sobj_spleen_integrated[["fov32"]]) <- "segmentation" # sets cell segmentation outline
DefaultBoundary(sobj_spleen_integrated[["fov34"]]) <- "segmentation" # sets cell segmentation outline
DefaultBoundary(sobj_spleen_integrated[["fov35"]]) <- "segmentation"


```

## Plot spatial fov

```{r spatial30}
#| echo: false
#| warning: false
# for fov or subset, e.g. fov 285, show celltypes and molecules
# fov34
fov_num <- 254

plot_fov_w_markers <- function(sobj, fov_num, mols, mol.colors, title) {
    
  # 
  df_meta <- sobj@meta.data
  bbox_mtx <- get_bbox_of_fov(df_meta, "Sabaawy new core 09/13/2024 5", fov_num)
  #bbox_mtx
  
  cropped.coords <- Crop(sobj[["Sabaawynewcore091320245"]], 
                         y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
  fov_name <- paste0("fov", fov_num)
  sobj[[fov_name]] <- cropped.coords
  DefaultBoundary(sobj[[fov_name]]) <- "segmentation" 
  #print(mol.colors)
  # Workaround: sobj_spleen_integrated is having issues plotting molecules, "coordinate system" error. 
  # However, sobj_spleen (pre Integration) has cell types loaded. 
  Idents(sobj) <- "CellType_Integrated"
  #table(Idents(sobj))
  p <- ImageDimPlot(sobj, fov=fov_name, axes=TRUE, 
               molecules= mols, 
               mols.cols = mol.colors,
               mols.size = 0.5,
               alpha = 1,
               border.size = 0.1,
               coord.fixed=TRUE,
               flip_xy = FALSE, 
               cols=mouseIO_colors) +
    # something hacky to try to get different plots to be on same scale 
    scale_x_continuous(limits = c(bbox_mtx["y", "min"], bbox_mtx["y", "max"])) +
    scale_y_continuous(limits = c(bbox_mtx["x", "min"], bbox_mtx["x", "max"])) +
    ggtitle(title)
  p  
  ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_", title,".png"), p, dpi=600, height=8)
  
  return(p)
}

p34a <- plot_fov_w_markers(sobj_spleen_integrated, 258, c("Cdkn1a","Lmna", "Mki67"), c("cyan", "red", "magenta"), "34Hom_Sene")
p34_1 <- plot_fov_w_markers(sobj_spleen_integrated, 258, c("Cdkn1a"), c("cyan"), "34Hom_Cdkn1a")
p34_2 <- plot_fov_w_markers(sobj_spleen_integrated, 258, c("Lmna"), c("red"), "34Hom_Lmna")
p34_3 <- plot_fov_w_markers(sobj_spleen_integrated, 258, c("Mki67"), c("magenta"), "34Hom_Mki67")


p32a <- plot_fov_w_markers(sobj_spleen_integrated, 268, c("Cdkn1a","Lmna", "Mki67"), c("cyan", "red", "magenta"), "32Het_Sene")
p32_1 <- plot_fov_w_markers(sobj_spleen_integrated, 268, c("Cdkn1a"), c("cyan"), "32Het_Cdkn1a")
p32_2 <- plot_fov_w_markers(sobj_spleen_integrated, 268, c("Lmna"), c("red"), "32Het_Lmna")
p32_3 <- plot_fov_w_markers(sobj_spleen_integrated, 268, c("Mki67"), c("magenta"), "32Het_Mki67")

p30a <- plot_fov_w_markers(sobj_spleen_integrated, 281, c("Cdkn1a","Lmna", "Mki67"), c("cyan", "red", "magenta"), "30WT_Sene")
p30_1 <- plot_fov_w_markers(sobj_spleen_integrated, 281, c("Cdkn1a"), c("cyan"), "30WT_Cdkn1a")
p30_2 <- plot_fov_w_markers(sobj_spleen_integrated, 281, c("Lmna"), c("red"), "30WT_Lmna")
p30_3 <- plot_fov_w_markers(sobj_spleen_integrated, 281, c("Mki67"), c("magenta"), "30WT_Mki67")

# to keep scaling consitent from plot to plot, patchwork them 
#p34a + p32a + p30a
cat("Aligning Sample y axes with patchwork")
p34a + p32a

print("Saving Sample 34, 32, 30 to Spatial_3fovs_SenescenceMkrs.png")
ggsave(paste0(results_dir, "/Spatial_3fovs_SenescenceMkrs.png"), (p34a + p32a + p30a), dpi=600, height=6, width=20)
print("Saving Spatial_3fovs_P21_only.png")
ggsave(paste0(results_dir, "/Spatial_3fovs_P21_only.png"), (p34_1 + p32_1 + p30_1), dpi=600, height=6, width=20)
print("Saving Spatial_3fovs_Lmna_only.png")
ggsave(paste0(results_dir, "/Spatial_3fovs_Lmna_only.png"), (p34_2 + p32_2 + p30_2), dpi=600, height=6, width=20)
print("Saving Spatial_3fovs_Mki67_only.png")
ggsave(paste0(results_dir, "/Spatial_3fovs_Mki67_only.png"), (p34_3 + p32_3 + p30_3), dpi=600, height=6, width=20)


```

### Zoom

Note: an fov is 510 um x 510 um and 4225 pixels x 4225 pixels. Therefore, a 50 um scale bar should be about 400 pixels across. If zoom is 1000 px \^2, plan for a scale bar 4/10 of the width = 50 um

```{r zoom254}
#| echo: false
#| warning: false
# square 1000 x 1000 from min (x,y)
fov_num <- 254

### SET THESE based of FOV plot above 
# fov254 (sample 34) to get both: x_min: 24500 y_min: 62500 (used)
# fov285 (sample 30) x_min: 92900 y_min: 57100
x_min <- 24500
y_min <- 62500


plot_zoom <- function(sobj, fov, x, y, mols, mol.colors, title) {

  size <- 1000
  x_max <- x_min + size
  y_max <- y_min + size
  print(paste(y_min, y_max, x_min, x_max))
  
  #sobj_fov <- subset(sobj, subset = Sample.ID %in% sample_ids )
  # Create a 2x2 matrix
  bbox_mtx <- matrix(c(y_min, y_max, x_min, x_max), nrow = 2, byrow = TRUE,
                         dimnames = list(c("y", "x"), c("min", "max")))
  
  #bbox_mtx <- get_bbox_from_corner(df_meta, "Sabaawy new core 09/13/2024 5", fov_num)
  bbox_mtx
  cropped.coords <- Crop(sobj[["Sabaawynewcore091320245"]], 
                         y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
  zoom_name <- paste0("zoom", fov_num)
  sobj[[zoom_name]] <- cropped.coords
  DefaultBoundary(sobj[[zoom_name]]) <- "segmentation" 
  
  # ccl5 
  #molcols = c("#f781bf") # Ccl5
  # Define the desired x range per inch
  x_range_per_inch <- 200  # Example: 200 x units per inch
  # Calculate aspect ratio based on plot dimensions
  # Suppose we know the plot width in inches (e.g., 6 inches)
  plot_width_in_inches <- 6
  total_x_range <- 1000  # The full x range in the data
  aspect_ratio <- (total_x_range / plot_width_in_inches) / x_range_per_inch
  
  p <- ImageDimPlot(sobj, fov=zoom_name, axes=TRUE, 
               molecules= mols, 
               mols.cols = mol.colors,
               mols.size = 1.0,
               flip_xy = FALSE,
               alpha=1.0,
               crop = FALSE,
               coord.fixed=TRUE,
               cols=mouseIO_colors ) +
    #coord_fixed(ratio = 1) +
    #theme(aspect.ratio = aspect_ratio) +
    scale_x_continuous(limits = c(y_min, y_max)) +
    scale_y_continuous(limits = c(x_min, x_max)) +
    ggtitle("Sample 34 Hom") 
    
  ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_", title, "_zoom.png"), last_plot(), dpi=300, height=8)
  
  return(p)
  
}


p <- plot_zoom(sobj_spleen_integrated, fov_num, x_min, y_min, mols = c("Cdkn1a"), mol.colors=c("blue"), title="Sample30_P21" )

```

```{r spatialWT}
#| echo: false
#| warning: false
# for fov or subset, e.g. fov 285, show celltypes and molecules
# fov34
fov_num <- 285
# 
df_meta <- sobj_spleen_integrated@meta.data
bbox_mtx <- get_bbox_of_fov(df_meta, "Sabaawy new core 09/13/2024 5", fov_num)
bbox_mtx

cropped.coords <- Crop(sobj_spleen_integrated[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
fov_name <- paste0("fov", fov_num)
sobj_spleen_integrated[["fov285"]] <- cropped.coords
DefaultBoundary(sobj_spleen_integrated[[fov_name]]) <- "segmentation" 

# Workaround: sobj_spleen_integrated is having issues plotting molecules, "coordinate system" error. 
# However, sobj_spleen (pre Integration) has cell types loaded. 
Idents(sobj_spleen_integrated) <- "CellType_Integrated"
table(Idents(sobj_spleen_integrated))
p <- ImageDimPlot(sobj_spleen_integrated, fov=fov_name, axes=TRUE, 
             molecules= c("Ccl5", "Cxcl13"), 
             mols.cols = c("cyan", "blue"),
             mols.size = 0.3,
             alpha = 1,
             border.size = 0.1,
             coord.fixed=TRUE,
             flip_xy = FALSE, 
             cols=mouseIO_colors) +
  ggtitle("Sample 30 WT")
p  
ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_Sample30_fov285.png"), p, dpi=300, height=8)

```

```{r zoom285}
#| echo: false
#| warning: false
# square 1000 x 1000 from min (x,y)
fov_num <- 285

### SET THESE based of FOV plot above 
# fov254 (sample 34) to get both: x_min: 24500 y_min: 62500 (used)
# fov285 (sample 30) x_min: 92900 y_min: 57500
x_min <- 92900
y_min <- 57500
  size <- 1000
  x_max <- x_min + size
  y_max <- y_min + size
  print(paste(y_min, y_max, x_min, x_max))
  
  #sobj_fov <- subset(sobj, subset = Sample.ID %in% sample_ids )
  # Create a 2x2 matrix
  bbox_mtx <- matrix(c(y_min, y_max, x_min, x_max), nrow = 2, byrow = TRUE,
                         dimnames = list(c("y", "x"), c("min", "max")))

bbox_mtx
cropped.coords <- Crop(sobj_spleen_integrated[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
zoom_name <- paste0("zoom", fov_num)
sobj_spleen_integrated[[zoom_name]] <- cropped.coords
DefaultBoundary(sobj_spleen_integrated[[zoom_name]]) <- "segmentation" 

# ccl5 
#molcols = c("#f781bf") # Ccl5
# Define the desired x range per inch
x_range_per_inch <- 200  # Example: 200 x units per inch
# Calculate aspect ratio based on plot dimensions
# Suppose we know the plot width in inches (e.g., 6 inches)
plot_width_in_inches <- 6
total_x_range <- 1000  # The full x range in the data
aspect_ratio <- (total_x_range / plot_width_in_inches) / x_range_per_inch

p285 <- ImageDimPlot(sobj_spleen_integrated, fov=zoom_name, axes=TRUE, 
             molecules= c("Ccl5", "Cxcl13"), 
             mols.cols = c("cyan", "blue"),
             mols.size = 1.0,
             flip_xy = FALSE,
             alpha=1.0,
             crop = FALSE,
             coord.fixed=TRUE,
             cols=mouseIO_colors ) +
  scale_x_continuous(limits = c(y_min, y_max)) +
  scale_y_continuous(limits = c(x_min, x_max)) +
  
  ggtitle("Sample 30 WT")

p285

ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_Sample30_Ccl5_Cxcl13_zoom.png"), last_plot(), dpi=300, height=8)

```

```{r}
#| echo: false
#| warning: false
# for fov or subset, e.g. fov 285, show celltypes and molecules
# Show an example full fov in sample 34
fov_num <- 268
# 
df_meta <- sobj_spleen_integrated@meta.data
bbox_mtx <- get_bbox_of_fov(df_meta, "Sabaawy new core 09/13/2024 5", fov_num)
bbox_mtx

cropped.coords <- Crop(sobj_spleen_integrated[["Sabaawynewcore091320245"]], 
                       y = c(bbox_mtx[2,1], bbox_mtx[2,2]), x = c(bbox_mtx[1,1], bbox_mtx[1,2]), coords = "plot")
fov_name <- paste0("fov", fov_num)
sobj_spleen_integrated[["fov268"]] <- cropped.coords
DefaultBoundary(sobj_spleen_integrated[[fov_name]]) <- "segmentation" 

Idents(sobj_spleen_integrated) <- "CellType_Integrated"
table(Idents(sobj_spleen_integrated))
p <- ImageDimPlot(sobj_spleen_integrated, fov=fov_name, axes=TRUE, 
             molecules= c("Cdkn1a", "Lmna", "Mki67"), 
             mols.cols = c("lightblue", "red", "pink"),
             mols.size = 1,
             alpha = 1,
             border.size = 0.1,
             coord.fixed=TRUE,
             flip_xy = FALSE, 
             cols=mouseIO_colors) +
  ggtitle("Sample 32 Het")
p  

ggsave(paste0(results_dir, "/SpatialFov_",fov_num,"_Samp32_Sene_fov268.png"), p, dpi=300, height=8)

```


## CellType-Marker Counts

Downstream of Celltyping, write raw data for CellType, marker combinations by fov

Leveraging our sample dataframe(s) of cell/gene matrices, re-aggregate for Dendritic.cell (celltype from Supervised InSituType) and gene: Cxcl13. and Neutrophil celltype with Ccl5.

```{r celltype2 }
#| echo: false

# Summarize the counts matrix by fov by cell type
df_30$fov <- sapply(df_30$cell, parse_third_token)
df_30_ct_neut <- get_pct_fov_celltype(df_30, 30, 'Neutrophil', 'Ccl5')
df_30_ct_dc <- get_pct_fov_celltype(df_30, 30, 'Dendritic.cell', 'Cxcl13')

# Repeat for each Sample ID
df_31$fov <- sapply(df_31$cell, parse_third_token)
df_31_ct_neut <- get_pct_fov_celltype(df_31, 31, 'Neutrophil', 'Ccl5')
df_31_ct_dc <- get_pct_fov_celltype(df_31, 31, 'Dendritic.cell', 'Cxcl13')

df_32$fov <- sapply(df_32$cell, parse_third_token)
df_32_ct_neut <- get_pct_fov_celltype(df_32, 32, 'Neutrophil', 'Ccl5')
df_32_ct_dc <- get_pct_fov_celltype(df_32, 32, 'Dendritic.cell', 'Cxcl13')

df_33$fov <- sapply(df_33$cell, parse_third_token)
df_33_ct_neut <- get_pct_fov_celltype(df_33, 33, 'Neutrophil', 'Ccl5')
df_33_ct_dc <- get_pct_fov_celltype(df_33, 33, 'Dendritic.cell', 'Cxcl13')

df_34$fov <- sapply(df_34$cell, parse_third_token)
df_34_ct_neut <- get_pct_fov_celltype(df_34, 34, 'Neutrophil', 'Ccl5')
df_34_ct_dc <- get_pct_fov_celltype(df_34, 34, 'Dendritic.cell', 'Cxcl13')

df_35$fov <- sapply(df_35$cell, parse_third_token)
df_35_ct_neut <- get_pct_fov_celltype(df_35, 35, 'Neutrophil', 'Ccl5')
df_35_ct_dc <- get_pct_fov_celltype(df_35, 35, 'Dendritic.cell', 'Cxcl13')


```

Compile the Sample stats on our gene and celltype of interest. Dendritic.cell with Cxcl13 and Neutrophils with Ccl5

```{r mergethis}
#| echo: false
#| message: false
#| warning: false
#| 
df_genes_by_dc_by_fov <- rbind(df_30_ct_dc, df_31_ct_dc, df_32_ct_dc, df_33_ct_dc, df_34_ct_dc, df_35_ct_dc)
df_genes_by_neut_by_fov <- rbind(df_30_ct_neut, df_31_ct_neut, df_32_ct_neut, df_33_ct_neut, df_34_ct_neut, df_35_ct_neut)

write.csv(df_genes_by_dc_by_fov, paste0(results_dir, "/cxcl13_dcs_byfov.csv"))
write.csv(df_genes_by_neut_by_fov, paste0(results_dir, "/ccl5_neut_byfov.csv"))

#cleanup
rm(df_30_ct_dc, df_31_ct_dc, df_32_ct_dc, df_33_ct_dc, df_34_ct_dc, df_35_ct_dc)
rm(df_30_ct_neut, df_31_ct_neut, df_32_ct_neut, df_33_ct_neut, df_34_ct_neut, df_35_ct_neut)

```

## CellType Percents

Overall Sample Summaries for DCs (Cxcl13) and Neutrophils (Ccl5)

```{r DC_Neut_Summary}
#| echo: false

df_ct30_sample_dc <- get_sample_pcts_bycelltype(df_30, 30, celltype='Dendritic.cell', marker='Cxcl13')
df_ct31_sample_dc <- get_sample_pcts_bycelltype(df_31, 31, celltype='Dendritic.cell', marker='Cxcl13')
df_ct32_sample_dc <- get_sample_pcts_bycelltype(df_32, 32, celltype='Dendritic.cell', marker='Cxcl13')
df_ct33_sample_dc <- get_sample_pcts_bycelltype(df_33, 33, celltype='Dendritic.cell', marker='Cxcl13')
df_ct34_sample_dc <- get_sample_pcts_bycelltype(df_34, 34, celltype='Dendritic.cell', marker='Cxcl13')
df_ct35_sample_dc <- get_sample_pcts_bycelltype(df_35, 35, celltype='Dendritic.cell', marker='Cxcl13')

df_ct30_sample_neut <- get_sample_pcts_bycelltype(df_30, 30, celltype='Neutrophil', marker='Ccl5')
df_ct31_sample_neut <- get_sample_pcts_bycelltype(df_31, 31, celltype='Neutrophil', marker='Ccl5')
df_ct32_sample_neut <- get_sample_pcts_bycelltype(df_32, 32, celltype='Neutrophil', marker='Ccl5')
df_ct33_sample_neut <- get_sample_pcts_bycelltype(df_33, 33, celltype='Neutrophil', marker='Ccl5')
df_ct34_sample_neut <- get_sample_pcts_bycelltype(df_34, 34, celltype='Neutrophil', marker='Ccl5')
df_ct35_sample_neut <- get_sample_pcts_bycelltype(df_35, 35, celltype='Neutrophil', marker='Ccl5')


# rbind
df_dc_by_sample <- rbind(df_ct30_sample_dc, df_ct31_sample_dc, df_ct32_sample_dc, df_ct33_sample_dc, df_ct34_sample_dc, df_ct35_sample_dc)
df_neut_by_sample <- rbind(df_ct30_sample_neut,df_ct31_sample_neut,df_ct32_sample_neut,df_ct33_sample_neut, df_ct34_sample_neut,df_ct35_sample_neut)

write.csv(df_dc_by_sample, paste0(results_dir, "/Dendritic_by_sample.csv"))
write.csv(df_neut_by_sample, paste0(results_dir, "/Neutrophils_by_sample.csv"))

#cleanup
rm(df_ct30_sample_neut, df_ct31_sample_neut, df_ct32_sample_neut, df_ct33_sample_neut, df_ct34_sample_neut, df_ct35_sample_neut)
rm(df_ct30_sample_dc, df_ct31_sample_dc, df_ct32_sample_dc, df_ct33_sample_dc, df_ct34_sample_dc, df_ct35_sample_dc)

```

```{r statsbyfov}
#| echo: false
#| warning: false

marker_name <- 'Ccl5'
marker_names <- c('Chek1', 'Stmn1', 'Pten', 'Ccl5', 'Cxcl13', 'Gzmb', 'Cdkn1a', 'Lmna','Mki67')
sample_ids <- c(30,31,32,33,34,35)

df_matrices <- rbind(df_30, df_31,df_32, df_33, df_34, df_35)
result_df <- data.frame()

for (marker_name in marker_names) {
  #print(marker_name)
  for (sample_id in sample_ids) {
    #print(sample_id)
    df_temp <- get_pct_fov(df_matrices, sample_id, marker_name)
    result_df <- rbind(result_df, df_temp)
  }
}
    
cat("stats by fov dim: ", dim(result_df))

write.csv(result_df, paste0(results_dir, "/SenescenceGenes_byfov.csv"))

# Cleanup variables used for interim work 
rm(df_30, df_31, df_32, df_33, df_34, df_35)
rm(df_30_fov,df_31_fov, df_32_fov, df_33_fov, df_34_fov, df_35_fov)


```

```{r getcounts}
#| echo: false
#| warning: false

df_meta <- sobj_spleen_integrated@meta.data

counts_matrix <- as.matrix(GetAssayData(sobj_spleen_integrated, assay="RNA", layer="counts"))

df_counts <- get_counts_byfov(df_meta, counts_matrix, df_rna_lookup, "Endogenous")
cat("counts matrix size (genes x cells) saved in CellCounts_byfov.csv: ", dim(df_counts))
cat("Total RNA probe count: ", sum(df_counts$num_probes))


write.csv(df_counts, paste0(results_dir, "/CellCounts_byfov.csv"))



```

```{r countmatrix}
#| echo: false
#| warning: false
counts <- as.matrix(GetAssayData(sobj_spleen_integrated, assay="RNA", layer="counts"))
data <- as.matrix(GetAssayData(sobj_spleen_integrated, assay="RNA", layer="data"))
write.csv(as.matrix(counts), file = paste0(saved_rds_dir, "/count_matrix.csv"))
write.csv(as.matrix(counts), file = paste0(saved_rds_dir, "/norm_count_matrix.csv"))

```



```{r cleanup}
#| include: false
#| warning: false 

rm(sobj_spleen30, sobj_spleen31, sobj_spleen32, sobj_spleen33, sobj_spleen34, sobj_spleen35)
rm(counts_matrix)
rm(top_markers_list, top_markers)

rm(data, counts)
rm(cropped.coords)
rm(p, p285, p30_1, p30_2, p30_3, p30a, p32_1, p32_2, p32_3, p32a, p34_1, p34_2, p34_3)
rm(pt_df)
rm(sobj_spleen5.no.umap)

rm(spleen_markers_cluster, spleen_markers)
rm(df_ct30_sample_dc, df_ct31_sample_dc, df_ct32_sample_dc, df_ct33_sample_dc, df_ct34_sample_dc, df_ct35_sample_dc)

rm(exp_data, exp_data2, norm_exp_data, norm_exp_data2)
rm(df_matrices, df_meta)
rm(p34a, df_temp)



```

